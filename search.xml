<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java后端学习路线</title>
      <link href="/2020/11/01/Java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2020/11/01/Java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java程序员高薪技术，看看你会不会文案如下：</p></blockquote><h2 id="我们先说数据库层面"><a href="#我们先说数据库层面" class="headerlink" title="我们先说数据库层面"></a>我们先说数据库层面</h2><p>以MySQL为例</p><ul><li>数据库的增删改查语法是必须要会的</li><li>数据库的三范式、表设计、主外键等知识</li><li>还有就是关联查询，left join、right join、inner join等等</li><li>数据库的一些函数的使用，了解一下</li><li>Mysql四大特性与四种隔离级别</li><li>下面是数据库的拔高知识点</li><li>数据库的全局锁、表锁、行锁、死锁、乐观锁、悲观锁</li><li>数据库的索引是什么</li><li>索引底层实现原理、存储方式等</li><li>如何创建索引、优化索引</li><li>为什么几百万的数据量加上索引后，查询速度会很快</li></ul><h2 id="下面在讲Java后端需要会的知识点"><a href="#下面在讲Java后端需要会的知识点" class="headerlink" title="下面在讲Java后端需要会的知识点"></a>下面在讲Java后端需要会的知识点</h2><p>Java基础这些肯定要很熟悉，Java集合重点学</p><p>Java多线程，线程池重点学习</p><p>JUC包下的锁重点学习</p><p>io和nio学一下</p><p>Java web方面大家学一下</p><p>然后重点放在JavaEE框架上</p><p>比如<code>spring、spring MVC、spring boot、spring security\shiro、spring data、hibernate、mybatis</code>等等<br>spring boot是当下很火的框架，一定要学</p><p>多了解spring的一些实现原理，如果IOC控制反转等</p><p>Structs我劝大家不要学了，目前很多公司已经不用了<br>有些公司非常老的项目，可能还在用Structs<br>Structs有很多问题</p><h2 id="在讲讲缓存和操作系统方面"><a href="#在讲讲缓存和操作系统方面" class="headerlink" title="在讲讲缓存和操作系统方面"></a>在讲讲缓存和操作系统方面</h2><p>目前最流行的缓存是Redis，其实Redis也是一种数据库</p><p>要学Redis基本数据类型和各种常用命令</p><p>Redis如何进行持久化和持久化数据恢复等基础知识</p><p>操作系统方面要学习Linux</p><p>Linux常用命令</p><p>重点看一下Linux查看日志的各种命令</p><h2 id="前端方面建议大家做一下了解"><a href="#前端方面建议大家做一下了解" class="headerlink" title="前端方面建议大家做一下了解"></a>前端方面建议大家做一下了解</h2><p>比如<code>JavaScript、ajax、jQuery</code>一些简单的HTML和css编写</p><p>重点了解一下前后端的HTTP通信方式</p><p>比如restful风格啊，请求头、请求头、请求方式等等</p><p>这块主要是为了以后和前端同学合作</p><h2 id="编程工具方面常用的我列举一下"><a href="#编程工具方面常用的我列举一下" class="headerlink" title="编程工具方面常用的我列举一下"></a>编程工具方面常用的我列举一下</h2><p><code>IntelliJ IDEA、Eclipse、Maven、gradle、Git、</code><br><code>SVN、navicat、sqlyog、Postman、JMeter、</code><br><code>SecureCRT、SecureFX、Xshell、Xftp、VisualVM</code>等等</p><h2 id="下面注意了，我开始讲高级知识点了"><a href="#下面注意了，我开始讲高级知识点了" class="headerlink" title="下面注意了，我开始讲高级知识点了"></a>下面注意了，我开始讲高级知识点了</h2><p>属于技术拔高的知识，上面知识都学的没问题了，在学这些知识点</p><p>数据库方面学习主从复制，数据库集群搭建</p><p>数据库读写分离、分库分表，比如sharding-jdbc、mycat等等</p><p>对于上面讲的初中级技术点，仔细学习他们的实现原理，阅读源码</p><p>Redis方面学习Redis主从复制、哨兵机制，Redis集群搭建等等</p><p>学习spring cloud微服务框架、dubbo RPC框架等</p><p>学习jvm的组成结构，垃圾回收机制，jvm优化等等</p><p>学习netty网络通信框架</p><p>学习zookeeper分布式服务框架、elastic-search分布式搜索引擎</p><p>kafka分布式发布订阅消息系统，Nginx高性能的HTTP和反向代理服务器</p><p>elastic-job分布式定时任务、分布式锁、分布式事物等等</p><p>高并发下的服务熔断、降级、限流</p><p>分布式缓存架构、缓存雪崩、穿透等等</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千羽这两年..</title>
      <link href="/2020/10/21/%E5%8D%83%E7%BE%BD%E8%BF%99%E4%B8%A4%E5%B9%B4/"/>
      <url>/2020/10/21/%E5%8D%83%E7%BE%BD%E8%BF%99%E4%B8%A4%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="人生从大学开始"><a href="#人生从大学开始" class="headerlink" title="人生从大学开始"></a>人生从大学开始</h2><blockquote><p>时光匆匆忙忙，一眨眼，两年就过去了。时间的追着我们成长，大一时的懵懵懂懂，到大二的纯真，到大三的老油条…</p></blockquote><h2 id="一腔热血，满腔激情"><a href="#一腔热血，满腔激情" class="headerlink" title="一腔热血，满腔激情"></a>一腔热血，满腔激情</h2><blockquote><p>进入大学后有什么样的目标，是什么时候开始确立的呢？</p></blockquote><p>千羽进入大学之后的第一个目标，**就想着提高自己的<code>软实力+硬实力</code>**。那可谓是一腔热血，满腔激情。硬实力就想着搞好自己的专业技能，软实力就是提升一下自己的交流与表达，综合能力等等。</p><p>然后全方位提升自己，在学习方面能做到认真学习，作业不拖沓，积极回答老师问题…此外，在大一时，我还积极参加校机构，院学生会等的社团组织（基本上每天都在忙…），团学的志愿活动，在学生组织中丰富自己的经历，锻炼自己的能力。基本上各种比赛，各种活动都有去参加。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/f07ad58170bc76163f8065b07c554fc.jpg" alt="大一参加的活动"></p><blockquote><p>有哪些兴趣爱好？加入那么多，又是如何平衡学习与课余生活的？</p></blockquote><p>千羽的兴趣爱好还真的挺多的，不过偏运动多一些。</p><p>平时比较喜欢<strong>打篮球、看电影、羽毛球、兵乓球、唱歌，</strong>平时还喜欢去图书馆呆一会。看看电子杂志、相关周刊了解艺术美学。其实兴趣爱好和学习并不冲突，<code>学会取舍</code>，<code>劳逸结合</code>，两者能兼得。</p><ol><li><p><strong>一定要做好计划。</strong>每天的安排可以不是很满，可以很灵活。每天做一定量符合自己能力范围内的东西，诸如此类的计划。这样的计划可以让人非常充实，让自己一直保持着一种火力全开的状态</p></li><li><p><strong>在学校以学业为主。</strong>当学业与课外活动冲突的时候，作为一名学生，那肯定是学业了，因为学生的职责就是学习，所以应该义无反顾的选择学业，牺牲一下课外活动。毕竟大多数的人以后的主业，是在大学里学的专业，所以我们需要作出正确的选择。</p></li></ol><blockquote><p>千羽连续两年获得一等奖奖学金，是如何做到在忙碌的同时，又做到拿到奖学金的？</p></blockquote><p>大一是真的忙，有时候下午打完篮球赛，晚上还有足球赛…然后还有扫楼..基本上一到宿舍就躺床上不想动了</p><p>不过，奖学金这种东西，自己尽力了就好，千万不要为了争个奖学金，搞得全班人都针锋相对，那就不好了。对于千羽而言，其实也不难，大一参加很多比赛，然后全班总体排名第一；到了大二就参加了很多省赛，所以奖学金自然而然就来了。</p><p><strong>第一，要分配好时间。</strong>该学习的时候就要学习，该做学生工作的时候要专注学生工作。不能一心二用，这样不仅浪费时间，结果还事倍功半。</p><p><strong>第二，要充分利用时间。</strong>有很多零碎的时间我们可以利用，你可以在课间、上课路上、睡前的时候你可以构思你的工作想法，活动方案，学习计划或者是进行一次课后反思，抓住零碎时间能更好提高你的办事效率。</p><p><strong>第三，要学会去思考，去创新思维。</strong>学习和学生工作两者并不冲突，甚至可以结合。</p><blockquote><p>千羽的大学生活中有自认为留有遗憾的地方</p></blockquote><p>我觉得遗憾的地方其实挺多的，在辩论赛的ppt控屏就没有做好自己的本分。学习上，没有早一认清学习的方向性，当时什么都学一点，没有多余的时间去发展自己的兴趣爱好，没有能学习自己感兴趣的知识和技能…</p><blockquote><p>有什么关于学习上、生活上的经验可以分享给学弟学妹们呢？</p></blockquote><ol><li><p><strong>一定要明确自己的目标。</strong></p></li><li><p><strong>知道自己想要什么</strong>。越早确立你的目标，你的大学生活会过的很充实、很顺畅。</p></li><li><p><strong>知道自己能干什么</strong>。一定要发现自己的长处，挖掘自己的兴趣，</p></li><li><p><strong>知道自己要做什么</strong>。规划好自己的生活与目标。</p></li></ol><blockquote><p>千羽觉得大学里应该学到的最重要的是什么呢？</p></blockquote><p>我觉得在大学里最重要的应该就是学会思考，待事认真，要看的远，而不是站得高。</p><p>很多东西是存在的，只是我们不知道，也没有人带我们去挖掘。所以这个时候要靠自己去专研。</p><p>无论一件事或大或小，我做了我肯定会用心做，用心去思考，怎么样把它做得完美，而不是急于求成，为了完成任务而完成任务，这就是所谓的“站得高”。</p><p>就拿做一个C语言作业来说，你自己做跟上网抄交上去，那区别是非常大的，上网抄虽然你完成了任务，但从远看，你失去的是一个提升自我的机会，并且还会养成抄作业的习惯，到达这样的“高度”，是不够有远见的。</p><p>在大学里，我遇到优秀的人，他们对待事情的态度一定是非常认真的。不论事情大小，我们要做的应该是<strong>凡事认真的对待，认真的去思考，要学会“看的远”</strong>。</p><p>大学里，有的人是工作强人，有的人是忙着学习的，有的人是忙着兼职打工的，有的人是忙着学习的..更有的优秀的学生就是样样精通（<strong>非人哉</strong>），就是工作能力很强，学习也照样拿第一，然后大学里也赚了不少钱。</p><p>其实我觉得失败是常有的，人非圣贤孰能无过，但绝对不能重复犯错。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐算法</title>
      <link href="/2020/09/25/%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95/"/>
      <url>/2020/09/25/%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创新点：如何用大数据分析学生行为来进行个性化推荐的"><a href="#1-创新点：如何用大数据分析学生行为来进行个性化推荐的" class="headerlink" title="1:创新点：如何用大数据分析学生行为来进行个性化推荐的"></a>1:创新点：如何用大数据分析学生行为来进行个性化推荐的</h3><p><img src="http://img.xjishu.com/img/zl/2019/7/21/05311821323.gif">一种针对学生学习行为的大数据分析与推荐系统，该系统包括：</p><ul><li><p>内容传送模块、</p></li><li><p>预测模块、</p></li><li><p>自适应显示模块、</p></li><li><p>自适应模块、</p></li><li><p>干预模块以及学习者数据库模块；</p><p>其中，所述内容传送模块负责将学习者生成的学习行为数据标记上时间戳，并传递给所述学习者数据库模块；所述学习者数据库模块负责存储预先定义的数据参数结构；所述预测模块负责将所采集数据根据不同的分析目的，调用不同的分析工具及数学模型对相关数据进行分析，并传递分析结果至所述自适应显示模块；所述自适应显示模块根据所述预测模块中数据挖掘及分析的结果，通过所述内容传送模块为学习者推荐合适的学习指导和学习策略；所述干预模块负责根据分析结果对系统进行人为干预。</p></li></ul><p>进一步地，所述内容传送模块主要负责管理、维护、传递个性化的学习内容与评价给学习者，以支持学习者的各种学习行为。</p><p>进一步地，所述预测模块整合了系统外部学习者信息系统中的数据以及系统内部学习者学习的行为数据，通过对数据的处理和分析，对学习者未来的学习行为和结果进行预测。</p><p>进一步地，所述自适应显示模块主要负责将所述预测模块中的处理结果以可视化的方式显示给各类使用者。</p><p>进一步地，所述自适应模块是整个系统的重点，其采用的技术主要是基于大数据挖掘和分析的学习资源推送机制。</p><p>进一步地，所述干预模块可以识别学习者的行为模式，是对学习者学习产生影响的介入手段。</p><p>进一步地，所述学习者数据库模块主要存储了大量学习者在本系统中的被标记时间戳的输入数据及学习行为数据。</p><p>通过收集教育过程中的学习行为数据，利用大数据的学习分析技术，有针对性地推送学习内容，及时反馈学习者的学习效果，并推荐下一步的学习策略，实现了因材施教和培养学生自主学习能力的效果。</p><h3 id="2-应用价值：我们在广理工或者其他平台推广应用了，有实际应用价值。"><a href="#2-应用价值：我们在广理工或者其他平台推广应用了，有实际应用价值。" class="headerlink" title="2:应用价值：我们在广理工或者其他平台推广应用了，有实际应用价值。"></a>2:应用价值：我们在广理工或者其他平台推广应用了，有实际应用价值。</h3><p>广东理工职业学院，广东开放大学</p><h3 id="3-推荐算法，用了哪些算法。"><a href="#3-推荐算法，用了哪些算法。" class="headerlink" title="3:推荐算法，用了哪些算法。"></a>3:推荐算法，用了哪些算法。</h3><ul><li><p>推荐算法：</p><blockquote><p>基于人口学的推荐、基于内容的推荐、基于用户的协同过滤推荐、基于项目的协同过滤推荐、基于模型的协同过滤推荐、基于关联规则的推荐</p></blockquote></li><li><p>fm(Factorization Machines 分解机算法)<br><img src="https://img-blog.csdnimg.cn/20200322171907575.png" alt="在这里插入图片描述"></p></li><li><p>LR(logistic regression 逻辑回归)</p><blockquote><p>逻辑回归本质上是线性回归，只是在特征到结果的映射中加入了一层逻辑函数g(z)，即先把特征线性求和，然后使用函数g(z)作为假设函数来预测。g(z)可以将连续值映射到0 和1。g(z)为sigmoid function.</p></blockquote></li><li><p>embedding<br><img src="https://img-blog.csdnimg.cn/20200322180044746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NDk2MDc3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><ol><li><p><strong>协同过滤的itemCF，userCF区别适用场景</strong></p><blockquote><p>Item CF(Item Collaboration Filter基于商品的协同过滤算法) 和 User CF(User Collaboration Filter 基于用户的协同过滤算法)两个方法都能很好的给出推荐，并可以达到不错的效果。但是他们之间还是有不同之处的，而且适用性也有区别。下面进行一下对比.</p></blockquote></li></ol><ul><li><p>原理<br>userCF是用户相似度矩阵(可通过余弦相似度)<em>评分矩阵(用户对商品的评分矩阵)<br>ItemCF是商品相似度矩阵</em>评分矩阵转置</p></li><li><p>计算复杂度：<br>在非社交网站,如购物网站中,用户数量可能远远大于商品数量,ItemCF复杂度比UserCF复杂度低; 在社交网站中,UserItem复杂度比ItemCF复杂度低.</p></li><li><p>适用场景：<br><strong>在非社交网站,如购物网站中,ItermCF更适用,在社交网站中,UserItem更适用.</strong><br>在非社交网络的网站中，内容内在的联系是很重要的推荐原则，它比基于相似用户的推荐原则更加有效。</p></li></ul><p>  比如在购书网站上，当你看一本书的时候，推荐引擎会给你推荐相关的书籍，这个推荐的重要性远远超过了网站首页对该用户的综合推荐。可以看到，在这种情况下，Item CF 的推荐成为了引导用户浏览的重要手段。同时 Item CF 便于为推荐做出解释，在一个非社交网络的网站中，给某个用户推荐一本书，同时给出的解释是某某和你有相似兴趣的人也看了这本书，这很难让用户信服，因为用户可能根本不认识那个人；但如果解释说是因为这本书和你以前看的某本书相似，用户可能就觉得合理而采纳了此推荐。<br>  相反的，在现今很流行的社交网络站点中，User CF 是一个更不错的选择，User CF 加上社会网络信息，可以增加用户对推荐解释的信服程度。<br>  <a href="https://www.jianshu.com/p/ec3de12db6e7">ItemCF、UserCF参考链接</a></p><ol><li><p><strong>推荐系统的大概步骤，解决冷启动</strong><br>步骤：1）收集用户的所有信息。</p></li><li><p>使用大数据计算平台对收集的信息进行处理，的到用户偏好数据。</p></li><li><p>将偏好数据导入喜好类型计算算法中进行预算计算，得到预算结果。</p></li><li><p>将推荐的结果导入数据库（redis、hbase）。</p></li><li><p>发开一个推荐引擎，对外开放接口，输出推荐结果。</p></li></ol><p>   解决冷启动的方案：<br>   1）提供非个性化的推荐<br>   最简单的例子就是提供热门排行榜，可以给用户推荐热门排行榜，等到用户数据收集到一定的时候，再切换为个性化推荐。例如Netflix的研究也表明新用户在冷启动阶段确实是更倾向于热门排行榜的，老用户会更加需要长尾推荐<br>   2）利用用户注册信息<br>   用户的注册信息主要分为3种：（1）获取用户的注册信息；（2）根据用户的注册信息对用户分类；（3）给用户推荐他所属分类中用户喜欢的物品。</p><p>   3）选择合适的物品启动用户的兴趣<br>   用户在登录时对一些物品进行反馈，收集用户对这些物品的兴趣信息，然后给用户推荐那些和这些物品相似的物品。一般来说，能够用来启动用户兴趣的物品需要具有以下特点：<br>   比较热门，如果要让用户对物品进行反馈，前提是用户得知道这是什么东西；<br>   具有代表性和区分性，启动用户兴趣的物品不能是大众化或老少咸宜的，因为这样的物品对用户的兴趣没有区分性；<br>   启动物品集合需要有多样性，在冷启动时，我们不知道用户的兴趣，而用户兴趣的可能性非常多，为了匹配多样的兴趣，我们需要提供具有很高覆盖率的启动物品集合，这些物品能覆盖几乎所有主流的用户兴趣<br>   4）利用物品的内容信息<br>   用来解决物品的冷启动问题，即如何将新加入的物品推荐给对它感兴趣的用户。物品冷启动问题在新闻网站等时效性很强的网站中非常重要，因为这些网站时时刻刻都有新物品加入，而且每个物品必须能够再第一时间展现给用户，否则经过一段时间后，物品的价值就大大降低了。<br>   5）采用专家标注<br>   很多系统在建立的时候，既没有用户的行为数据，也没有充足的物品内容信息来计算物品相似度。这种情况下，很多系统都利用专家进行标注。<br>   6）利用用户在其他地方已经沉淀的数据进行冷启动<br>   以QQ音乐举例：QQ音乐的猜你喜欢电台想要去猜测第一次使用QQ音乐的用户的口味偏好，一大优势是可以利用其它腾讯平台的数据，比如在QQ空间关注了谁，在腾讯微博关注了谁，更进一步，比如在腾讯视频刚刚看了一部动漫，那么如果QQ音乐推荐了这部动漫里的歌曲，用户会觉得很人性化。这就是利用用户在其它平台已有的数据。<br>   再比如今日头条：它是在用户通过新浪微博等社交网站登录之后，获取用户的关注列表，并且爬取用户最近参与互动的feed（转发/评论等），对其进行语义分析，从而获取用户的偏好。<br>   所以这种方法的前提是，引导用户通过社交网络账号登录，这样一方面可以降低注册成本提高转化率；另一方面可以获取用户的社交网络信息，解决冷启动问题。</p><p>   7）利用用户的手机等兴趣偏好进行冷启动<br>   Android手机开放的比较高，所以在安装自己的app时，就可以顺路了解下手机上还安装了什么其他的app。比如一个用户安装了美丽说、蘑菇街、辣妈帮、大姨妈等应用，就可以判定这是女性了，更进一步还可以判定是备孕还是少女。目前读取用户安装的应用这部分功能除了app应用商店之外，一些新闻类、视频类的应用也在做，对于解决冷启动问题有很好的帮助。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cloud-02-feign-gateway-bus</title>
      <link href="/2020/09/07/cloud-02-feign-gateway-bus/"/>
      <url>/2020/09/07/cloud-02-feign-gateway-bus/</url>
      
        <content type="html"><![CDATA[<h2 id="cloud-02-feign-gateway-bus"><a href="#cloud-02-feign-gateway-bus" class="headerlink" title="cloud-02-feign-gateway-bus"></a>cloud-02-feign-gateway-bus</h2><a id="more"></a><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/Cloud.png" alt="Cloud"></p><h2 id="1-Feign应用"><a href="#1-Feign应用" class="headerlink" title="1. Feign应用"></a>1. Feign应用</h2><blockquote><p><code>Feign</code>的作用 : 使用<code>Feign</code>实现<code>user-consumer</code>代码中调用服务</p></blockquote><p><strong>分析步骤</strong>：</p><ol><li>导入启动器依赖；</li><li>开启<code>Feign</code>功能；</li><li>编写<code>Feign</code>客户端；</li><li>编写一个处理器<code>ConsumerFeignController</code>，注入<code>Feign</code>客户端并使用；</li><li>测试</li></ol><p><strong><code>Feign</code>主要作用：自动根据参数拼接<code>http</code>请求地址。</strong></p><ul><li><p>启动器依赖；</p><p><strong>pom.xml(user-comsumer)</strong></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>Feign</code>客户端：</p><p><strong>UserClient.java</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.consumer.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.consumer.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/30 21:36</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//声明当前类是一个Feign客户端，指定服务名为user-service</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//http://user-service/user/123      此地址要真实存在</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ComsumerFeignController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.consumer.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> com.nateshao.consumer.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/30 21:40</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;cf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComsumerFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userClient.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别启动**<code>userApplication.java , EurekaServiceApplication.java , ComsumerApplication.java</code>**服务</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/localhost-8080-cf-7.png"></p><h2 id="2-Feign负载均衡及熔断"><a href="#2-Feign负载均衡及熔断" class="headerlink" title="2. Feign负载均衡及熔断"></a>2. Feign负载均衡及熔断</h2><blockquote><p><strong>目标</strong>：可以配置<code>Feign</code>内置<code>ribbon</code>配置项和<code>Hystrix</code>熔断的<code>Fallback</code>配置</p></blockquote><p><strong>分析</strong>：</p><ul><li>负载均衡</li><li>服务熔断</li><li>请求压缩</li><li>日志级别</li></ul><p>都可以通过配置项在<code>Feign</code>中开启使用。</p><p><strong>小结</strong>：</p><p>在服务消费工程<code>user-consumer</code>中的配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 连接超时时长</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 数据通信超时时长</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment"># 当前服务器的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">0</span> <span class="comment"># 重试多少次服务</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span> <span class="comment"># 是否对所有的请求方式都重试</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.nateshao:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p><strong>UserController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.user.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.nateshao.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/27 23:06</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   .....</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置超时连接，然后启动，访问看看</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置超时之后，起作用了:</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E8%AE%BE%E7%BD%AE%E8%B6%85%E6%97%B6%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%B5%B7%E4%BD%9C%E7%94%A8%E4%BA%86.png"></p><ul><li><strong>指定服务降级的类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定服务降级的类</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;,fallback = UserClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br></pre></td></tr></table></figure><ul><li><strong>配置yml(user-consumer)</strong></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br></pre></td></tr></table></figure><ul><li><strong>UserClientFallback.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.consumer.client.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.consumer.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> com.nateshao.consumer.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/31 0:06</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClientFallback</span> <span class="keyword">implements</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setUserName(<span class="string">&quot;用户异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回服务降级的结果</li></ul><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E7%9A%84%E7%BB%93%E6%9E%9C.png" alt="服务降级的结果"></p><ul><li>配置<strong>yml(user-consumer)</strong></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.nateshao:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><ul><li><strong>FeignConfig.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.consumer.feigin;</span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/31 0:30</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 记录所有请求和响应的明细</span></span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<strong>UserClient.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明当前类是一个Feign客户端，指定服务名为user-service</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;,fallback = UserClientFallback.class,configuration = FeignConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>请求访问结果</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%96%B0%E6%B3%BD%E8%A5%BF%E5%B7%9E.png" alt="新泽西州"></p><p>控制台输出：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%97%A5%E5%BF%97.png" alt="日志"></p><p>在<code>feign</code>日志级别的配置控制台输出的内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-08-31 00:41:52.873 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] ---&gt; GET http://user-service/user/4 HTTP/1.1</span><br><span class="line">2020-08-31 00:41:52.873 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] Accept-Encoding: deflate</span><br><span class="line">2020-08-31 00:41:52.874 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] Accept-Encoding: gzip</span><br><span class="line">2020-08-31 00:41:52.874 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] ---&gt; END HTTP (0-byte body)</span><br><span class="line">2020-08-31 00:41:52.882 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] &lt;--- HTTP/1.1 200 (7ms)</span><br><span class="line">2020-08-31 00:41:52.882 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] content-type: application/json;charset=UTF-8</span><br><span class="line">2020-08-31 00:41:52.882 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] date: Sun, 30 Aug 2020 16:41:52 GMT</span><br><span class="line">2020-08-31 00:41:52.882 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] transfer-encoding: chunked</span><br><span class="line">2020-08-31 00:41:52.882 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] </span><br><span class="line">2020-08-31 00:41:52.882 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] &#123;&quot;id&quot;:4,&quot;userName&quot;:&quot;zhangliu&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;name&quot;:&quot;张六&quot;,&quot;age&quot;:20,&quot;sex&quot;:1,&quot;birthday&quot;:&quot;1996-08-31T16:00:00.000+0000&quot;,&quot;created&quot;:&quot;2014-09-19T08:56:04.000+0000&quot;,&quot;updated&quot;:&quot;2014-09-19T08:56:04.000+0000&quot;,&quot;note&quot;:&quot;张六同学在理工学Java&quot;&#125;</span><br><span class="line">2020-08-31 00:41:52.882 DEBUG 8028 --- [-user-service-3] com.nateshao.consumer.client.UserClient  : [UserClient#queryById] &lt;--- END HTTP (245-byte body)</span><br></pre></td></tr></table></figure><h2 id="3-SpringCloud-Gateway网关简介"><a href="#3-SpringCloud-Gateway网关简介" class="headerlink" title="3. SpringCloud Gateway网关简介"></a>3. SpringCloud Gateway网关简介</h2><ul><li><strong><code>Spring Cloud Gateway</code>网关的作用</strong></li></ul><blockquote><p><code>Spring Cloud Gateway</code>的核心就是一系列的过滤器，可以将客户端的请求转发到不同的微服务。主要作用：<strong>过滤</strong>和<strong>路由</strong>。</p></blockquote><h2 id="4-Spring-Cloud-Gateway入门"><a href="#4-Spring-Cloud-Gateway入门" class="headerlink" title="4. Spring Cloud Gateway入门"></a>4. Spring Cloud Gateway入门</h2><blockquote><p>搭建网关服务工程测试网关服务作用</p></blockquote><p><strong>分析</strong>：</p><p>需求：通过网关系统<code>user-gateway</code>将包含有 <code>/user</code> 的请求 路由到 <a href="http://127.0.0.1:9091/user/%E7%94%A8%E6%88%B7id">http://127.0.0.1:9091/user/用户id</a> </p><p>实现步骤：</p><ol><li><p>创建工程；</p></li><li><p>添加启动器依赖；</p></li><li><p>编写启动引导类和配置文件；</p></li><li><p>修改配置文件，设置路由信息；</p></li><li><p>启动测试</p><p>路由指向 <a href="http://127.0.0.1:10010/user/8">http://127.0.0.1:10010/user/8</a> –&gt; <a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a></p></li></ol><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/10010.png" alt="效果图"></p><ul><li>启动器依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件<strong>application.yml（user-gateway）</strong></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 路由id，可以任意</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service-route</span></span><br><span class="line">          <span class="comment"># 代理的服务地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://127.0.0.1:9091</span></span><br><span class="line">          <span class="comment"># 路由断言： 可以匹配映射路径</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="5-面向服务的路由"><a href="#5-面向服务的路由" class="headerlink" title="5. 面向服务的路由"></a>5. 面向服务的路由</h2><ul><li>使用在<code>eureka</code>注册的服务作为路由地址</li></ul><blockquote><p>如果将路由服务地址写死明显是不合理的；在<code>Spring Cloud Gateway</code>中可以通过配置动态路由解决。</p></blockquote><ul><li><p>面向服务的路由；只需要在配置文件中指定路由路径类似： <code>lb://user-service</code>  —然后重新启动即可</p><p>再次访问也没问题。</p></li></ul><blockquote><p>lb 之后编写的服务名必须要在eureka中注册才能使用</p></blockquote><h2 id="6-路由前缀处理"><a href="#6-路由前缀处理" class="headerlink" title="6. 路由前缀处理"></a>6. 路由前缀处理</h2><blockquote><p>可以对请求到网关服务的地址添加或去除前缀</p></blockquote><p><strong>分析</strong>：</p><p>提供服务的地址：<a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a></p><ul><li>添加前缀：对请求地址添加前缀路径之后再作为代理的服务地址；</li></ul><p><a href="http://127.0.0.1:10010/8">http://127.0.0.1:10010/8</a> –&gt; <a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a> 添加前缀路径/user</p><ul><li>去除前缀：将请求地址中路径去除一些前缀路径之后再作为代理的服务地址；</li></ul><p><a href="http://127.0.0.1:10010/api/user/8">http://127.0.0.1:10010/api/user/8</a> –&gt; <a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a> 去除前缀路径/api</p><p>总结：</p><blockquote><p>客户端的请求地址与微服务的服务地址如果不一致的时候，可以通过配置路径过滤器实现路径前缀的添加和去除。</p></blockquote><h2 id="7-过滤器简介"><a href="#7-过滤器简介" class="headerlink" title="7. 过滤器简介"></a>7. 过滤器简介</h2><blockquote><p><code>Gateway</code>默认过滤器的用法和过滤器类型</p></blockquote><p><strong>小结</strong>：</p><ul><li>用法：在配置文件中指定要使用的过滤器名称；</li><li>类型：局部、全局；</li><li>使用场景：<strong>请求鉴权、异常处理、记录调用时长等。</strong></li></ul><h2 id="8-自定义局部过滤器"><a href="#8-自定义局部过滤器" class="headerlink" title="8. 自定义局部过滤器"></a>8. 自定义局部过滤器</h2><blockquote><p>按照默认过滤器编写并配置一个自定义局部过滤器，该过滤器可以通过配置文件中的参数名称获取请求的参数值</p></blockquote><p><strong>分析</strong>：</p><p>需求：在过滤器（<code>MyParamGatewayFilterFactory</code>）中将<a href="http://localhost:10010/api/user/8?name=itcast%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0**name**%E7%9A%84%E5%80%BC%E8%8E%B7%E5%8F%96%E5%88%B0%E5%B9%B6%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%9B%E5%B9%B6%E4%B8%94%E5%8F%82%E6%95%B0%E5%90%8D%E6%98%AF%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%AF%8F%E6%AC%A1%E9%83%BD%E6%98%AF**name**%EF%BC%9B%E9%9C%80%E8%A6%81%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E5%88%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%90%8D%E3%80%82">http://localhost:10010/api/user/8?name=itcast中的参数**name**的值获取到并输出到控制台；并且参数名是可变的，也就是不一定每次都是**name**；需要可以通过配置过滤器的时候做到配置参数名。</a></p><p>实现步骤：</p><ol><li>配置过滤器；</li><li>编写过滤器；</li><li>测试</li></ol><p><strong>小结</strong>：</p><ul><li>配置：与其他过滤器的配置一致。</li><li>实现过滤器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/9/1 23:09</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyParamGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">MyParamGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PARAM_NAME = <span class="string">&quot;param&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyParamGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(PARAM_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="comment">// http://localhost:10010/api/user/8?name=itcast   config.param ==&gt; name</span></span><br><span class="line">            <span class="comment">//获取请求参数中param对应的参数名 的参数值</span></span><br><span class="line">            ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">            <span class="keyword">if</span>(request.getQueryParams().containsKey(config.param))&#123;</span><br><span class="line">                request.getQueryParams().get(config.param).</span><br><span class="line">                        forEach(value -&gt; System.out.printf(<span class="string">&quot;------------局部过滤器--------%s = %s------&quot;</span>, config.param, value));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">        <span class="comment">// 对应在配置过滤器的时候指定的参数名</span></span><br><span class="line">        <span class="keyword">private</span> String param;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> param;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.param = param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:10010/api/user/8?name=nateshao">http://localhost:10010/api/user/8?name=nateshao</a></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%80%E9%83%A8%E5%8F%82%E6%95%B0.png" alt="自定义局部参数"></p><h2 id="9-自定义全局过滤器"><a href="#9-自定义全局过滤器" class="headerlink" title="9. 自定义全局过滤器"></a>9. 自定义全局过滤器</h2><blockquote><p>定义一个全局过滤器检查请求中是否携带有<strong>token</strong>参数</p></blockquote><p><strong>分析</strong>：</p><p>需求：编写全局过滤器，在过滤器中检查请求地址是否携带<strong>token</strong>参数。如果<strong>token</strong>参数的值存在则放行；如果<strong>token</strong>的参数值为空或者不存在则设置返回的状态码为：未授权也不再执行下去。</p><p>实现步骤：</p><ol><li>编写全局过滤器；</li><li>测试</li></ol><p><strong>小结</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/9/1 23:06</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------全局过滤器MyGlobalFilter------------------&quot;</span>);</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(token))&#123;</span><br><span class="line">            <span class="comment">//设置响应状态码为未授权</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//值越小越先执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E8%AE%BF%E9%97%AE%E6%B2%A1%E6%95%88%E6%9E%9C.png" alt="访问没效果"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E5%8F%82%E6%95%B0%E6%90%BA%E5%B8%A6token.png" alt="参数携带token"></p><h2 id="10-Gateway其它配置说明"><a href="#10-Gateway其它配置说明" class="headerlink" title="10. Gateway其它配置说明"></a>10. Gateway其它配置说明</h2><blockquote><p><strong>目标</strong>：<code>Gateway</code>网关的负载均衡和熔断参数配置</p></blockquote><p><strong>小结</strong>：</p><p>网关服务配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 路由id，可以任意</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service-route</span></span><br><span class="line">          <span class="comment"># 代理的服务地址</span></span><br><span class="line">          <span class="comment">#uri: http://127.0.0.1:9091</span></span><br><span class="line">          <span class="comment"># lb表示从eureka中获取具体服务</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="comment"># 路由断言： 可以匹配映射路径</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="comment">#- Path=/user/**</span></span><br><span class="line">            <span class="comment">#- Path=/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># 添加请求路径的前缀</span></span><br><span class="line">            <span class="comment">#- PrefixPath=/user</span></span><br><span class="line">            <span class="comment">#1表示过滤1个路径，2表示两个路径，以此类推</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MyParam=name</span></span><br><span class="line">      <span class="comment"># 默认过滤器，对所有路由都生效</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Foo,</span> <span class="string">Bar</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=abc-myname,heima</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="comment">#allowedOrigins: * # 这种写法或者下面的都可以，*表示全部</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://docs.spring.io&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Gateway</code>网关一般直接给终端请求使用；<code>Feign</code>一般用在微服务之间调用。</p></blockquote><h2 id="11-Spring-Cloud-Config分布式配置中心简介"><a href="#11-Spring-Cloud-Config分布式配置中心简介" class="headerlink" title="11. Spring Cloud Config分布式配置中心简介"></a>11. Spring Cloud Config分布式配置中心简介</h2><p><strong>目标</strong>：分布式配置中心的作用</p><p><strong>小结</strong>：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1560919656472.png"></p><p><code>spring cloud config</code>作用：可以通过修改在git仓库中的配置文件实现其它所有微服务的配置文件的修改。</p><h2 id="12-搭建配置中心微服务"><a href="#12-搭建配置中心微服务" class="headerlink" title="12. 搭建配置中心微服务"></a>12. 搭建配置中心微服务</h2><blockquote><p>创建码云的远程公开<code>git</code>仓库，搭建配置中心微服务<code>config-server</code></p></blockquote><p><strong>分析</strong>：</p><ul><li>创建<code>git</code>仓库：在码云上创建仓库</li><li>搭建配置中心<code>config-server</code>：使用<code>spring boot</code>方式搭建和配置</li></ul><p><strong>小结</strong>：</p><ul><li>配置中心依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置中心的配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/nateshao/nateshao-cloud-config.git</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%88%90%E5%8A%9F.png" alt="成功"></p><blockquote><p>在gitee中修改了配置文件会在配置中心服务及时更新。</p></blockquote><h2 id="13-获取配置中心配置"><a href="#13-获取配置中心配置" class="headerlink" title="13. 获取配置中心配置"></a>13. 获取配置中心配置</h2><p><strong>目标</strong>：改造用户微服务<code>user-service</code>，配置文件信息不再由微服务项目提供，而是从配置中心获取</p><p><strong>分析</strong>：</p><p>需求：将服务提供工程<code>user-service</code>的<code>application.yml</code>配置文件删除，修改为从配置中心<code>config-server</code>中获取。</p><p>实现步骤：</p><ol><li>添加启动器依赖；</li><li>修改配置文件；</li><li>启动测试</li></ol><p><strong>小结</strong>：</p><p>将原来的<code>application.yml</code>删除；然后添加<code>bootstrap.yml</code>配置文件，该文件也是spring boot的默认配置文件，其内容经常配置一些项目中固定的配置项。如果是项目经常变动的应该配置到<code>application.yml</code>中，现在使用了配置中心则应该配置到<code>git</code>仓库中对于的配置文件。</p><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件<code>bootstrap.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 要与仓库中的配置文件的application保持一致</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="comment"># 要与仓库中的配置文件的profile保持一致</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment"># 要与仓库中的配置文件所属的版本（分支）一样</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 使用配置中心</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 配置中心服务名</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E4%BE%9D%E7%84%B6%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE.png" alt="依然可以访问"></p><h2 id="14-Spring-Cloud-Bus简介"><a href="#14-Spring-Cloud-Bus简介" class="headerlink" title="14. Spring Cloud Bus简介"></a>14. Spring Cloud Bus简介</h2><blockquote><p><code>Spring Cloud Bus</code>作用：将<code>git</code>仓库的配置文件更新，在不重启系统的情况下实现及时同步到各个微服务。</p></blockquote><h2 id="15-Spring-Cloud-Bus应用"><a href="#15-Spring-Cloud-Bus应用" class="headerlink" title="15. Spring Cloud Bus应用"></a>15. Spring Cloud Bus应用</h2><blockquote><p>启动<code>RabbitMQ</code>通过修改码云中的配置文件后发送<code>Post</code>请求实现及时更新用户微服务中的配置项</p></blockquote><p><strong>分析</strong>：</p><p>需求：在码云的git仓库中修改<code>user-dev.yml</code>配置文件，实现不重启<code>user-service</code>的情况下可以及时更新配置文件。</p><p>实现步骤：</p><ol><li>启动<code>RabbitMQ</code>；</li><li>修改配置中心<code>config-server</code>；</li><li>修改服务提供工程<code>user-service</code>；</li><li>测试</li></ol><p><strong>小结</strong>：</p><ul><li><code>config-server</code>的依赖添加内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>config-server</code>的配置文件添加内容</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/goheima/heima-config.git</span></span><br><span class="line">  <span class="comment"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment"># 暴露触发消息总线的地址</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure><ul><li><code>user-service</code>的依赖添加内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>user-service</code>的配置文件添加内容</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>UserController</code>的修改</li></ul><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1561003475491.png"> </p><h2 id="16-Spring-Cloud-体系技术综合应用说明"><a href="#16-Spring-Cloud-体系技术综合应用说明" class="headerlink" title="16. Spring Cloud 体系技术综合应用说明"></a>16. Spring Cloud 体系技术综合应用说明</h2><blockquote><p>了解<code>Spring Cloud</code>中的<code>Eureka、GateWay、Config、Bus、Feign</code>等技术的综合应用</p></blockquote><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1561004983897(1).png"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千羽Java开发的实习经验分享</title>
      <link href="/2020/09/07/%E5%8D%83%E7%BE%BDJava%E5%BC%80%E5%8F%91%E7%9A%84%E5%AE%9E%E4%B9%A0%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2020/09/07/%E5%8D%83%E7%BE%BDJava%E5%BC%80%E5%8F%91%E7%9A%84%E5%AE%9E%E4%B9%A0%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/yqf0lIe-X8-pCP3Zh4Z4Dg">powermock</a></p><h2 id="说起实习"><a href="#说起实习" class="headerlink" title="说起实习"></a>说起实习</h2><p>先附上一张图，还有一些是额外的，就没添加进去了</p><a id="more"></a><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/11.png"></p><h2 id="开始阶段"><a href="#开始阶段" class="headerlink" title="开始阶段"></a>开始阶段</h2><p>说起实习，感慨有很多很多，我从大一就开始关注一些外面的工作岗位的要求（大一还过来深圳踩点了哈哈）。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/Java1.png" alt="Java开发"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/Java2.png" alt="Java开发"></p><p>大一时，一边在学校上课，一边往自己的兴趣去学习，相对于学校教的课程，其实教的杂，教的广，教的浅。</p><p>当选定Java方向之后，就一直往这方面去走，跟着自己的兴趣去学，从<code>Java基础，Javaweb,Spring,SpringMvc,MyBatis,MyBatis Plus,JPA,SpringBoot,SpringCloud,MySQL,前端HTML，Css,Js,JQuery,Vue,Element UI</code>…..等等。其实也悄悄是跟着黑马程序员的Java方向走，哈哈，有需要的小伙伴，可以在我的公众号，回复“<strong>黑马</strong>”就可以了</p><h2 id="准备面试"><a href="#准备面试" class="headerlink" title="准备面试"></a>准备面试</h2><p>而今年因为疫情的影响，就开始筹备面试了，也是准备了两个月，刷题，面经…。之后就开始投简历了，这里有一点，很多时候，投出去的简历都石沉大海了，但是我们也不要气馁，对吧。所以得静下心来，慢慢找。所以找工作真的不容易。这一次有这样一次实习的机会，我非常的珍惜！</p><h2 id="上班"><a href="#上班" class="headerlink" title="上班"></a>上班</h2><p>当面试通过之后，和HR达成协议之后，我就提前来深圳了，先是租房，其实来深圳也不容易，租房确实贵，吃的也不便宜，租房好了，就开始自己的上班之旅了。但还是很开心。不过后面租的这个房子也有些问题，还好只是短租，不过明年毕业租房就不会租这种房子了，也算是提前涨了一点经验。</p><h2 id="实习的体会"><a href="#实习的体会" class="headerlink" title="实习的体会"></a>实习的体会</h2><blockquote><p>短短的两个月实习，我成长了很多</p></blockquote><ul><li><p>以前写的代码没有规范，包括代码的命名方式，</p></li><li><p>考虑事情的思维方式，可能对于学生的我感觉解决的办法就一个，感觉这样实施了，那肯定是没问题，结果问题多多，哈哈。但是在工作了7，8年的同事大佬来说，解决问题的办法有好多种。</p></li><li><p>以前在学校接触的东西（技术），没有涉及的太深入，还存在我对有的技术是存在误解的</p></li><li><p>说实话，虽然我的编程能力没有突飞猛进过</p></li></ul><p>转折点就是这次实习了，ATOM是我实习的第一家企业，在公司的这两个月里，我认识了很多前辈，也结交了很多非常优秀的同一辈人，本科985，现在还是研究生..感觉自愧不如啊。如今，我就快要回学校去度过我人生中最后一段校园时光了，想着在这里记录下来，作为对自己实习经验的一个小总结，也希望能对大家有所帮助哦。</p><h2 id="两个月学了啥"><a href="#两个月学了啥" class="headerlink" title="两个月学了啥"></a>两个月学了啥</h2><h2 id="1-PowerMock"><a href="#1-PowerMock" class="headerlink" title="1. PowerMock"></a>1. PowerMock</h2><blockquote><p>PowerMock是一个单元测试模拟的框架，用于解决测试问题。</p></blockquote><p>举个例子，你在使用<code>Junit</code>进行单元测试时，并不想让测试数据进入数据库，怎么办？这个时候就可以使用<code>PowerMock</code>，拦截数据库操作，并模拟返回参数。</p><h2 id="2-Postman"><a href="#2-Postman" class="headerlink" title="2. Postman"></a>2. Postman</h2><blockquote><p><strong>Postman</strong> 是一个 Chrome 扩展，提供功能强大的 Web API &amp; HTTP 请求调试。它能够发送任何类型的<strong>HTTP 请求</strong> (GET, HEAD, POST, PUT..)，附带任何数量的参数+ headers。</p></blockquote><p>因为公司的项目是前后端分离项目，后端拿到的数据返回json数据给前端解析。但是我的项目没有前端页面啊，怎么办呢，这时候Postman就出场了</p><p><img src="https://upload-images.jianshu.io/upload_images/15646290-0af3552a23848875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp"></p><h2 id="3-Kafka消息队列"><a href="#3-Kafka消息队列" class="headerlink" title="3. Kafka消息队列"></a>3. Kafka消息队列</h2><h3 id="什么是Kafka？"><a href="#什么是Kafka？" class="headerlink" title="什么是Kafka？"></a>什么是Kafka？</h3><blockquote><p>在流式计算中，<code>Kafka</code>一般用来缓存数据，<code>Storm</code>通过消费Kafka的数据进行计算。</p></blockquote><ol><li><p><code>Apache Kafka</code>是一个开源消息系统，由<code>Scala</code>写成。是由<strong>Apache</strong>软件基金会开发的一个开源消息系统项目。</p></li><li><p><code>Kafka</code>最初是由<code>LinkedIn</code>公司开发，并于2011年初开源。2012年10月从<code>Apache Incubator</code>毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。</p></li><li><p>Kafka是一个分布式消息队列。<code>Kafka</code>对消息保存时根据<code>Topic</code>进行归类，发送消息者称为<code>Producer</code>，消息接受者称为<code>Consumer</code>，此外<code>kafka</code>集群有多个<code>kafka</code>实例组成，每个实例(<code>server</code>)称为<code>broker</code>。</p></li><li><p>无论是<code>kafka</code>集群，还是<code>consumer</code>都依赖于<code>zookeeper</code>集群保存一些meta信息，来保证系统可用性。</p><p>这个已经记录在我的<code>GitHub</code>：<a href="https://github.com/nateshao/Queue/blob/master/Kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md">https://github.com/nateshao/Queue/blob/master/Kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md</a></p></li></ol><h2 id="4-性能测试"><a href="#4-性能测试" class="headerlink" title="4. 性能测试"></a>4. 性能测试</h2><p>性能测试这个也就那样吧，主要是测试项目的性能的情况，做出分析，如何解决</p><h2 id="5-序列化与反序列化（Msgpack）"><a href="#5-序列化与反序列化（Msgpack）" class="headerlink" title="5. 序列化与反序列化（Msgpack）"></a>5. 序列化与反序列化（Msgpack）</h2><blockquote><p>定义：<strong>Java序列化</strong>就是指把Java对象转换为字节序列的过程</p><p><strong>Java反序列化</strong>就是指把字节序列恢复为<code>Java</code>对象的过程。</p></blockquote><p><code>Msgpack</code>这个我就在写读写一致，然后测试的时候就使用过。</p><p>详细的话，可以看这篇文章：<a href="https://blog.csdn.net/tree_ifconfig/article/details/82766587">https://blog.csdn.net/tree_ifconfig/article/details/82766587</a></p><h2 id="6-GenerateAllSette"><a href="#6-GenerateAllSette" class="headerlink" title="6. GenerateAllSette"></a>6. GenerateAllSette</h2><p>这个东西主要是一个插件，为什么说这个好用，主要是一个类有很多字段，当你开发时，不可能一个一个字段去写，会耗费大量时间，还有出现错误。</p><p><code>GenerateAllSette</code>减少了很多麻烦，Alt + Enter ，然后修改就完事了</p><h2 id="7-honest-profiler火焰图"><a href="#7-honest-profiler火焰图" class="headerlink" title="7. honest-profiler火焰图"></a>7. honest-profiler火焰图</h2><p>火焰图也是工作上常用的Java性能分析软件</p><p>详情可以看我这篇。</p><h2 id="8-jmh基准测试"><a href="#8-jmh基准测试" class="headerlink" title="8. jmh基准测试"></a>8. jmh基准测试</h2><p><code>jmh</code> 这个也是leader要求掌握的，不过我只是做了简单的Demo试了一下效果，后面我就没负责这一块了</p><p>简单入门，可以看一下这篇文章<a href="https://www.jianshu.com/p/0da2988b9846">https://www.jianshu.com/p/0da2988b9846</a></p><h2 id="9-jvisualvm"><a href="#9-jvisualvm" class="headerlink" title="9.  jvisualvm"></a>9.  jvisualvm</h2><blockquote><p><code>jvisualvm</code>是jdk自带的分析工具。可分析JDK1.6及其以上版本的<strong>JVM运行时</strong>的<strong>JVM参数</strong>、<strong>系统参数</strong>、<strong>堆栈</strong>、<strong>CPU使用</strong>等信息。可分析本地应用及远程应用。</p></blockquote><p>这个挺方便的，而且功能也很强大，这个当时也测了，忘记记录文档了，下不为例。</p><p>不过，使用的话可以看一下这篇文章：<a href="https://www.cnblogs.com/kongzhongqijing/articles/3625340.html">https://www.cnblogs.com/kongzhongqijing/articles/3625340.html</a></p><h2 id="10-测试用例"><a href="#10-测试用例" class="headerlink" title="10. 测试用例"></a>10. 测试用例</h2><blockquote><p><em>测试用例</em>(<code>Test Case</code>)是指对一项特定的软件产品进行测试任务的描述，体现测试方案、方法、技术和策略。其内容包括测试目标、测试环境、输入数据、测试步骤、预期结果、测试脚本等，最终形成文档</p></blockquote><p>这个没得说，整个实习阶段，基本上都是在写整个,测试逻辑和覆盖率，之后就进行性能分析，性能测试。</p><h2 id="11-Git-Flow"><a href="#11-Git-Flow" class="headerlink" title="11. Git Flow"></a>11. Git Flow</h2><p>这个是对<code>git</code>使用的一套规范，相似于restful风格</p><p>这个了解一下就好<a href="https://www.jianshu.com/p/41910dc6ef29">https://www.jianshu.com/p/41910dc6ef29</a></p><h2 id="12-RestFul风格"><a href="#12-RestFul风格" class="headerlink" title="12. RestFul风格"></a>12. RestFul风格</h2><blockquote><p> <code>RestFul</code>风格一种软件架构风格、设计风格，而<strong>不是</strong>标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p></blockquote><p>可以看一下我写的这篇</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>不过总体上工作还是非常满意的，主要是工作的气氛非常好，leader也很nice。</li><li>大多数时间也不是特别忙，没有传说中的996/997，把每一天的任务做到最好就可以了。</li><li>刚开始就想把代码理解透还是挺有难度的，因为这个要设计到业务逻辑。所以业务逻辑得会。</li><li>两个月呆的时间特别棒，还有一点就是，<strong>月半了</strong>。</li><li>深圳这边，没得说，吃的住的都不便宜。</li><li>大多时候是闲的：很多时候接到的任务都是基于原有的基础上添加一些功能，改<code>Bug</code>之类的，也做过小的模块开发。总体来看：<strong>技术难度不大，主要是对业务的理解</strong>。</li></ul><p><img src="https://img2.doubanio.com/view/subject/l/public/s4141593.jpg" alt="高性能MySQL"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java性能分析之火焰图</title>
      <link href="/2020/09/03/Java%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B9%8B%E7%81%AB%E7%84%B0%E5%9B%BE/"/>
      <url>/2020/09/03/Java%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B9%8B%E7%81%AB%E7%84%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="火焰图来了"><a href="#火焰图来了" class="headerlink" title="火焰图来了"></a>火焰图来了</h2><a id="more"></a><blockquote><p>Java性能分析火焰图是什么？</p></blockquote><ol><li><p><code>java</code>性能分析火焰图的所做的事情就是能够分析出<code>java</code>程序运行期间存在的性能问题，因为某段代码拖慢整个程序执行是不允许的，因此靠火焰图的绘制和分析就可以找出类似的“问题代码段”。</p></li><li><p>那么这个图是怎么来的呢？首先跟大多数监控系统一样，数据采集+前端绘图，这个图也是根据某些数据绘制而成的，绘图工具本篇文章采用<a href="https://github.com/brendangregg/FlameGraph">FlameGraph</a>，而负责收集这些数据的工具，这里采用<code>async-profiler</code>，这个工具会在程序运行期间向<code>jvm</code>发送信号采集其运行期数据（简单来说就是通过该工具可以找出程序中占用CPU资源时间最长的代码块，这里<code>async-profiler</code>的实现使用了<code>jvmti</code>，然后生成相应的数据格式文件，而<a href="https://github.com/brendangregg/FlameGraph">FlameGraph</a>则负责读取和解析数据文件生成对应的火焰图（svg文件）。</p></li></ol><h2 id="从GitHub上clone下来async-profiler"><a href="#从GitHub上clone下来async-profiler" class="headerlink" title="从GitHub上clone下来async-profiler"></a>从GitHub上clone下来async-profiler</h2><p>git clone <a href="https://github.com/jvm-profiling-tools/async-profiler">https://github.com/jvm-profiling-tools/async-profiler</a> </p><p>这里使用mac演示</p><p>可以新建一个工程，编写<code>Target.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;   </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">            ++value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">            ++value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : <span class="keyword">new</span> File(<span class="string">&quot;/tmp&quot;</span>).list()) &#123;</span><br><span class="line">                value += s.hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            method1();</span><br><span class="line">            method2();</span><br><span class="line">            method3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开终端：输入<code>jps</code></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/77018ea0fd6b2f2baedb98cef751aaf.png"></p><p>输入命令，回车</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/920f568fb9463c0d2d5be66271426ed.png"></p><p>生成svg</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/556f7e7580dea24ef1de452664f6a4f.png"></p><p>选择谷歌浏览器打开</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/4c6aea67ca9d0b4c685f927f3130c6d.png" alt="生成火焰图"></p><p>接下来就可以慢慢进行性能分析了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ-02-RabbitMQ集群搭建</title>
      <link href="/2020/08/23/RabbitMQ-02-RabbitMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/08/23/RabbitMQ-02-RabbitMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="3-RabbitMQ集群搭建"><a href="#3-RabbitMQ集群搭建" class="headerlink" title="3.RabbitMQ集群搭建"></a>3.RabbitMQ集群搭建</h1><a id="more"></a><p>摘要：实际生产应用中都会采用消息队列的集群方案，如果选择RabbitMQ那么有必要了解下它的集群方案原理</p><p>一般来说，如果只是为了学习RabbitMQ或者验证业务工程的正确性那么在本地环境或者测试环境上使用其单实例部署就可以了，但是出于MQ中间件本身的可靠性、并发性、吞吐量和消息堆积能力等问题的考虑，在生产环境上一般都会考虑使用RabbitMQ的集群方案。</p><h3 id="3-1-集群方案的原理"><a href="#3-1-集群方案的原理" class="headerlink" title="3.1 集群方案的原理"></a>3.1 集群方案的原理</h3><p>RabbitMQ这款消息队列中间件产品本身是基于Erlang编写，Erlang语言天生具备分布式特性（通过同步Erlang集群各节点的magic cookie来实现）。因此，RabbitMQ天然支持Clustering。这使得RabbitMQ本身不需要像ActiveMQ、Kafka那样通过ZooKeeper分别来实现HA方案和保存集群的元数据。集群是保证可靠性的一种方式，同时可以通过水平扩展以达到增加消息吞吐量能力的目的。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1566073768274.png" alt="1565245219265"></p><h3 id="3-2-单机多实例部署"><a href="#3-2-单机多实例部署" class="headerlink" title="3.2 单机多实例部署"></a>3.2 单机多实例部署</h3><p>由于某些因素的限制，有时候你不得不在一台机器上去搭建一个rabbitmq集群，这个有点类似zookeeper的单机版。真实生成环境还是要配成多机集群的。有关怎么配置多机集群的可以参考其他的资料，这里主要论述如何在单机中配置多个rabbitmq实例。</p><p>主要参考官方文档：<a href="https://www.rabbitmq.com/clustering.html">https://www.rabbitmq.com/clustering.html</a></p><p>首先确保RabbitMQ运行没有问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl status</span><br><span class="line">Status of node rabbit@super ...</span><br><span class="line">[&#123;pid,10232&#125;,</span><br><span class="line"> &#123;running_applications,</span><br><span class="line">     [&#123;rabbitmq_management,&quot;RabbitMQ Management Console&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;rabbitmq_web_dispatch,&quot;RabbitMQ Web Dispatcher&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;webmachine,&quot;webmachine&quot;,&quot;1.10.3&quot;&#125;,</span><br><span class="line">      &#123;mochiweb,&quot;MochiMedia Web Server&quot;,&quot;2.13.1&quot;&#125;,</span><br><span class="line">      &#123;rabbitmq_management_agent,&quot;RabbitMQ Management Agent&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;rabbit,&quot;RabbitMQ&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;os_mon,&quot;CPO  CXC 138 46&quot;,&quot;2.4&quot;&#125;,</span><br><span class="line">      &#123;syntax_tools,&quot;Syntax tools&quot;,&quot;1.7&quot;&#125;,</span><br><span class="line">      &#123;inets,&quot;INETS  CXC 138 49&quot;,&quot;6.2&quot;&#125;,</span><br><span class="line">      &#123;amqp_client,&quot;RabbitMQ AMQP Client&quot;,&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;rabbit_common,[],&quot;3.6.5&quot;&#125;,</span><br><span class="line">      &#123;ssl,&quot;Erlang/OTP SSL application&quot;,&quot;7.3&quot;&#125;,</span><br><span class="line">      &#123;public_key,&quot;Public key infrastructure&quot;,&quot;1.1.1&quot;&#125;,</span><br><span class="line">      &#123;asn1,&quot;The Erlang ASN1 compiler version 4.0.2&quot;,&quot;4.0.2&quot;&#125;,</span><br><span class="line">      &#123;ranch,&quot;Socket acceptor pool for TCP protocols.&quot;,&quot;1.2.1&quot;&#125;,</span><br><span class="line">      &#123;mnesia,&quot;MNESIA  CXC 138 12&quot;,&quot;4.13.3&quot;&#125;,</span><br><span class="line">      &#123;compiler,&quot;ERTS  CXC 138 10&quot;,&quot;6.0.3&quot;&#125;,</span><br><span class="line">      &#123;crypto,&quot;CRYPTO&quot;,&quot;3.6.3&quot;&#125;,</span><br><span class="line">      &#123;xmerl,&quot;XML parser&quot;,&quot;1.3.10&quot;&#125;,</span><br><span class="line">      &#123;sasl,&quot;SASL  CXC 138 11&quot;,&quot;2.7&quot;&#125;,</span><br><span class="line">      &#123;stdlib,&quot;ERTS  CXC 138 10&quot;,&quot;2.8&quot;&#125;,</span><br><span class="line">      &#123;kernel,&quot;ERTS  CXC 138 10&quot;,&quot;4.2&quot;&#125;]&#125;,</span><br><span class="line"> &#123;os,&#123;unix,linux&#125;&#125;,</span><br><span class="line"> &#123;erlang_version,</span><br><span class="line">     &quot;Erlang/OTP 18 [erts-7.3] [source] [64-bit] [async-threads:64] [hipe] [kernel-poll:true]\n&quot;&#125;,</span><br><span class="line"> &#123;memory,</span><br><span class="line">     [&#123;total,56066752&#125;,</span><br><span class="line">      &#123;connection_readers,0&#125;,</span><br><span class="line">      &#123;connection_writers,0&#125;,</span><br><span class="line">      &#123;connection_channels,0&#125;,</span><br><span class="line">      &#123;connection_other,2680&#125;,</span><br><span class="line">      &#123;queue_procs,268248&#125;,</span><br><span class="line">      &#123;queue_slave_procs,0&#125;,</span><br><span class="line">      &#123;plugins,1131936&#125;,</span><br><span class="line">      &#123;other_proc,18144280&#125;,</span><br><span class="line">      &#123;mnesia,125304&#125;,</span><br><span class="line">      &#123;mgmt_db,921312&#125;,</span><br><span class="line">      &#123;msg_index,69440&#125;,</span><br><span class="line">      &#123;other_ets,1413664&#125;,</span><br><span class="line">      &#123;binary,755736&#125;,</span><br><span class="line">      &#123;code,27824046&#125;,</span><br><span class="line">      &#123;atom,1000601&#125;,</span><br><span class="line">      &#123;other_system,4409505&#125;]&#125;,</span><br><span class="line"> &#123;alarms,[]&#125;,</span><br><span class="line"> &#123;listeners,[&#123;clustering,25672,&quot;::&quot;&#125;,&#123;amqp,5672,&quot;::&quot;&#125;]&#125;,</span><br><span class="line"> &#123;vm_memory_high_watermark,0.4&#125;,</span><br><span class="line"> &#123;vm_memory_limit,411294105&#125;,</span><br><span class="line"> &#123;disk_free_limit,50000000&#125;,</span><br><span class="line"> &#123;disk_free,13270233088&#125;,</span><br><span class="line"> &#123;file_descriptors,</span><br><span class="line">     [&#123;total_limit,924&#125;,&#123;total_used,6&#125;,&#123;sockets_limit,829&#125;,&#123;sockets_used,0&#125;]&#125;,</span><br><span class="line"> &#123;processes,[&#123;limit,1048576&#125;,&#123;used,262&#125;]&#125;,</span><br><span class="line"> &#123;run_queue,0&#125;,</span><br><span class="line"> &#123;uptime,43651&#125;,</span><br><span class="line"> &#123;kernel,&#123;net_ticktime,60&#125;&#125;]</span><br></pre></td></tr></table></figure><p>停止rabbitmq服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@super sbin]# service rabbitmq-server stop</span><br><span class="line">Stopping rabbitmq-server: rabbitmq-server.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动第一个节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@super sbin]# RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=rabbit1 rabbitmq-server start</span><br><span class="line"></span><br><span class="line">              RabbitMQ 3.6.5. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########  Logs: /var/log/rabbitmq/rabbit1.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#####  ##        /var/log/rabbitmq/rabbit1-sasl.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########</span></span></span><br><span class="line">              Starting broker...</span><br><span class="line"> completed with 6 plugins.</span><br></pre></td></tr></table></figure><p>启动第二个节点：</p><blockquote><p>web管理插件端口占用,所以还要指定其web插件占用的端口号。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# RABBITMQ_NODE_PORT=5674 RABBITMQ_SERVER_START_ARGS=&quot;-rabbitmq_management listener [&#123;port,15674&#125;]&quot; RABBITMQ_NODENAME=rabbit2 rabbitmq-server start</span><br><span class="line"></span><br><span class="line">              RabbitMQ 3.6.5. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########  Logs: /var/log/rabbitmq/rabbit2.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#####  ##        /var/log/rabbitmq/rabbit2-sasl.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########</span></span></span><br><span class="line">              Starting broker...</span><br><span class="line"> completed with 6 plugins.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结束命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl -n rabbit1 stop</span><br><span class="line">rabbitmqctl -n rabbit2 stop</span><br></pre></td></tr></table></figure><p>rabbit1操作作为主节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 stop_app  </span><br><span class="line">Stopping node rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 reset </span><br><span class="line">Resetting node rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 start_app</span><br><span class="line">Starting node rabbit1@super ...</span><br><span class="line">[root@super ~]# </span><br></pre></td></tr></table></figure><p>rabbit2操作为从节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 stop_app</span><br><span class="line">Stopping node rabbit2@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 reset</span><br><span class="line">Resetting node rabbit2@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 join_cluster rabbit1@&#x27;super&#x27; ###&#x27;&#x27;内是主机名换成自己的</span><br><span class="line">Clustering node rabbit2@super with rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 start_app</span><br><span class="line">Starting node rabbit2@super ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看集群状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl cluster_status -n rabbit1</span><br><span class="line">Cluster status of node rabbit1@super ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit1@super,rabbit2@super]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit2@super,rabbit1@super]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;&quot;rabbit1@super&quot;&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit2@super,[]&#125;,&#123;rabbit1@super,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><p>web监控：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1566065096459.png" alt="1566065096459"></p><h3 id="3-3-集群管理"><a href="#3-3-集群管理" class="headerlink" title="3.3 集群管理"></a>3.3 集群管理</h3><p><strong>rabbitmqctl join_cluster {cluster_node} [–ram]</strong><br>将节点加入指定集群中。在这个命令执行前需要停止RabbitMQ应用并重置节点。</p><p><strong>rabbitmqctl cluster_status</strong><br>显示集群的状态。</p><p><strong>rabbitmqctl change_cluster_node_type {disc|ram}</strong><br>修改集群节点的类型。在这个命令执行前需要停止RabbitMQ应用。</p><p><strong>rabbitmqctl forget_cluster_node [–offline]</strong><br>将节点从集群中删除，允许离线执行。</p><p><strong>rabbitmqctl update_cluster_nodes {clusternode}</strong></p><p>在集群中的节点应用启动前咨询clusternode节点的最新信息，并更新相应的集群信息。这个和join_cluster不同，它不加入集群。考虑这样一种情况，节点A和节点B都在集群中，当节点A离线了，节点C又和节点B组成了一个集群，然后节点B又离开了集群，当A醒来的时候，它会尝试联系节点B，但是这样会失败，因为节点B已经不在集群中了。</p><p><strong>rabbitmqctl cancel_sync_queue [-p vhost] {queue}</strong><br>取消队列queue同步镜像的操作。</p><p><strong>rabbitmqctl set_cluster_name {name}</strong><br>设置集群名称。集群名称在客户端连接时会通报给客户端。Federation和Shovel插件也会有用到集群名称的地方。集群名称默认是集群中第一个节点的名称，通过这个命令可以重新设置。</p><h3 id="3-4-RabbitMQ镜像集群配置"><a href="#3-4-RabbitMQ镜像集群配置" class="headerlink" title="3.4 RabbitMQ镜像集群配置"></a>3.4 RabbitMQ镜像集群配置</h3><blockquote><p>上面已经完成RabbitMQ默认集群模式，但并不保证队列的高可用性，尽管交换机、绑定这些可以复制到集群里的任何一个节点，但是队列内容不会复制。虽然该模式解决一项目组节点压力，但队列节点宕机直接导致该队列无法应用，只能等待重启，所以要想在队列节点宕机或故障也能正常应用，就要复制队列内容到集群里的每个节点，必须要创建镜像队列。</p><p>镜像队列是基于普通的集群模式的，然后再添加一些策略，所以你还是得先配置普通集群，然后才能设置镜像队列，我们就以上面的集群接着做。</p></blockquote><p><strong>设置的镜像队列可以通过开启的网页的管理端Admin-&gt;Policies，也可以通过命令。</strong></p><blockquote><p>rabbitmqctl set_policy my_ha “^” ‘{“ha-mode”:”all”}’</p></blockquote><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1566072300852.png" alt="1566072300852"></p><blockquote><ul><li>Name:策略名称</li><li>Pattern：匹配的规则，如果是匹配所有的队列，是^.</li><li>Definition:使用ha-mode模式中的all，也就是同步所有匹配的队列。问号链接帮助文档。</li></ul></blockquote><h3 id="3-5-负载均衡-HAProxy"><a href="#3-5-负载均衡-HAProxy" class="headerlink" title="3.5 负载均衡-HAProxy"></a>3.5 负载均衡-HAProxy</h3><p>HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案,包括Twitter，Reddit，StackOverflow，GitHub在内的多家知名互联网公司在使用。HAProxy实现了一种事件驱动、单一进程模型，此模型支持非常大的并发连接数。</p><h5 id="3-5-1-安装HAProxy"><a href="#3-5-1-安装HAProxy" class="headerlink" title="3.5.1  安装HAProxy"></a>3.5.1  安装HAProxy</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//下载依赖包</span><br><span class="line">yum install gcc vim wget</span><br><span class="line">//上传haproxy源码包</span><br><span class="line">//解压</span><br><span class="line">tar -zxvf haproxy-1.6.5.tar.gz -C /usr/local</span><br><span class="line">//进入目录、进行编译、安装</span><br><span class="line">cd /usr/local/haproxy-1.6.5</span><br><span class="line">make TARGET=linux31 PREFIX=/usr/local/haproxy</span><br><span class="line">make install PREFIX=/usr/local/haproxy</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">//赋权</span><br><span class="line">groupadd -r -g 149 haproxy</span><br><span class="line">useradd -g haproxy -r -s /sbin/nologin -u 149 haproxy</span><br><span class="line">//创建haproxy配置文件</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><h5 id="3-5-2-配置HAProxy"><a href="#3-5-2-配置HAProxy" class="headerlink" title="3.5.2 配置HAProxy"></a>3.5.2 配置HAProxy</h5><p>配置文件路径：/etc/haproxy/haproxy.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">logging options</span></span><br><span class="line">global</span><br><span class="line">log 127.0.0.1 local0 info</span><br><span class="line">maxconn 5120</span><br><span class="line">chroot /usr/local/haproxy</span><br><span class="line">uid 99</span><br><span class="line">gid 99</span><br><span class="line">daemon</span><br><span class="line">quiet</span><br><span class="line">nbproc 20</span><br><span class="line">pidfile /var/run/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">log global</span><br><span class="line"></span><br><span class="line">mode tcp</span><br><span class="line"></span><br><span class="line">option tcplog</span><br><span class="line">option dontlognull</span><br><span class="line">retries 3</span><br><span class="line">option redispatch</span><br><span class="line">maxconn 2000</span><br><span class="line">contimeout 5s</span><br><span class="line">   </span><br><span class="line">     clitimeout 60s</span><br><span class="line"></span><br><span class="line">     srvtimeout 15s</span><br><span class="line"><span class="meta">#</span><span class="bash">front-end IP <span class="keyword">for</span> consumers and producters</span></span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line">bind 0.0.0.0:5672</span><br><span class="line"></span><br><span class="line">mode tcp</span><br><span class="line"><span class="meta">#</span><span class="bash">balance url_param userid</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance url_param session_id check_post 64</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance hdr(User-Agent)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance hdr(host)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance hdr(Host) use_domain_only</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance rdp-cookie</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance leastconn</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance <span class="built_in">source</span> //ip</span></span><br><span class="line"></span><br><span class="line">balance roundrobin</span><br><span class="line"></span><br><span class="line">        server node1 127.0.0.1:5673 check inter 5000 rise 2 fall 2</span><br><span class="line">        server node2 127.0.0.1:5674 check inter 5000 rise 2 fall 2</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">bind 172.16.98.133:8100</span><br><span class="line">mode http</span><br><span class="line">option httplog</span><br><span class="line">stats enable</span><br><span class="line">stats uri /rabbitmq-stats</span><br><span class="line">stats refresh 5s</span><br></pre></td></tr></table></figure><p>启动HAproxy负载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">//查看haproxy进程状态</span><br><span class="line">ps -ef | grep haproxy</span><br><span class="line"></span><br><span class="line">访问如下地址对mq节点进行监控</span><br><span class="line">http://172.16.98.133:8100/rabbitmq-stats</span><br></pre></td></tr></table></figure><p>代码中访问mq集群地址，则变为访问haproxy地址:5672</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ-01-基础入门</title>
      <link href="/2020/08/23/RabbitMQ-01-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/23/RabbitMQ-01-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0. 学习目标"></a>0. 学习目标</h1><a id="more"></a><ul><li>能够说出什么是消息中间件</li><li>能够安装RabbitMQ</li><li>能够编写RabbitMQ的入门程序</li><li>能够说出RabbitMQ的5种模式特征</li><li>能够使用Spring整合RabbitMQ</li></ul><h1 id="1-消息中间件概述"><a href="#1-消息中间件概述" class="headerlink" title="1. 消息中间件概述"></a>1. 消息中间件概述</h1><h2 id="1-1-什么是消息中间件"><a href="#1-1-什么是消息中间件" class="headerlink" title="1.1. 什么是消息中间件"></a>1.1. 什么是消息中间件</h2><p>MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。</p><ul><li><p>为什么使用MQ</p><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong>。</p></li></ul><ul><li><p>开发中消息队列通常有如下应用场景：</p><p>1、任务<strong>异步</strong>处理</p><p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p><p>2、应用程序<strong>解耦合</strong></p><p>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p><p>3、<strong>削峰填谷</strong></p><p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/01.jpg"></p><p>消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/02.jpg"></p><p>但是使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000QPS，直到消费完积压的消息,这就叫做“填谷”</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/03.jpg"></p></li></ul><h2 id="1-2-AMQP-和-JMS"><a href="#1-2-AMQP-和-JMS" class="headerlink" title="1.2. AMQP 和 JMS"></a>1.2. AMQP 和 JMS</h2><p>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</p><h3 id="1-2-1-AMQP"><a href="#1-2-1-AMQP" class="headerlink" title="1.2.1. AMQP"></a>1.2.1. AMQP</h3><p>AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h3 id="1-2-2-JMS"><a href="#1-2-2-JMS" class="headerlink" title="1.2.2. JMS"></a>1.2.2. JMS</h3><p>JMS即Java消息服务（JavaMessage Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><h3 id="1-2-3-AMQP-与-JMS-区别"><a href="#1-2-3-AMQP-与-JMS-区别" class="headerlink" title="1.2.3. AMQP 与 JMS 区别"></a>1.2.3. AMQP 与 JMS 区别</h3><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模式；而AMQP的消息模式更加丰富</li></ul><h2 id="1-3-消息队列产品"><a href="#1-3-消息队列产品" class="headerlink" title="1.3. 消息队列产品"></a>1.3. 消息队列产品</h2><p>市场上常见的消息队列有如下：</p><ul><li>ActiveMQ：基于JMS</li><li>ZeroMQ：基于C语言开发</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li><li>RocketMQ：基于JMS，阿里巴巴产品</li><li>Kafka：类似MQ的产品；分布式消息系统，高吞吐量</li></ul><h2 id="1-4-RabbitMQ"><a href="#1-4-RabbitMQ" class="headerlink" title="1.4. RabbitMQ"></a>1.4. RabbitMQ</h2><p>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><p>RabbitMQ提供了6种模式：简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式（远程调用，不太算MQ；暂不作介绍）；</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555988678324.png" alt="1555988678324"></p><h1 id="2-安装及配置RabbitMQ"><a href="#2-安装及配置RabbitMQ" class="headerlink" title="2. 安装及配置RabbitMQ"></a>2. 安装及配置RabbitMQ</h1><p>详细查看 <code>资料/软件/安装RabbitMQ.md</code> 文档。</p><h1 id="3-RabbitMQ入门"><a href="#3-RabbitMQ入门" class="headerlink" title="3. RabbitMQ入门"></a>3. RabbitMQ入门</h1><h2 id="3-1-搭建示例工程"><a href="#3-1-搭建示例工程" class="headerlink" title="3.1. 搭建示例工程"></a>3.1. 搭建示例工程</h2><h3 id="3-1-1-创建工程"><a href="#3-1-1-创建工程" class="headerlink" title="3.1.1. 创建工程"></a>3.1.1. 创建工程</h3><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1558319510387.png" alt="1555991321159"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1558319546688.png" alt="1555991353704"></p><h3 id="3-1-2-添加依赖"><a href="#3-1-2-添加依赖" class="headerlink" title="3.1.2. 添加依赖"></a>3.1.2. 添加依赖</h3><p>往heima-rabbitmq的pom.xml文件中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-编写生产者"><a href="#3-2-编写生产者" class="headerlink" title="3.2. 编写生产者"></a>3.2. 编写生产者</h2><p>编写消息生产者com.itheima.rabbitmq.simple.Producer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机地址;默认为 localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="comment">//连接端口;默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机名称;默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line">        <span class="comment">//连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要发送的信息</span></span><br><span class="line">        String message = <span class="string">&quot;你好；小兔子！&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在执行上述的消息发送之后；可以登录rabbitMQ的管理控制台，可以发现队列和其消息：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556006638979.png" alt="1556006638979"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556006647177.png" alt="1556006647177"></p><h2 id="3-3-编写消费者"><a href="#3-3-编写消费者" class="headerlink" title="3.3. 编写消费者"></a>3.3. 编写消费者</h2><p>抽取创建connection的工具类com.itheima.rabbitmq.util.ConnectionUtil；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机地址;默认为 localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="comment">//连接端口;默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机名称;默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line">        <span class="comment">//连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="keyword">return</span> connectionFactory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写消息的消费者com.itheima.rabbitmq.simple.Consumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不关闭资源，应该一直监听消息</span></span><br><span class="line">        <span class="comment">//channel.close();</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4. 小结"></a>3.4. 小结</h2><p>上述的入门案例中中其实使用的是如下的简单模式：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555991074575.png" alt="1555991074575"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h1 id="4-AMQP"><a href="#4-AMQP" class="headerlink" title="4. AMQP"></a>4. AMQP</h1><h2 id="4-1-相关概念介绍"><a href="#4-1-相关概念介绍" class="headerlink" title="4.1. 相关概念介绍"></a>4.1. 相关概念介绍</h2><p>AMQP  一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><p>AMQP是一个二进制协议，拥有一些现代化特点：多信道、协商式，异步，安全，扩平台，中立，高效。</p><p>RabbitMQ是AMQP协议的Erlang的实现。</p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>连接Connection</td><td>一个网络连接，比如TCP/IP套接字连接。</td></tr><tr><td>会话Session</td><td>端点之间的命名对话。在一个会话上下文中，保证“恰好传递一次”。</td></tr><tr><td>信道Channel</td><td>多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。</td></tr><tr><td>客户端Client</td><td>AMQP连接或者会话的发起者。AMQP是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。</td></tr><tr><td>服务节点Broker</td><td>消息中间件的服务节点；一般情况下可以将一个RabbitMQ Broker看作一台RabbitMQ 服务器。</td></tr><tr><td>端点</td><td>AMQP对话的任意一方。一个AMQP连接包括两个端点（一个是客户端，一个是服务器）。</td></tr><tr><td>消费者Consumer</td><td>一个从消息队列里请求消息的客户端程序。</td></tr><tr><td>生产者Producer</td><td>一个向交换机发布消息的客户端应用程序。</td></tr></tbody></table><h2 id="4-2-RabbitMQ运转流程"><a href="#4-2-RabbitMQ运转流程" class="headerlink" title="4.2. RabbitMQ运转流程"></a>4.2. RabbitMQ运转流程</h2><p>在入门案例中：</p><ul><li>生产者发送消息<ol><li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li><li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li><li>将路由键（空字符串）与队列绑定起来；</li><li>发送消息至RabbitMQ Broker；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li><li>消费者接收消息<ol><li>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</li><li>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</li><li>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</li><li>确认（ack，自动确认）接收到的消息；</li><li>RabbitMQ从队列中删除相应已经被确认的消息；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li></ul><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1565105223969.png" alt="1565105223969"></p><h2 id="4-3-生产者流转过程说明"><a href="#4-3-生产者流转过程说明" class="headerlink" title="4.3. 生产者流转过程说明"></a>4.3. 生产者流转过程说明</h2><ol><li>客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQPO-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>客户端调用connection.createChannel方法。此方法开启信道，其包装的channel.open命令发送给Broker,等待channel.basicPublish方法，对应的AMQP命令为Basic.Publish,这个命令包含了content Header 和content Body()。content Header 包含了消息体的属性，例如:投递模式，优先级等，content Body 包含了消息体本身。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E5%9B%BE.bmp" alt="生产者流转过程图"></p><h2 id="4-4-消费者流转过程说明"><a href="#4-4-消费者流转过程说明" class="headerlink" title="4.4. 消费者流转过程说明"></a>4.4. 消费者流转过程说明</h2><ol><li>消费者客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQPO-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>消费者客户端调用connection.createChannel方法。和生产者客户端一样，协议涉及Channel . Open/Open-Ok命令。</li><li>在真正消费之前，消费者客户端需要向Broker 发送Basic.Consume 命令(即调用channel.basicConsume 方法〉将Channel 置为接收模式，之后Broker 回执Basic . Consume - Ok 以告诉消费者客户端准备好消费消息。</li><li>Broker 向消费者客户端推送(Push) 消息，即Basic.Deliver 命令，这个命令和Basic.Publish 命令一样会携带Content Header 和Content Body。</li><li>消费者接收到消息并正确消费之后，向Broker 发送确认，即Basic.Ack 命令。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%B6%88%E8%B4%B9%E8%80%85%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E5%9B%BE.bmp" alt="消费者流转过程图"></p><h1 id="5-RabbitMQ工作模式"><a href="#5-RabbitMQ工作模式" class="headerlink" title="5. RabbitMQ工作模式"></a>5. RabbitMQ工作模式</h1><h2 id="4-1-Work-queues工作队列模式"><a href="#4-1-Work-queues工作队列模式" class="headerlink" title="4.1. Work queues工作队列模式"></a>4.1. Work queues工作队列模式</h2><h3 id="4-1-1-模式说明"><a href="#4-1-1-模式说明" class="headerlink" title="4.1.1. 模式说明"></a>4.1.1. 模式说明</h3><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556009144848.png" alt="1556009144848"></p><p><code>Work Queues</code>与入门程序的<code>简单模式</code>相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</p><h3 id="4-1-2-代码"><a href="#4-1-2-代码" class="headerlink" title="4.1.2. 代码"></a>4.1.2. 代码</h3><p><code>Work Queues</code>与入门程序的<code>简单模式</code>的代码是几乎一样的；可以完全复制，并复制多一个消费者进行多个消费者同时消费消息的测试。</p><h4 id="1）生产者"><a href="#1）生产者" class="headerlink" title="1）生产者"></a>1）生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 发送信息</span></span><br><span class="line">            String message = <span class="string">&quot;你好；小兔子！work模式--&quot;</span> + i;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class="line"><span class="comment">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">             * 参数4：消息内容</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）消费者1"><a href="#2）消费者1" class="headerlink" title="2）消费者1"></a>2）消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次只能接收并处理一个消息</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//路由key</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                    <span class="comment">//交换机</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                    <span class="comment">//消息id</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                    <span class="comment">//收到的消息</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//确认消息</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）消费者2"><a href="#3）消费者2" class="headerlink" title="3）消费者2"></a>3）消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次只能接收并处理一个消息</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//路由key</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                    <span class="comment">//交换机</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                    <span class="comment">//消息id</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                    <span class="comment">//收到的消息</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//确认消息</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-1-3-测试"><a href="#4-1-3-测试" class="headerlink" title="4.1.3. 测试"></a>4.1.3. 测试</h3><p>启动两个消费者，然后再启动生产者发送消息；到IDEA的两个消费者对应的控制台查看是否竞争性的接收到消息。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556014310859.png" alt="1556014310859"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556014318106.png" alt="1556014318106"></p><h3 id="4-1-4-小结"><a href="#4-1-4-小结" class="headerlink" title="4.1.4. 小结"></a>4.1.4. 小结</h3><p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系。</p><h2 id="4-2-订阅模式类型"><a href="#4-2-订阅模式类型" class="headerlink" title="4.2. 订阅模式类型"></a>4.2. 订阅模式类型</h2><p>订阅模式示例图：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556014499573.png" alt="1556014499573"></p><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分</li></ul><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="4-3-Publish-Subscribe发布与订阅模式"><a href="#4-3-Publish-Subscribe发布与订阅模式" class="headerlink" title="4.3. Publish/Subscribe发布与订阅模式"></a>4.3. Publish/Subscribe发布与订阅模式</h2><h3 id="4-3-1-模式说明"><a href="#4-3-1-模式说明" class="headerlink" title="4.3.1. 模式说明"></a>4.3.1. 模式说明</h3><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556010329032.png" alt="1556010329032"></p><p>发布订阅模式：<br>1、每个消费者监听自己的队列。<br>2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收<br>到消息</p><h3 id="4-3-2-代码"><a href="#4-3-2-代码" class="headerlink" title="4.3.2. 代码"></a>4.3.2. 代码</h3><h4 id="1）生产者-1"><a href="#1）生产者-1" class="headerlink" title="1）生产者"></a>1）生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.ps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布与订阅使用的交换机类型为：fanout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_EXCHAGE = <span class="string">&quot;fanout_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_1 = <span class="string">&quot;fanout_queue_1&quot;</span>;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE_2 = <span class="string">&quot;fanout_queue_2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(FANOUT_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(FANOUT_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(FANOUT_QUEUE_1, FANOUT_EXCHAGE, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(FANOUT_QUEUE_2, FANOUT_EXCHAGE, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 发送信息</span></span><br><span class="line">            String message = <span class="string">&quot;你好；小兔子！发布订阅模式--&quot;</span> + i;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class="line"><span class="comment">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">             * 参数4：消息内容</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(FANOUT_EXCHAGE, <span class="string">&quot;&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）消费者1-1"><a href="#2）消费者1-1" class="headerlink" title="2）消费者1"></a>2）消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.ps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.FANOUT_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.FANOUT_QUEUE_1, Producer.FANOUT_EXCHAGE, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.FANOUT_QUEUE_1, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3）消费者2-1"><a href="#3）消费者2-1" class="headerlink" title="3）消费者2"></a>3）消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.ps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.FANOUT_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.FANOUT_QUEUE_2, Producer.FANOUT_EXCHAGE, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.FANOUT_QUEUE_2, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-测试"><a href="#4-3-3-测试" class="headerlink" title="4.3.3. 测试"></a>4.3.3. 测试</h3><p>启动所有消费者，然后使用生产者发送消息；在每个消费者对应的控制台可以查看到生产者发送的所有消息；到达<strong>广播</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>fanout_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556015006220.png" alt="1556015006220"></p><h3 id="4-3-4-小结"><a href="#4-3-4-小结" class="headerlink" title="4.3.4. 小结"></a>4.3.4. 小结</h3><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><p><strong>发布订阅模式与工作队列模式的区别</strong></p><p>1、工作队列模式不用定义交换机，而发布/订阅模式需要定义交换机。 </p><p>2、发布/订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)。</p><p>3、发布/订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑 定到默认的交换机 。</p><h2 id="4-4-Routing路由模式"><a href="#4-4-Routing路由模式" class="headerlink" title="4.4. Routing路由模式"></a>4.4. Routing路由模式</h2><h3 id="4-4-1-模式说明"><a href="#4-4-1-模式说明" class="headerlink" title="4.4.1. 模式说明"></a>4.4.1. 模式说明</h3><p>路由模式特点：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556029284397.png" alt="1556029284397"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h3 id="4-4-2-代码"><a href="#4-4-2-代码" class="headerlink" title="4.4.2. 代码"></a>4.4.2. 代码</h3><p>在编码上与 <code>Publish/Subscribe发布与订阅模式</code> 的区别是交换机的类型为：Direct，还有队列绑定交换机的时候需要指定routing key。</p><h4 id="1）生产者-2"><a href="#1）生产者-2" class="headerlink" title="1）生产者"></a>1）生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式的交换机类型为：direct</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_EXCHAGE = <span class="string">&quot;direct_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE_INSERT = <span class="string">&quot;direct_queue_insert&quot;</span>;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE_UPDATE = <span class="string">&quot;direct_queue_update&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(DIRECT_QUEUE_INSERT, DIRECT_EXCHAGE, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line">        channel.queueBind(DIRECT_QUEUE_UPDATE, DIRECT_EXCHAGE, <span class="string">&quot;update&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        String message = <span class="string">&quot;新增了商品。路由模式；routing key 为 insert &quot;</span> ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(DIRECT_EXCHAGE, <span class="string">&quot;insert&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">&quot;修改了商品。路由模式；routing key 为 update&quot;</span> ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class="line"><span class="comment">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(DIRECT_EXCHAGE, <span class="string">&quot;update&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）消费者1-2"><a href="#2）消费者1-2" class="headerlink" title="2）消费者1"></a>2）消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.DIRECT_QUEUE_INSERT, Producer.DIRECT_EXCHAGE, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.DIRECT_QUEUE_INSERT, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3）消费者2-2"><a href="#3）消费者2-2" class="headerlink" title="3）消费者2"></a>3）消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.DIRECT_QUEUE_UPDATE, Producer.DIRECT_EXCHAGE, <span class="string">&quot;update&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.DIRECT_QUEUE_UPDATE, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4-3-测试"><a href="#4-4-3-测试" class="headerlink" title="4.4.3. 测试"></a>4.4.3. 测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>direct_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556031175744.png" alt="1556031175744"></p><h3 id="4-4-4-小结"><a href="#4-4-4-小结" class="headerlink" title="4.4.4. 小结"></a>4.4.4. 小结</h3><p>Routing模式要求队列在绑定交换机时要指定routing key，消息会转发到符合routing key的队列。</p><h2 id="4-5-Topics通配符模式"><a href="#4-5-Topics通配符模式" class="headerlink" title="4.5. Topics通配符模式"></a>4.5. Topics通配符模式</h2><h3 id="4-5-1-模式说明"><a href="#4-5-1-模式说明" class="headerlink" title="4.5.1. 模式说明"></a>4.5.1. 模式说明</h3><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候<strong>使用通配符</strong>！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.insert.abc</code> 或者 <code>item.insert</code></p><p><code>item.*</code>：只能匹配<code>item.insert</code></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556031362048.png" alt="1556031362048"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556031519931.png" alt="1556031519931"></p><p>图解：</p><ul><li>红色Queue：绑定的是<code>usa.#</code> ，因此凡是以 <code>usa.</code>开头的<code>routing key</code> 都会被匹配到</li><li>黄色Queue：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配</li></ul><h3 id="4-5-2-代码"><a href="#4-5-2-代码" class="headerlink" title="4.5.2. 代码"></a>4.5.2. 代码</h3><h4 id="1）生产者-3"><a href="#1）生产者-3" class="headerlink" title="1）生产者"></a>1）生产者</h4><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.insert</code>、<code>item.update</code>、<code>item.delete</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通配符Topic的交换机类型为：topic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHAGE = <span class="string">&quot;topic_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_1 = <span class="string">&quot;topic_queue_1&quot;</span>;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE_2 = <span class="string">&quot;topic_queue_2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机类型，fanout、topic、topic、headers</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        String message = <span class="string">&quot;新增了商品。Topic模式；routing key 为 item.insert &quot;</span> ;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHAGE, <span class="string">&quot;item.insert&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">&quot;修改了商品。Topic模式；routing key 为 item.update&quot;</span> ;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHAGE, <span class="string">&quot;item.update&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line">        message = <span class="string">&quot;删除了商品。Topic模式；routing key 为 item.delete&quot;</span> ;</span><br><span class="line">        channel.basicPublish(TOPIC_EXCHAGE, <span class="string">&quot;item.delete&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）消费者1-3"><a href="#2）消费者1-3" class="headerlink" title="2）消费者1"></a>2）消费者1</h4><p>接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.TOPIC_QUEUE_1, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class="string">&quot;item.update&quot;</span>);</span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class="string">&quot;item.delete&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.TOPIC_QUEUE_1, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3）消费者2-3"><a href="#3）消费者2-3" class="headerlink" title="3）消费者2"></a>3）消费者2</h4><p>接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本次连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class="line"><span class="comment">         * 参数5：队列其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.TOPIC_QUEUE_2, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列绑定交换机</span></span><br><span class="line">        channel.queueBind(Producer.TOPIC_QUEUE_2, Producer.TOPIC_EXCHAGE, <span class="string">&quot;item.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者；并设置消息处理</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class="line"><span class="comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class="line"><span class="comment">             * properties 属性信息</span></span><br><span class="line"><span class="comment">             * body 消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//监听消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消息接收到后回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.TOPIC_QUEUE_2, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-5-3-测试"><a href="#4-5-3-测试" class="headerlink" title="4.5.3. 测试"></a>4.5.3. 测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果；并且这些routing key可以使用通配符。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>topic_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556032433333.png" alt="1556032433333"></p><h3 id="4-5-4-小结"><a href="#4-5-4-小结" class="headerlink" title="4.5.4. 小结"></a>4.5.4. 小结</h3><p>Topic主题模式可以实现 <code>Publish/Subscribe发布与订阅模式</code> 和 <code> Routing路由模式</code> 的功能；只是Topic在配置routing key 的时候可以使用通配符，显得更加灵活。</p><h2 id="4-6-模式总结"><a href="#4-6-模式总结" class="headerlink" title="4.6. 模式总结"></a>4.6. 模式总结</h2><p>RabbitMQ工作模式：<br><strong>1、简单模式 HelloWorld</strong><br>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><strong>2、工作队列模式 Work Queue</strong><br>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><strong>3、发布订阅模式 Publish/subscribe</strong><br>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><strong>4、路由模式 Routing</strong><br>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p><strong>5、通配符模式 Topic</strong><br>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><h1 id="5-Spring-整合RabbitMQ"><a href="#5-Spring-整合RabbitMQ" class="headerlink" title="5. Spring 整合RabbitMQ"></a>5. Spring 整合RabbitMQ</h1><h2 id="5-1-搭建生产者工程"><a href="#5-1-搭建生产者工程" class="headerlink" title="5.1. 搭建生产者工程"></a>5.1. 搭建生产者工程</h2><h3 id="5-1-1-创建工程"><a href="#5-1-1-创建工程" class="headerlink" title="5.1.1. 创建工程"></a>5.1.1. 创建工程</h3><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1565149342994.png" alt="1565149342994"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1565144326498.png" alt="1565144326498"></p><h3 id="5-1-2-添加依赖"><a href="#5-1-2-添加依赖" class="headerlink" title="5.1.2. 添加依赖"></a>5.1.2. 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbitmq-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-3-配置整合"><a href="#5-1-3-配置整合" class="headerlink" title="5.1.3. 配置整合"></a>5.1.3. 配置整合</h3><ol><li>创建<code>spring-rabbitmq-producer\src\main\resources\properties\rabbitmq.properties</code>连接参数等配置文件；</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitmq.host</span>=<span class="string">192.168.12.135</span></span><br><span class="line"><span class="meta">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="meta">rabbitmq.username</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.password</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.virtual-host</span>=<span class="string">/itcast</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建 <code>spring-rabbitmq-producer\src\main\resources\spring\spring-rabbitmq.xml</code> 整合配置文件；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:properties/rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义管理交换机、队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义持久化队列，不存在则自动创建；不绑定到交换机则绑定到默认交换机</span></span><br><span class="line"><span class="comment">    默认交换机类型为direct，名字为：&quot;&quot;，路由键为队列的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_queue&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_queue&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~广播；所有队列都能收到消息~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_fanout_queue_1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_fanout_queue_1&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_fanout_queue_2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_fanout_queue_2&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义广播类型交换机；并绑定上述两个队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:fanout-exchange</span> <span class="attr">id</span>=<span class="string">&quot;spring_fanout_exchange&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_fanout_exchange&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">&quot;spring_fanout_queue_1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">&quot;spring_fanout_queue_2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:fanout-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~通配符；*匹配一个单词，#匹配多个单词 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_queue_star&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_queue_star&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_queue_well&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_queue_well&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_queue_well2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_queue_well2&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">id</span>=<span class="string">&quot;spring_topic_exchange&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring_topic_exchange&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;heima.*&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;spring_topic_queue_star&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;heima.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;spring_topic_queue_well&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">&quot;itcast.#&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;spring_topic_queue_well2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">&quot;rabbitTemplate&quot;</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-4-发送消息"><a href="#5-1-4-发送消息" class="headerlink" title="5.1.4. 发送消息"></a>5.1.4. 发送消息</h3><p>创建测试文件 <code>spring-rabbitmq-producer\src\test\java\com\itheima\rabbitmq\ProducerTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:spring/spring-rabbitmq.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只发队列消息</span></span><br><span class="line"><span class="comment">     * 默认交换机类型为 direct</span></span><br><span class="line"><span class="comment">     * 交换机的名称为空，路由键为队列的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//路由键与队列同名</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_queue&quot;</span>, <span class="string">&quot;只发队列spring_queue的消息。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送广播</span></span><br><span class="line"><span class="comment">     * 交换机类型为 fanout</span></span><br><span class="line"><span class="comment">     * 绑定到该交换机的所有队列都能够收到消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fanoutTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：路由键名（广播设置为空）</span></span><br><span class="line"><span class="comment">         * 参数3：发送的消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_fanout_exchange&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;发送到spring_fanout_exchange交换机的广播消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通配符</span></span><br><span class="line"><span class="comment">     * 交换机类型为 topic</span></span><br><span class="line"><span class="comment">     * 匹配路由键的通配符，*表示一个单词，#表示多个单词</span></span><br><span class="line"><span class="comment">     * 绑定到该交换机的匹配队列能够收到对应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topicTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：路由键名</span></span><br><span class="line"><span class="comment">         * 参数3：发送的消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_topic_exchange&quot;</span>, <span class="string">&quot;heima.bj&quot;</span>, <span class="string">&quot;发送到spring_topic_exchange交换机heima.bj的消息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_topic_exchange&quot;</span>, <span class="string">&quot;heima.bj.1&quot;</span>, <span class="string">&quot;发送到spring_topic_exchange交换机heima.bj.1的消息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_topic_exchange&quot;</span>, <span class="string">&quot;heima.bj.2&quot;</span>, <span class="string">&quot;发送到spring_topic_exchange交换机heima.bj.2的消息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;spring_topic_exchange&quot;</span>, <span class="string">&quot;itcast.cn&quot;</span>, <span class="string">&quot;发送到spring_topic_exchange交换机itcast.cn的消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-2-搭建消费者工程"><a href="#5-2-搭建消费者工程" class="headerlink" title="5.2. 搭建消费者工程"></a>5.2. 搭建消费者工程</h2><h3 id="5-2-1-创建工程"><a href="#5-2-1-创建工程" class="headerlink" title="5.2.1. 创建工程"></a>5.2.1. 创建工程</h3><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1565149374831.png" alt="1565149374831"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1565144775216.png" alt="1565144775216"></p><h3 id="5-2-2-添加依赖"><a href="#5-2-2-添加依赖" class="headerlink" title="5.2.2. 添加依赖"></a>5.2.2. 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbitmq-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-配置整合"><a href="#5-2-3-配置整合" class="headerlink" title="5.2.3. 配置整合"></a>5.2.3. 配置整合</h3><ol><li>创建<code>spring-rabbitmq-consumer\src\main\resources\properties\rabbitmq.properties</code>连接参数等配置文件；</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitmq.host</span>=<span class="string">192.168.12.135</span></span><br><span class="line"><span class="meta">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="meta">rabbitmq.username</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.password</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.virtual-host</span>=<span class="string">/itcast</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建 <code>spring-rabbitmq-consumer\src\main\resources\spring\spring-rabbitmq.xml</code> 整合配置文件；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:properties/rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">host</span>=<span class="string">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;springQueueListener&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.rabbitmq.listener.SpringQueueListener&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;fanoutListener1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.rabbitmq.listener.FanoutListener1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;fanoutListener2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.rabbitmq.listener.FanoutListener2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;topicListenerStar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.rabbitmq.listener.TopicListenerStar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;topicListenerWell&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.rabbitmq.listener.TopicListenerWell&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;topicListenerWell2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.rabbitmq.listener.TopicListenerWell2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;springQueueListener&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;spring_queue&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;fanoutListener1&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;spring_fanout_queue_1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;fanoutListener2&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;spring_fanout_queue_2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;topicListenerStar&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;spring_topic_queue_star&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;topicListenerWell&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;spring_topic_queue_well&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">&quot;topicListenerWell2&quot;</span> <span class="attr">queue-names</span>=<span class="string">&quot;spring_topic_queue_well2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-4-消息监听器"><a href="#5-2-4-消息监听器" class="headerlink" title="5.2.4. 消息监听器"></a>5.2.4. 消息监听器</h3><h4 id="1）队列监听器"><a href="#1）队列监听器" class="headerlink" title="1）队列监听器"></a>1）队列监听器</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\SpringQueueListener.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringQueueListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n&quot;</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）广播监听器1"><a href="#2）广播监听器1" class="headerlink" title="2）广播监听器1"></a>2）广播监听器1</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\FanoutListener1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutListener1</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;广播监听器1：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n&quot;</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3）广播监听器2"><a href="#3）广播监听器2" class="headerlink" title="3）广播监听器2"></a>3）广播监听器2</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\FanoutListener2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutListener2</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;广播监听器2：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n&quot;</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）星号通配符监听器"><a href="#4）星号通配符监听器" class="headerlink" title="4）星号通配符监听器"></a>4）星号通配符监听器</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\TopicListenerStar.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicListenerStar</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;通配符*监听器：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n&quot;</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5）井号通配符监听器"><a href="#5）井号通配符监听器" class="headerlink" title="5）井号通配符监听器"></a>5）井号通配符监听器</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\TopicListenerWell.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicListenerWell</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;通配符#监听器：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n&quot;</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6）井号通配符监听器2"><a href="#6）井号通配符监听器2" class="headerlink" title="6）井号通配符监听器2"></a>6）井号通配符监听器2</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\TopicListenerWell2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicListenerWell2</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;通配符#监听器2：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n&quot;</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-Spring-Boot整合RabbitMQ"><a href="#6-Spring-Boot整合RabbitMQ" class="headerlink" title="6. Spring Boot整合RabbitMQ"></a>6. Spring Boot整合RabbitMQ</h1><h2 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1. 简介"></a>6.1. 简介</h2><p>在Spring项目中，可以使用Spring-Rabbit去操作RabbitMQ<br><a href="https://github.com/spring-projects/spring-amqp">https://github.com/spring-projects/spring-amqp</a></p><p>尤其是在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。</p><p><em>一般在开发过程中</em>：</p><p><strong>生产者工程：</strong></p><ol><li><p>application.yml文件配置RabbitMQ相关信息；</p></li><li><p>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</p></li><li><p>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</p></li></ol><p><strong>消费者工程：</strong></p><ol><li><p>application.yml文件配置RabbitMQ相关信息</p></li><li><p>创建消息处理类，用于接收队列中的消息并进行处理</p></li></ol><h2 id="5-2-搭建生产者工程"><a href="#5-2-搭建生产者工程" class="headerlink" title="5.2. 搭建生产者工程"></a>5.2. 搭建生产者工程</h2><h3 id="5-2-1-创建工程-1"><a href="#5-2-1-创建工程-1" class="headerlink" title="5.2.1. 创建工程"></a>5.2.1. 创建工程</h3><p>创建生产者工程springboot-rabbitmq-producer</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1558321303612.png" alt="1556072078816"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1558321417385.png" alt="1556072084653"></p><h3 id="5-2-2-添加依赖-1"><a href="#5-2-2-添加依赖-1" class="headerlink" title="5.2.2. 添加依赖"></a>5.2.2. 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rabbitmq-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-启动类"><a href="#5-2-3-启动类" class="headerlink" title="5.2.3. 启动类"></a>5.2.3. 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-4-配置RabbitMQ"><a href="#5-2-4-配置RabbitMQ" class="headerlink" title="5.2.4. 配置RabbitMQ"></a>5.2.4. 配置RabbitMQ</h3><h4 id="1）配置文件"><a href="#1）配置文件" class="headerlink" title="1）配置文件"></a>1）配置文件</h4><p>创建application.yml，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima</span></span><br></pre></td></tr></table></figure><h4 id="2）绑定交换机和队列"><a href="#2）绑定交换机和队列" class="headerlink" title="2）绑定交换机和队列"></a>2）绑定交换机和队列</h4><p>创建RabbitMQ队列与交换机绑定的配置类com.itheima.rabbitmq.config.RabbitMQConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_TOPIC_EXCHANGE = <span class="string">&quot;item_topic_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_QUEUE = <span class="string">&quot;item_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;itemTopicExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;itemQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">itemQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(ITEM_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定队列和交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">itemQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;itemQueue&quot;)</span> Queue queue,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@Qualifier(&quot;itemTopicExchange&quot;)</span> Exchange exchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;item.#&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-搭建消费者工程"><a href="#5-3-搭建消费者工程" class="headerlink" title="5.3. 搭建消费者工程"></a>5.3. 搭建消费者工程</h2><h3 id="5-3-1-创建工程"><a href="#5-3-1-创建工程" class="headerlink" title="5.3.1. 创建工程"></a>5.3.1. 创建工程</h3><p>创建消费者工程springboot-rabbitmq-consumer</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1558322109359.png" alt="1556073553841"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1558322192435.png" alt="1556073567786"></p><h3 id="5-3-2-添加依赖"><a href="#5-3-2-添加依赖" class="headerlink" title="5.3.2. 添加依赖"></a>5.3.2. 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rabbitmq-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-3-启动类"><a href="#5-3-3-启动类" class="headerlink" title="5.3.3. 启动类"></a>5.3.3. 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-4-配置RabbitMQ"><a href="#5-3-4-配置RabbitMQ" class="headerlink" title="5.3.4. 配置RabbitMQ"></a>5.3.4. 配置RabbitMQ</h3><p>创建application.yml，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima</span></span><br></pre></td></tr></table></figure><h3 id="5-3-5-消息监听处理类"><a href="#5-3-5-消息监听处理类" class="headerlink" title="5.3.5. 消息监听处理类"></a>5.3.5. 消息监听处理类</h3><p>编写消息监听器com.itheima.rabbitmq.listener.MyListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听某个队列的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收到的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;item_queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListener1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到的消息为：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4. 测试"></a>5.4. 测试</h2><p>在生产者工程springboot-rabbitmq-producer中创建测试类，发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">&quot;item.insert&quot;</span>, <span class="string">&quot;商品新增，routing key 为item.insert&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">&quot;item.update&quot;</span>, <span class="string">&quot;商品修改，routing key 为item.update&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="string">&quot;item.delete&quot;</span>, <span class="string">&quot;商品删除，routing key 为item.delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先运行上述测试程序（交换机和队列才能先被声明和绑定），然后启动消费者；在消费者工程springboot-rabbitmq-consumer中控制台查看是否接收到对应消息。</p><p>另外；也可以在RabbitMQ的管理控制台中查看到交换机与队列的绑定：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556074827222.png" alt="1556074827222"></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloud-01-Eureka-Ribbon-hystrix</title>
      <link href="/2020/08/23/cloud-01-Eureka-Ribbon-hystrix/"/>
      <url>/2020/08/23/cloud-01-Eureka-Ribbon-hystrix/</url>
      
        <content type="html"><![CDATA[<p>cloud-01-Eureka-Ribbon-hystrix</p><a id="more"></a><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/cloud-01-%E5%85%A5%E9%97%A8.png"></p><h2 id="1-系统架构演变"><a href="#1-系统架构演变" class="headerlink" title="1. 系统架构演变"></a>1. 系统架构演变</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">1[集中式架构] --&gt; 2[垂直拆分]</span><br><span class="line">2 --&gt; 3[分布式服务]</span><br><span class="line">3 --&gt; 4[SOA面向服务架构]</span><br><span class="line">4 --&gt; 5[微服务架构]</span><br></pre></td></tr></table></figure><h2 id="2-微服务架构说明"><a href="#2-微服务架构说明" class="headerlink" title="2. 微服务架构说明"></a>2. 微服务架构说明</h2><p><strong>分析</strong>：</p><blockquote><p>SOA使用了ESB组件的面向服务架构：ESB自身实现复杂；应用服务粒度较大，所有服务之间的通信都经过ESB会降低通信速度；部署、测试ESB比较麻烦。</p></blockquote><p><strong>小结</strong>：</p><blockquote><p><strong>微服务架构</strong>：是一套使用小服务或者单一业务来开发单个应用的方式或途径。</p></blockquote><p>微服务架构特点：</p><ul><li>单一职责</li><li>服务粒度小</li><li>面向服务（对外暴露REST api）</li><li>服务之间相互独立</li></ul><p>与使用ESB的SOA架构的区别：<strong>微服务架构没有使用ESB，有服务治理注册中心；业务粒度小。</strong></p><h2 id="3-服务调用方式说明"><a href="#3-服务调用方式说明" class="headerlink" title="3. 服务调用方式说明"></a>3. 服务调用方式说明</h2><p><strong>分析</strong>：</p><ul><li>RPC：基于socket，速度快，效率高；webservice、dubbo</li><li>HTTP：基于TCP，封装比较臃肿；对服务和调用方没有任何技术、语言的限定，自由灵活；RESTful，Spring Cloud</li></ul><h2 id="4-Spring-RestTemplate示例工程导入"><a href="#4-Spring-RestTemplate示例工程导入" class="headerlink" title="4. Spring RestTemplate示例工程导入"></a>4. Spring RestTemplate示例工程导入</h2><p><strong>分析</strong>：</p><p>一般情况下有如下三种http客户端工具类包都可以方便的进行http服务调用：</p><ul><li>httpClient</li><li>okHttp</li><li>JDK原生URLConnection</li></ul><p>spring 提供了RestTemplate的工具类对上述的3种http客户端工具类进行了封装，可在spring项目中使用RestTemplate进行服务调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://localhost/user/8&quot;</span>;</span><br><span class="line">        <span class="comment">//restTemplate可以对json格式字符串进行反序列化</span></span><br><span class="line">        User user = restTemplate.getForObject(url, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-Spring-Cloud概述"><a href="#5-Spring-Cloud概述" class="headerlink" title="5. Spring Cloud概述"></a>5. Spring Cloud概述</h2><ul><li>Spring Cloud的组件可以有很多组件；常见的组件有：<strong>eureka注册中心，Gateway网关，Ribbon负载均衡，Feign服务调用，Hystrix熔断器</strong>。在有需要的时候项目添加对于的启动器依赖即可。</li><li>版本特征：以英文单词命名（伦敦地铁站名）</li></ul><h2 id="6-创建微服务工程"><a href="#6-创建微服务工程" class="headerlink" title="6. 创建微服务工程"></a>6. 创建微服务工程</h2><p><strong>目标</strong>：创建微服务父工程nateshao-cloud-02-mybatis、用户服务工程user-service、服务消费工程user-consumer</p><p><strong>分析</strong>：</p><p>需求：查询数据库中的用户数据并输出到浏览器</p><ul><li>父工程nateshao-cloud-02-mybatis：添加spring boot父坐标和管理其它组件的依赖</li><li>用户服务工程user-service：整合mybatis查询数据库中用户数据；提供查询用户服务</li><li>服务消费工程user-consumer：利用查询用户服务获取用户数据并输出到浏览器</li></ul><p><strong>小结</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>scope</code> 的import可以继承 <code>spring-cloud-dependencies</code> 工程中的依赖</p><h3 id="创建微服务父工程nateshao-cloud-02-mybatis"><a href="#创建微服务父工程nateshao-cloud-02-mybatis" class="headerlink" title="创建微服务父工程nateshao-cloud-02-mybatis"></a>创建微服务父工程nateshao-cloud-02-mybatis</h3><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nateshao-cloud-02-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper.starter.version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">mapper.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通用Mapper启动器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-搭建配置user-service工程"><a href="#7-搭建配置user-service工程" class="headerlink" title="7. 搭建配置user-service工程"></a>7. 搭建配置user-service工程</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/2.png" alt="user-service工程结构"></p><p><strong>目标</strong>：配置user-service工程并能够根据用户id查询数据库中用户</p><p><strong>分析</strong>：</p><p>需求：可以访问<a href="http://localhost:9091/user/8%E8%BE%93%E5%87%BA%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE">http://localhost:9091/user/8输出用户数据</a></p><p>实现步骤：</p><ol><li>添加启动器依赖（web、通用Mapper）；</li><li>创建启动引导类和配置文件；</li><li>修改配置文件中的参数；</li><li>编写测试代码（UserMapper，UserService，UserController）；</li><li>测试</li></ol><p><strong>小结</strong>：</p><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nateshao-cloud-02-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通用Mapper启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写配置文件<strong>application.yml</strong></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;port:9091&#125;</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcloud</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p><strong>启动器UserApplication.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.nateshao.user.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.user.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.nateshao.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/27 23:07</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            Thread.sleep(2000);</span></span><br><span class="line"><span class="comment">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserMapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/27 23:06</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.user.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.annotation.KeySql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/27 23:06</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="comment">// id</span></span><br><span class="line">    <span class="meta">@Id</span>     <span class="comment">//开启主键自动回填</span></span><br><span class="line">    <span class="meta">@KeySql(useGeneratedKeys = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 性别，1男性，2女性</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出生日期</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updated;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备注</span></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.user.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.nateshao.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/27 23:08</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动UserApplication.java ，访问<a href="http://localhost:9091/user/9">http://localhost:9091/user/9</a></strong></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.png" alt="访问结果"></p><h2 id="8-搭建配置consumer-demo工程"><a href="#8-搭建配置consumer-demo工程" class="headerlink" title="8. 搭建配置consumer-demo工程"></a>8. 搭建配置consumer-demo工程</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/3.png" alt="consume工程结构"></p><p><strong>目标</strong>：编写测试类使用restTemplate访问user-service的路径根据id查询用户</p><p><strong>分析</strong>：</p><p>需求：访问<a href="http://localhost:8080/consumer/8">http://localhost:8080/consumer/8</a> 使用RestTemplate获取<a href="http://localhost:9091/user/8%E7%9A%84%E6%95%B0%E6%8D%AE">http://localhost:9091/user/8的数据</a></p><p>实现步骤：</p><ol><li>添加启动器依赖；</li><li>创建启动引导类（注册RestTemplate）和配置文件；</li><li>编写测试代码（ConsumerController中使用restTemplate访问服务获取数据）</li><li>测试</li></ol><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nateshao-cloud-02-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ConsumerController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/28 0:33</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">&quot;http://localhost:9091/user/9&quot;</span> ;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.consumer.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/28 0:36</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 性别，1男性，2女性</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出生日期</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updated;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备注</span></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ConsumerApplication.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created by 邵桐杰 on 2020/8/28 0:31</span></span><br><span class="line"><span class="comment"> * @微信公众号 千羽的编程时光</span></span><br><span class="line"><span class="comment"> * @个人网站 www.nateshao.cn</span></span><br><span class="line"><span class="comment"> * @博客 https://nateshao.gitee.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@GitHub</span> https://github.com/nateshao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Gitee</span> https://gitee.com/nateshao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动user-service和user-consumer工程</strong></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/11.png" alt="访问结果"></p><p><strong>小结</strong>：</p><ul><li>服务管理<br>如何自动注册和发现<br>如何实现状态监管<br>如何实现动态路由</li><li>服务如何实现负载均衡</li><li>服务如何解决容灾问题</li><li>服务如何实现统一配置</li></ul><p>上述的问题都可以通过Spring Cloud的各种组件解决。</p><h2 id="9-Eureka注册中心说明"><a href="#9-Eureka注册中心说明" class="headerlink" title="9. Eureka注册中心说明"></a>9. Eureka注册中心说明</h2><blockquote><p>Eureka的主要功能是进行服务管理，定期检查服务状态，返回服务地址列表。</p></blockquote><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1560439174201.png" alt="Eureka注册中心原理"></p><h2 id="10-搭建eureka-server工程"><a href="#10-搭建eureka-server工程" class="headerlink" title="10. 搭建eureka-server工程"></a>10. 搭建eureka-server工程</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/eureka-%E7%9B%AE%E5%BD%95.png" alt="eureka-目录"></p><p><strong>目标</strong>：添加eureka对应依赖和编写引导类搭建eureka服务并可访问eureka服务界面</p><p><strong>分析</strong>：</p><p>Eureka是服务注册中心，只做服务注册；自身并不提供服务也不消费服务。可以搭建web工程使用Eureka，可以使用Spring Boot方式搭建。</p><p>搭建步骤：</p><ol><li>创建工程；</li><li>添加启动器依赖；</li><li>编写启动引导类（添加Eureka的服务注解）和配置文件；</li><li>修改配置文件（端口，应用名称…）；</li><li>启动测试</li></ol><p><strong>小结</strong>：</p><ul><li>启动器依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;port:10086&#125;</span>  <span class="comment"># 如果提供端口则用port，没有就默认10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># eureka 服务地址，如果是集群的话；需要指定其它集群eureka地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="comment"># 不注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 不拉取服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 服务失效剔除时间间隔，默认60秒</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># 关闭自我保护模式（默认是打开的）</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>EurekaServerApplication.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.naateshao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明当前应用时Eureka服务</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启Eureka客户端发现功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E7%BB%93%E6%9E%9C.png"></p><h2 id="11-服务注册与发现"><a href="#11-服务注册与发现" class="headerlink" title="11. 服务注册与发现"></a>11. 服务注册与发现</h2><blockquote><p>将user-service的服务注册到eureka并在consumer-demo中可以根据服务名称调用</p></blockquote><ul><li><p><strong>服务注册</strong>：在服务提供工程user-service上添加Eureka客户端依赖；自动将服务注册到EurekaServer服务地址列表。</p><ul><li>添加依赖；</li><li>改造启动引导类；添加开启Eureka客户端发现的注解；</li><li>修改配置文件；设置Eureka 服务地址</li></ul></li><li><p><strong>服务发现</strong>：在服务消费工程consumer-demo上添加Eureka客户端依赖；可以使用工具类根据服务名称获取对应的服务地址列表。</p><ul><li><p>添加依赖；</p></li><li><p>改造启动引导类；添加开启Eureka客户端发现的注解；</p></li><li><p>修改配置文件；设置Eureka 服务地址；</p></li><li><p>改造处理器类ConsumerController，可以使用工具类DiscoveryClient根据服务名称获取对应服务地址列表。</p></li></ul></li></ul><ul><li><p>添加Eureka客户端依赖；</p><p>pom.xml (user-consumer)</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>添加启动引导类注解；</p><p>ConsumerApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启Eureka客户端发现功能</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//开启熔断*/</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>application.yml</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-consumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>ConsumerController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;defaultFallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://localhost:9091/user/&quot;</span>+id;</span><br><span class="line">        List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(<span class="string">&quot;user-service&quot;</span>);</span><br><span class="line">        ServiceInstance serviceInstance = serviceInstances.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        url = <span class="string">&quot;http://&quot;</span> + serviceInstance.getHost() + <span class="string">&quot;:&quot;</span> + serviceInstance.getPort() + <span class="string">&quot;/user/&quot;</span> + id;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:9091/user/9%EF%BC%8C%E5%B0%B1%E7%9C%8B%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%86%85%E5%AE%B9%E3%80%82">http://localhost:9091/user/9，就看获取服务内容。</a></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/9.png"></p><p>在服务的消费过程中，根据服务名称可以得到服务内容。</p><h2 id="12-Eureka-Server高可用配置"><a href="#12-Eureka-Server高可用配置" class="headerlink" title="12. Eureka Server高可用配置"></a>12. Eureka Server高可用配置</h2><p><strong>目标</strong>：可以启动两台eureka-server实例；在eureka管理界面看到两个实例</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/10086.png" alt="10086"></p><p>Eureka Server是一个web应用，可以启动多个实例（配置不同端口）保证Eureka Server的高可用。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/10087.png" alt="10087"></p><h2 id="访问10086和10087端口"><a href="#访问10086和10087端口" class="headerlink" title="访问10086和10087端口"></a>访问10086和10087端口</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1008687.png"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E8%AE%BF%E9%97%AE10087%E7%AB%AF%E5%8F%A3%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%A4%E4%B8%AA.png" alt="访问10087端口也可以看到两个"></p><p><strong>小结</strong>：</p><p><strong>高可用配置</strong>：将Eureka Server作为一个服务注册到其它Eureka Server，这样多个Eureka Server之间就能够互相发现对方，同步服务，实现Eureka Server集群。</p><h2 id="13-Eureka客户端与服务端配置"><a href="#13-Eureka客户端与服务端配置" class="headerlink" title="13. Eureka客户端与服务端配置"></a>13. Eureka客户端与服务端配置</h2><blockquote><p><code>Eureka</code>作为一个成熟的<code>服务注册中心</code>当然也有合理的内部<code>维护服务节点</code>的机制，比如<code>服务下线</code>、<code>失效剔除</code>、<code>自我保护</code>，也正是因为内部有这种维护机制才让<code>Eureka</code>更健壮、更稳定。</p></blockquote><p><strong>目标</strong>：配置eureka客户端user-service的注册、续约等配置项，配置eureka客户端consumer-demo的获取服务间隔时间；了解失效剔除和自我保护</p><p><strong>分析</strong>：</p><ul><li><p>Eureka客户端工程</p><ul><li>user-service 服务提供<ul><li>服务地址使用ip方式</li><li>续约</li></ul></li><li>user-consumer 服务消费<ul><li>获取服务地址的频率</li></ul></li></ul></li><li><p>Eureka服务端工程 eureka-server</p><ul><li><p><strong>失效剔除</strong> :<code>Eureka Server</code>在启动完成后会创建一个定时器每隔<code>60秒</code>检查一次<code>服务健康状况</code>，如果其中一个服务节点超过<code>90秒</code>未检查到心跳，那么<code>Eureka Server</code>会自动从<code>服务实例列表</code>内将该服务<code>剔除</code>。</p><p>由于非正常关闭不会执行<code>主动下线</code>动作，所以才会出现<code>失效剔除</code>机制，该机制主要是应对非正常关闭服务的情况，如：<code>内存溢出</code>、<code>杀死进程</code>、<code>服务器宕机</code>等<code>非正常流程</code>关闭服务节点时。</p></li><li><p><strong>自我保护</strong> :<code>Eureka Server</code>的<code>自我保护机制</code>会检查最近<code>15分钟</code>内所有<code>Eureka Client</code>正常心跳的占比，如果低于<code>85%</code>就会被触发。 我们如果在<code>Eureka Server</code>的管理界面发现如下的红色内容，就说明已经触发了<code>自我保护机制</code>。</p></li></ul></li></ul><p><strong>小结</strong>：</p><ul><li>user-service </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 更倾向使用ip地址，而不是host名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># ip地址</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># 续约间隔，默认30秒</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># 服务失效时间，默认90秒</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>user-consumer</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="comment"># 获取服务地址列表间隔时间，默认30秒</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>eureka-server</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 服务失效剔除时间间隔，默认60秒</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># 关闭自我保护模式（默认是打开的）</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="14-负载均衡Ribbon简介"><a href="#14-负载均衡Ribbon简介" class="headerlink" title="14. 负载均衡Ribbon简介"></a>14. 负载均衡Ribbon简介</h2><ul><li>负载均衡和ribbon的作用</li></ul><blockquote><p>负载均衡是一个算法，可以通过该算法实现从地址列表中获取一个地址进行服务调用。在Spring Cloud中提供了负载均衡器：Ribbon</p></blockquote><p><strong>小结</strong>：</p><p>Ribbon提供了<strong>轮询、随机</strong>两种负载均衡算法（默认是轮询）可以实现从地址列表中使用负载均衡算法获取地址进行服务调用。</p><h2 id="15-Ribbon负载均衡应用"><a href="#15-Ribbon负载均衡应用" class="headerlink" title="15. Ribbon负载均衡应用"></a>15. Ribbon负载均衡应用</h2><p><strong>目标</strong>：配置启动两个用户服务，在consumer-demo中使用服务名实现根据用户id获取用户</p><p><strong>分析</strong>：</p><p>需求：可以使用RestTemplate访问<a href="http://user-service/user/8%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE%E3%80%82">http://user-service/user/8获取服务数据。</a></p><p>可以使用Ribbon负载均衡：在执行RestTemplate发送服务地址请求的时候，使用负载均衡拦截器拦截，根据服务名获取服务地址列表，使用Ribbon负载均衡算法从服务地址列表中选择一个服务地址，访问该地址获取服务数据。</p><p>实现步骤：</p><ol><li>启动多个user-service实例（9091,9092）；</li><li>修改RestTemplate实例化方法，添加负载均衡注解；</li><li>修改ConsumerController；</li><li>测试</li></ol><p><strong>小结</strong>：</p><p>在实例化RestTemplate的时候使用@LoadBalanced，服务地址直接可以使用服务名。</p><h2 id="16-熔断器Hystrix简介"><a href="#16-熔断器Hystrix简介" class="headerlink" title="16. 熔断器Hystrix简介"></a>16. 熔断器Hystrix简介</h2><p>熔断器Hystrix的作用</p><blockquote><p>Hystrix是一个延迟和容错库，用于隔离访问远程服务，防止出现级联失败。</p></blockquote><h2 id="17-线程隔离-amp-服务降级"><a href="#17-线程隔离-amp-服务降级" class="headerlink" title="17. 线程隔离&amp;服务降级"></a>17. 线程隔离&amp;服务降级</h2><p><strong>目标</strong>：了解什么是线程隔离和服务降级</p><p><strong>分析</strong>：</p><p>Hystrix解决雪崩效应：</p><ul><li><strong>线程隔离</strong>：用户请求不直接访问服务，而是使用线程池中空闲的线程访问服务，加速失败判断时间。</li><li><strong>服务降级</strong>：及时返回服务调用失败的结果，让线程不因为等待服务而阻塞。</li></ul><p><strong>pom.xml(user-consumer)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>开启熔断 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringBootApplication</span></span><br><span class="line"><span class="comment">//@EnableDiscoveryClient //开启Eureka客户端发现功能</span></span><br><span class="line"><span class="comment">//@EnableCircuitBreaker //开启熔断*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringCloudApplication</span> 等于上面三个注解</span><br></pre></td></tr></table></figure></li></ul><ul><li>降级逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;defaultFallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@HystrixCommand(fallbackMethod = &quot;queryByIdFallback&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*String url = &quot;http://localhost:9091/user/&quot;+id;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        //获取eureka中注册的user-service的实例</span></span><br><span class="line"><span class="comment">        List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(&quot;user-service&quot;);</span></span><br><span class="line"><span class="comment">        ServiceInstance serviceInstance = serviceInstances.get(0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        url = &quot;http://&quot; + serviceInstance.getHost() + &quot;:&quot; + serviceInstance.getPort() + &quot;/user/&quot; + id;*/</span></span><br><span class="line">        String url = <span class="string">&quot;http://user-service/user/&quot;</span> + id;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryByIdFallback</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;查询用户信息失败。id：&#123;&#125;&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;对不起，网络太拥挤了！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">defaultFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;默认提示：对不起，网络太拥挤了！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次访问</p><ul><li><p>修改超时配置<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E5%AF%B9%E4%B8%8D%E8%B5%B7.png"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%88%B7%E6%96%B0%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86.png" alt="刷新"></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="string">default:4e</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h2 id="18-服务熔断"><a href="#18-服务熔断" class="headerlink" title="18. 服务熔断"></a>18. 服务熔断</h2><ul><li>了解熔断器工作原理</li></ul><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1560682028169.png" alt="1560682028169"></p><p>可以通过配置服务熔断参数修改默认：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">50</span> <span class="comment"># 触发熔断错误比例阈值，默认值50%</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">10000</span> <span class="comment"># 熔断后休眠时长，默认值5秒</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">10</span> <span class="comment"># 熔断触发最小请求次数，默认值是20</span></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E8%AF%B7%E6%B1%8210%E6%AC%A1%EF%BC%8C%E7%9C%8B%E4%B8%80%E4%B8%8B%E6%95%88%E6%9E%9C.png" alt="请求10次，看一下效果"></p><p>访问次数过多，断路器打开状态，进行服务降级：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86.png" alt="出问题了"></p><p>过了几秒，形成了半开状态，允许部分访问</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E7%AD%89%E5%BE%85%E5%87%A0%E7%A7%92%EF%BC%8C%E5%86%8D%E6%AC%A1%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%8F%88%E5%8F%AF%E4%BB%A5%E4%BA%86.png" alt="等待几秒，再次访问，又可以了"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式RPC框架-Dubbo</title>
      <link href="/2020/08/23/%E5%88%86%E5%B8%83%E5%BC%8FRPC%E6%A1%86%E6%9E%B6-Dubbo/"/>
      <url>/2020/08/23/%E5%88%86%E5%B8%83%E5%BC%8FRPC%E6%A1%86%E6%9E%B6-Dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式RPC框架Apache-Dubbo"><a href="#分布式RPC框架Apache-Dubbo" class="headerlink" title="分布式RPC框架Apache Dubbo"></a>分布式RPC框架Apache Dubbo</h1><h2 id="0-分布式基础理论"><a href="#0-分布式基础理论" class="headerlink" title="0. 分布式基础理论"></a>0. 分布式基础理论</h2><p>什么是分布式系统？</p><blockquote><p>《分布式系统原理与范型》定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”分布式系统（distributed system）是建立在网络之上的软件系统。</p></blockquote><blockquote><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p></blockquote><h2 id="1-软件架构的发展演变"><a href="#1-软件架构的发展演变" class="headerlink" title="1. 软件架构的发展演变"></a>1. 软件架构的发展演变</h2><p>软件架构的发展经历了由单体架构、垂直架构、SOA架构到微服务架构的演进过程，下面我们分别了解一下这几个架构。<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.jpg"></p><h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1 单体架构"></a>1.1 单体架构</h3><blockquote><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p></blockquote><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.png"><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/2.png" alt="2"></p><blockquote><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p></blockquote><p>架构说明：</p><p>​      全部功能集中在一个项目内（All in one）。</p><p>架构优点：</p><p>​      架构简单，前期开发成本低、开发周期短，适合小型项目。</p><p>架构缺点：</p><ol><li>全部功能集成在一个工程中，对于大型项目不易开发、扩展和维护。</li><li>技术栈受限，只能使用一种语言开发。</li><li>系统性能扩展只能通过扩展集群节点，成本高。</li></ol><h3 id="1-2-垂直架构"><a href="#1-2-垂直架构" class="headerlink" title="1.2 垂直架构"></a>1.2 垂直架构</h3><blockquote><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p></blockquote><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/123.png"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/18.png" alt="18"></p><blockquote><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p></blockquote><p>架构说明：       </p><p>​      按照业务进行切割，形成小的单体项目。</p><p>架构优点：</p><p>​      技术栈可扩展（不同的系统可以用不同的编程语言编写）。</p><p>架构缺点：</p><p>​       功能集中在一个项目中，不利于开发、扩展、维护。</p><p>​       系统扩张只能通过集群的方式。</p><p>​       项目之间功能冗余、数据冗余、耦合性强。</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><blockquote><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p></blockquote><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/123321.png"></p><h3 id="1-3-SOA架构"><a href="#1-3-SOA架构" class="headerlink" title="1.3 SOA架构"></a>1.3 SOA架构</h3><blockquote><p> SOA全称为Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p></blockquote><p>站在功能的角度，把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/SOA.png" alt="SOA"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/19.png" alt="19"></p><p>架构说明：</p><p>​      将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁。</p><p>架构优点：</p><p>​       重复功能或模块抽取为服务，提高开发效率。</p><p>​       可重用性高。</p><p>​       可维护性高。</p><p>架构缺点：</p><p>​       各系统之间业务不同，很难确认功能或模块是重复的。</p><p>​       抽取服务的粒度大。</p><p>​       系统和服务之间耦合度高。</p><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><ul><li><strong>什么叫RPC</strong></li></ul><blockquote><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p></blockquote><p>需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程。</p><p>RPC是一个泛化的概念，严格来说一切远程过程调用手段都属于RPC范畴。各种开发语言都有自己的RPC框架。Java中的RPC框架比较多，广泛使用的有<strong>RMI、Hessian、Dubbo</strong>等。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/RPC.png" alt="RPC基本原理"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/RPC1.png"></p><p>RPC两个核心模块：<strong>通讯，序列化</strong>。</p><h3 id="1-4-微服务架构"><a href="#1-4-微服务架构" class="headerlink" title="1.4 微服务架构"></a>1.4 微服务架构</h3><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/20.png" alt="20"></p><p>架构说明：</p><p>​       将系统服务层完全独立出来，抽取为一个一个的微服务。</p><p>​       抽取的粒度更细，遵循单一原则。</p><p>​       采用轻量级框架协议传输。</p><p>架构优点：</p><p>​       服务拆分粒度更细，有利于提高开发效率。 </p><p>​       可以针对不同服务制定对应的优化方案。</p><p>​       适用于互联网时代，产品迭代周期更短。</p><p>架构缺点：</p><p>​      粒度太细导致服务太多，维护成本高。</p><p>​      分布式系统开发的技术成本高，对团队的挑战大。</p><h2 id="2-Apache-Dubbo概述"><a href="#2-Apache-Dubbo概述" class="headerlink" title="2. Apache Dubbo概述"></a>2. Apache Dubbo概述</h2><h3 id="2-1-Dubbo简介"><a href="#2-1-Dubbo简介" class="headerlink" title="2.1 Dubbo简介"></a>2.1 Dubbo简介</h3><p>Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个<strong>高性能、轻量级</strong>的开源Java RPC框架，可以和Spring框架无缝集成。</p><p>Dubbo官网地址：<a href="http://dubbo.apache.org/">http://dubbo.apache.org</a></p><p>Dubbo提供了三大核心能力：<strong>面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</strong></p><h3 id="2-2-Dubbo架构"><a href="#2-2-Dubbo架构" class="headerlink" title="2.2 Dubbo架构"></a>2.2 Dubbo架构</h3><p>Dubbo架构图（Dubbo官方提供）如下：</p><p><img src="http://dubbo.apache.org/img/architecture.png"></p><p>节点角色说明：</p><table><thead><tr><th>节点</th><th>角色名称</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><ul><li>虚线都是异步访问，实线都是同步访问</li><li>紫色虚线:在启动时完成的功能</li><li>绿色虚线(实线)都是程序运行过程中执行的功能</li></ul><p>调用关系说明:</p><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h2 id="3-服务注册中心Zookeeper"><a href="#3-服务注册中心Zookeeper" class="headerlink" title="3. 服务注册中心Zookeeper"></a>3. 服务注册中心Zookeeper</h2><p>通过前面的Dubbo架构图可以看到，Registry（服务注册中心）在其中起着至关重要的作用。Dubbo官方推荐使用Zookeeper作为服务注册中心。</p><h3 id="3-1-Zookeeper介绍"><a href="#3-1-Zookeeper介绍" class="headerlink" title="3.1 Zookeeper介绍"></a>3.1 Zookeeper介绍</h3><p>Zookeeper 是 Apache Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用 。</p><p>为了便于理解Zookeeper的树型目录服务，我们先来看一下我们电脑的文件系统(也是一个树型目录结构)：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/4.png" alt="4"></p><p>我的电脑可以分为多个盘符（例如C、D、E等），每个盘符下可以创建多个目录，每个目录下面可以创建文件，也可以创建子目录，最终构成了一个树型结构。通过这种树型结构的目录，我们可以将文件分门别类的进行存放，方便我们后期查找。而且磁盘上的每个文件都有一个唯一的访问路径，例如：C:\Windows\nateshao\hello.txt。</p><p>Zookeeper树型目录服务：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/3.png" alt="3"></p><p>流程说明：</p><ul><li>服务提供者(Provider)启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li><li>服务消费者(Consumer)启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li><li>监控中心(Monitor)启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址</li></ul><h3 id="3-2-安装Zookeeper-Linux"><a href="#3-2-安装Zookeeper-Linux" class="headerlink" title="3.2 安装Zookeeper(Linux)"></a>3.2 安装Zookeeper(Linux)</h3><p>下载地址：<a href="http://archive.apache.org/dist/zookeeper/">http://archive.apache.org/dist/zookeeper/</a></p><p>本课程使用的Zookeeper版本为3.4.6，下载完成后可以获得名称为zookeeper-3.4.6.tar.gz的压缩文件。</p><p>安装步骤：</p><ol><li><p>第一步：安装 jdk（略）</p></li><li><p>第二步：把 zookeeper 的压缩包（zookeeper-3.4.6.tar.gz）上传到 linux 系统</p></li><li><p>第三步：解压缩压缩包  [root@VM_0_16_centos ~]# tar -zxvf zookeeper-3.4.6.tar.gz -C/usr/local</p></li><li><p>第四步：进入zookeeper-3.4.6目录，创建data目录  </p><pre><code>mkdir data</code></pre></li><li><p>第五步：进入conf目录 ，把zoo_sample.cfg 改名为zoo.cfg</p><pre><code>cd conf  </code></pre><p> mv zoo_sample.cfg zoo.cfg</p></li><li><p>第六步：打开zoo.cfg文件,  修改data属性：dataDir=/root/zookeeper-3.4.6/data<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/11.png" alt="zoo.cfg"></p></li></ol><h3 id="3-3-启动、停止Zookeeper（Linux环境下）"><a href="#3-3-启动、停止Zookeeper（Linux环境下）" class="headerlink" title="3.3 启动、停止Zookeeper（Linux环境下）"></a>3.3 启动、停止Zookeeper（Linux环境下）</h3><p>进入Zookeeper的bin目录，启动服务命令</p><blockquote><p> ./zkServer.sh start     </p></blockquote><p>停止服务命令</p><blockquote><p>./zkServer.sh stop</p></blockquote><p>查看服务状态：</p><blockquote><p>./zkServer.sh status</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_16_centos bin]# ./zkServer.sh start</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@VM_0_16_centos bin]# ./zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class="line">Mode: standalone</span><br><span class="line">[root@VM_0_16_centos bin]# ./zkServer.sh stop</span><br></pre></td></tr></table></figure><h3 id="Windows环境下"><a href="#Windows环境下" class="headerlink" title="Windows环境下"></a>Windows环境下</h3><table><thead><tr><th>1、下载zookeeper  网址 <a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.13/">https://archive.apache.org/dist/zookeeper/zookeeper-3.4.13/</a></th></tr></thead><tbody><tr><td><strong>2、解压zookeeper</strong>  解压运行zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件</td></tr><tr><td><strong>3、修改zoo.cfg配置文件</strong>  将conf下的zoo_sample.cfg复制一份改名为zoo.cfg即可。  注意几个重要位置：  dataDir=./  临时数据存储的目录（可写相对路径）  clientPort=2181  zookeeper的端口号  修改完成后再次启动zookeeper</td></tr><tr><td><strong>4、使用zkCli.cmd测试</strong>  ls /：列出zookeeper根下保存的所有节点  create –e /nateshao  happyqixi：创建一个nateshao节点，值为happyqixi 。get  /nateshao：获取/nateshao节点的值</td></tr></tbody></table><p>进入Zookeeper的bin目录，启动服务命令</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E5%8F%8C%E5%87%BB.png">获取根目录下的节点</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/22.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] ls  /</span><br><span class="line">[zookeeper]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建节点 七夕快乐</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create -e /nateshao happyqixi</span><br><span class="line">Created /nateshao</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] get /nateshao</span><br><span class="line">happyqixi</span><br><span class="line">cZxid = 0x4</span><br><span class="line">ctime = Tue Aug 25 22:28:43 CST 2020</span><br><span class="line">mZxid = 0x4</span><br><span class="line">mtime = Tue Aug 25 22:28:43 CST 2020</span><br><span class="line">pZxid = 0x4</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x17425fcc0900000</span><br><span class="line">dataLength = 9</span><br><span class="line">numChildren = 0</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4]</span><br></pre></td></tr></table></figure><h3 id="【windows】-安装dubbo-admin管理控制台"><a href="#【windows】-安装dubbo-admin管理控制台" class="headerlink" title="【windows】-安装dubbo-admin管理控制台"></a>【windows】-安装dubbo-admin管理控制台</h3><p>dubbo本身并不是一个服务软件。它其实就是一个jar包能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。所以你不用在Linux上启动什么dubbo服务。</p><p>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序，不过这个监控即使不装也不影响使用。</p><table><thead><tr><th>1、下载dubbo-admin  <a href="https://github.com/apache/incubator-dubbo-ops![](https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD.png)">https://github.com/apache/incubator-dubbo-ops![](https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/下载.png)</a></th></tr></thead><tbody><tr><td><strong>2、进入目录</strong>，修改dubbo-admin配置  修改 src\main\resources\application.properties  指定zookeeper地址         <img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E4%BF%AE%E6%94%B9.png"></td></tr><tr><td><strong>3、打包dubbo-admin</strong>  mvn clean package -Dmaven.test.skip=true</td></tr><tr><td><strong>4、运行dubbo-admin</strong>  java -jar dubbo-admin-0.0.1-SNAPSHOT.jar  <strong>注意：【有可能控制台看着启动了，但是网页打不开，需要在控制台按下ctrl+c即可】</strong>  默认使用root/root 登陆   <img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/root1.png" alt="root1"></td></tr></tbody></table><h2 id="4-Dubbo快速入门"><a href="#4-Dubbo快速入门" class="headerlink" title="4. Dubbo快速入门"></a>4. Dubbo快速入门</h2><p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。本小节就是要创建两个应用，一个作为服务的提供方，一个作为服务的消费方。通过Dubbo来实现服务消费方远程调用服务提供方的方法。</p><h3 id="4-1-服务提供方开发"><a href="#4-1-服务提供方开发" class="headerlink" title="4.1 服务提供方开发"></a>4.1 服务提供方开发</h3><p>开发步骤：</p><p>（1）创建maven工程（打包方式为war）dubbodemo_provider，在pom.xml文件中导入如下坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）创建服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）创建服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：服务实现类上使用的Service注解是Dubbo提供的，用于对外发布服务</p><p>（5）在src/main/resources下创建applicationContext-service.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo_provider&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册  协议和port   端口默认是20880 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20881&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service.impl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（6）启动服务</p><p>tomcat7:run</p><h3 id="4-2-服务消费方开发"><a href="#4-2-服务消费方开发" class="headerlink" title="4.2 服务消费方开发"></a>4.2 服务消费方开发</h3><p>开发步骤：</p><p>（1）创建maven工程（打包方式为war）dubbodemo_consumer，pom.xml配置和上面服务提供者相同，只需要将Tomcat插件的端口号改为8082即可</p><p>（2）配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）将服务提供者工程中的HelloService接口复制到当前工程</p><p>（4）编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Controller中注入HelloService使用的是Dubbo提供的@Reference注解</p><p>（5）在src/main/resources下创建applicationContext-web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo-consumer&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描的方式暴露接口  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（6）运行测试</p><p>tomcat7:run启动</p><p>在浏览器输入<a href="http://localhost:8082/demo/hello.do?name=Jack%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C">http://localhost:8082/demo/hello.do?name=Jack，查看浏览器输出结果</a></p><p><strong>思考一：</strong>上面的Dubbo入门案例中我们是将HelloService接口从服务提供者工程(dubbodemo_provider)复制到服务消费者工程(dubbodemo_consumer)中，这种做法是否合适？还有没有更好的方式？</p><p><strong>答：</strong>这种做法显然是不好的，同一个接口被复制了两份，不利于后期维护。更好的方式是单独创建一个maven工程，将此接口创建在这个maven工程中。需要依赖此接口的工程只需要在自己工程的pom.xml文件中引入maven坐标即可。</p><p><strong>思考二：</strong>在服务消费者工程(dubbodemo_consumer)中只是引用了HelloService接口，并没有提供实现类，Dubbo是如何做到远程调用的？</p><p><strong>答：</strong>Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用是通过此代理对象完成的。可以通过开发工具的debug功能查看此代理对象的内部结构。另外，Dubbo实现网络传输底层是基于Netty框架完成的。</p><p><strong>思考三：</strong>上面的Dubbo入门案例中我们使用Zookeeper作为服务注册中心，服务提供者需要将自己的服务信息注册到Zookeeper，服务消费者需要从Zookeeper订阅自己所需要的服务，此时Zookeeper服务就变得非常重要了，那如何防止Zookeeper单点故障呢？</p><p><strong>答：</strong>Zookeeper其实是支持集群模式的，可以配置Zookeeper集群来达到Zookeeper服务的高可用，防止出现单点故障。</p><h2 id="5-Dubbo管理控制台"><a href="#5-Dubbo管理控制台" class="headerlink" title="5. Dubbo管理控制台"></a>5. Dubbo管理控制台</h2><p>我们在开发时，需要知道Zookeeper注册中心都注册了哪些服务，有哪些消费者来消费这些服务。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。</p><h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>安装步骤：</p><p>（1）将资料中的dubbo-admin-2.6.0.war文件复制到tomcat的webapps目录下</p><p>（2）启动tomcat，此war文件会自动解压</p><p>（3）修改WEB-INF下的dubbo.properties文件，注意dubbo.registry.address对应的值需要对应当前使用的Zookeeper的ip地址和端口号</p><p>​    dubbo.registry.address=zookeeper://192.168.134.129:2181<br>​    dubbo.admin.root.password=root<br>​    dubbo.admin.guest.password=guest</p><p>（4）重启tomcat</p><h3 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h3><p>操作步骤：</p><p>（1）访问<a href="http://localhost:8080/dubbo-admin-2.6.0/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D(root)%E5%92%8C%E5%AF%86%E7%A0%81(root)">http://localhost:8080/dubbo-admin-2.6.0/，输入用户名(root)和密码(root)</a></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/5.png" alt="5"></p><p>（2）启动服务提供者工程和服务消费者工程，可以在查看到对应的信息</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/6.png" alt="6"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/7.png" alt="7"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/8.png" alt="8"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/9.png" alt="9"></p><h2 id="6-Dubbo相关配置说明"><a href="#6-Dubbo相关配置说明" class="headerlink" title="6. Dubbo相关配置说明"></a>6. Dubbo相关配置说明</h2><h3 id="6-1-包扫描"><a href="#6-1-包扫描" class="headerlink" title="6.1 包扫描"></a>6.1 包扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>服务提供者和服务消费者都需要配置，表示包扫描，作用是扫描指定包(包括子包)下的类。</p><p>如果不使用包扫描，也可以通过如下配置的方式来发布服务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.HelloServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>作为服务消费者，可以通过如下配置来引用服务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用helloService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上面这种方式发布和引用服务，一个配置项(<a href="dubbo:service">dubbo:service</a>、<a href="dubbo:reference">dubbo:reference</a>)只能发布或者引用一个服务，如果有多个服务，这种方式就比较繁琐了。推荐使用包扫描方式。</p><h3 id="6-2-协议"><a href="#6-2-协议" class="headerlink" title="6.2 协议"></a>6.2 协议</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>一般在服务提供者一方配置，可以指定使用的协议名称和端口号。</p><p>其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</p><p>推荐使用的是dubbo协议。</p><p>dubbo 协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p><p>也可以在同一个工程中配置多个协议，不同服务可以使用不同的协议，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;rmi&quot;</span> <span class="attr">port</span>=<span class="string">&quot;1099&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dubbo协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;dubbo&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用rmi协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;rmi&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="6-3-启动时检查"><a href="#6-3-启动时检查" class="headerlink" title="6.3 启动时检查"></a>6.3 启动时检查</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>上面这个配置需要配置在服务消费者一方，如果不配置默认check值为true。Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题。可以通过将check值改为false来关闭检查。</p><p>建议在开发阶段将check值设置为false，在生产环境下改为true。</p><h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><p>负载均衡（Load Balance）：其实就是将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。</p><p>在集群负载均衡时，Dubbo 提供了多种均衡策略（包括随机、轮询、最少活跃调用数、一致性Hash），缺省为random随机调用。</p><p>配置负载均衡策略，既可以在服务提供者一方配置，也可以在服务消费者一方配置，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在服务消费者一方配置负载均衡策略</span></span><br><span class="line">    <span class="meta">@Reference(check = false,loadbalance = &quot;random&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在服务提供者一方配置负载均衡</span></span><br><span class="line"><span class="meta">@Service(loadbalance = &quot;random&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过启动多个服务提供者来观察Dubbo负载均衡效果。</p><p>注意：因为我们是在一台机器上启动多个服务提供者，所以需要修改tomcat的端口号和Dubbo服务的端口号来防止端口冲突。</p><p>在实际生产环境中，多个服务提供者是分别部署在不同的机器上，所以不存在端口冲突问题。</p><h2 id="7-解决Dubbo无法发布被事务代理的Service问题"><a href="#7-解决Dubbo无法发布被事务代理的Service问题" class="headerlink" title="7. 解决Dubbo无法发布被事务代理的Service问题"></a>7. 解决Dubbo无法发布被事务代理的Service问题</h2><p>前面我们已经完成了Dubbo的入门案例，通过入门案例我们可以看到通过Dubbo提供的标签配置就可以进行包扫描，扫描到@Service注解的类就可以被发布为服务。</p><p>但是我们如果在服务提供者类上加入@Transactional事务控制注解后，服务就发布不成功了。原因是事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而此代理对象的完整类名为com.sun.proxy.$Proxy42（最后两位数字不是固定的），导致Dubbo在发布服务前进行包匹配时无法完成匹配，进而没有进行服务的发布。</p><h3 id="7-1-问题展示"><a href="#7-1-问题展示" class="headerlink" title="7.1 问题展示"></a>7.1 问题展示</h3><p>在入门案例的服务提供者dubbodemo_provider工程基础上进行展示</p><p>操作步骤：</p><p>（1）在pom.xml文件中增加maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在applicationContext-service.xml配置文件中加入数据源、事务管理器、开启事务注解的相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>上面连接的数据库可以自行创建</p><p>（3）在HelloServiceImpl类上加入@Transactional注解</p><p>（4）启动服务提供者和服务消费者，并访问</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/12.png" alt="12"></p><p>上面的错误为没有可用的服务提供者</p><p>查看dubbo管理控制台发现服务并没有发布，如下：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/13.png" alt="13"></p><p>可以通过断点调试的方式查看Dubbo执行过程，Dubbo通过AnnotationBean的postProcessAfterInitialization方法进行处理</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/14.png" alt="14"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/15.png" alt="15"></p><h3 id="7-2-解决方案"><a href="#7-2-解决方案" class="headerlink" title="7.2 解决方案"></a>7.2 解决方案</h3><p>通过上面的断点调试可以看到，在HelloServiceImpl类上加入事务注解后，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$Proxy35，导致Dubbo在进行包匹配时没有成功（因为我们在发布服务时扫描的包为com.itheima.service），所以后面真正发布服务的代码没有执行。</p><p>解决方式操作步骤：</p><p>（1）修改applicationContext-service.xml配置文件，开启事务控制注解支持时指定proxy-target-class属性，值为true。其作用是使用cglib代理方式为Service类创建代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/17.png" alt="17"></p><p>（2）修改HelloServiceImpl类，在Service注解中加入interfaceClass属性，值为HelloService.class，作用是指定服务的接口类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(interfaceClass = HelloService.class)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处也是必须要修改的，否则会导致发布的服务接口为SpringProxy，而不是HelloService接口，如下：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/16.png" alt="16"></p>]]></content>
      
      
      <categories>
          
          <category> dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你回去了解一下RESTful风格</title>
      <link href="/2020/08/23/%E4%BD%A0%E5%9B%9E%E5%8E%BB%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BRESTful%E9%A3%8E%E6%A0%BC/"/>
      <url>/2020/08/23/%E4%BD%A0%E5%9B%9E%E5%8E%BB%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BRESTful%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="你回去了解一下RESTful风格"><a href="#你回去了解一下RESTful风格" class="headerlink" title="你回去了解一下RESTful风格"></a>你回去了解一下RESTful风格</h1><p><a href="https://baike.baidu.com/item/REST/6330506">REST</a>（英文：<strong>Representational State Transfer</strong>，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。可以把它理解为一种软件架构风格或设计风格，而不是一个标准。</p><p>简单来说，RESTful风格就是把请求参数变成请求路径的一种风格。</p><ul><li><p>例如，传统的URL请求格式为:<code>http://.../queryltems?id=l</code> </p></li><li><p>而采用RESTful风格后，其URL请求为:<code>http://.../items/l</code> </p></li></ul><p>从上述两个请求中可以看出，RESTful风格中的URL将请求参数id=1变成了请求路径的一部分，并且URL中的queryltems也变成了items( RESTful风格中的URL不存在动词形式的路径，如queryltems表示查询订单，是一个动词，而items表示订单，为名词)。RESTful风格在HTIP请求中，使用put、delete、post和get方式分别对应添加、删除、修改和查询的操作。不过目前国内开发，还是只使用post和get方式来进行增删改查操作。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/c8177f3e6709c93d0961007c953df8dcd00054ad"></p><h2 id="理解RESTful"><a href="#理解RESTful" class="headerlink" title="理解RESTful"></a>理解RESTful</h2><blockquote><p>要理解RESTful架构，需要理解Representational State Transfer这个词组到底是什么意思，它的每一个词都有些什么涵义。</p></blockquote><p>REST 指的是一组架构<a href="https://baike.baidu.com/item/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6">约束条件</a>和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p><ul><li>资源与URI</li><li>统一资源接口</li><li>资源的表述</li><li>资源的链接</li><li>状态的转移</li></ul><h2 id="统一资源接口"><a href="#统一资源接口" class="headerlink" title="统一资源接口"></a>统一资源接口</h2><p>RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p><p>如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性，例如GET和HEAD请求都是安全的， 无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次， 结果总是一样的，后面的请求并不会产生比第一次更多的影响。</p><p><strong>下面列出了GET，DELETE，PUT和POST的典型用法:</strong></p><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><ul><li><p>安全且幂等</p></li><li><p>获取表示</p></li><li><p>变更时获取表示（缓存）</p></li><li><p>200（OK） - 表示已在响应中发出</p></li><li><p>204（无内容） - 资源有空表示</p></li><li><p>301（Moved Permanently） - 资源的URI已被更新</p></li><li><p>303（See Other） - 其他（如，负载均衡）</p></li><li><p>304（not modified）- 资源未更改（缓存）</p></li><li><p>400 （bad request）- 指代坏请求（如，参数错误）</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务端当前无法处理请求</p></li></ul><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><ul><li><p>不安全且不幂等</p></li><li><p>使用服务端管理的（自动产生）的实例号创建资源</p></li><li><p>创建子资源</p></li><li><p>部分更新资源</p></li><li><p>如果没有被修改，则不过更新资源（乐观锁）</p></li><li><p>200（OK）- 如果现有资源已被更改</p></li><li><p>201（created）- 如果新资源被创建</p></li><li><p>202（accepted）- 已接受处理请求但尚未完成（异步处理）</p></li><li><p>301（Moved Prermanently）- 资源的URI被更新</p></li><li><p>303（See Other）- 其他（如，负载均衡）</p></li><li><p>400（bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</p></li><li><p>415 （unsupported media type）- 接受到的表示不受支持</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务当前无法处理请求</p></li></ul><h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><ul><li><p>不安全但幂等</p></li><li><p>用客户端管理的实例号创建一个资源</p></li><li><p>通过替换的方式更新资源</p></li><li><p>如果未被修改，则更新资源（乐观锁）</p></li><li><p>200 （OK）- 如果已存在资源被更改</p></li><li><p>201 （created）- 如果新资源被创建</p></li><li><p>301（Moved Permanently）- 资源的URI已更改</p></li><li><p>303 （See Other）- 其他（如，负载均衡）</p></li><li><p>400 （bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</p></li><li><p>415 （unsupported media type）- 接受到的表示不受支持</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务当前无法处理请求</p></li></ul><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><ul><li><p>不安全但幂等</p></li><li><p>删除资源</p></li><li><p>200 （OK）- 资源已被删除</p></li><li><p>301 （Moved Permanently）- 资源的URI已更改</p></li><li><p>303 （See Other）- 其他，如负载均衡</p></li><li><p>400 （bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务端当前无法处理请求</p></li></ul><h2 id="实践中常见的问题"><a href="#实践中常见的问题" class="headerlink" title="实践中常见的问题:"></a>实践中常见的问题:</h2><blockquote><p>POST和PUT用于创建资源时有什么区别?</p></blockquote><p>POST和PUT在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。 例如为我的博文增加一个java的分类，生成的路径就是分类名/categories/java，那么就可以采用PUT方法。不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTful应用中就是这么做的。</p><p>我认为，这是因为rails默认使用服务端生成的ID作为URI的缘故，而不少人就是通过rails实践REST的，所以很容易造成这种误解。</p><blockquote><p>客户端不一定都支持这些HTTP方法吧?</p></blockquote><p>的确有这种情况，特别是一些比较古老的基于浏览器的客户端，只能支持GET和POST两种方法。</p><p>在实践上，客户端和服务端都可能需要做一些妥协。例如rails框架就支持通过隐藏参数_method=DELETE来传递真实的请求方法， 而像Backbone这样的客户端MVC框架则允许传递_method传输和设置X-HTTP-Method-Override头来规避这个问题。</p><blockquote><p>统一接口是否意味着不能扩展带特殊语义的方法?</p></blockquote><p>统一接口并不阻止你扩展方法，只要方法对资源的操作有着具体的、可识别的语义即可，并能够保持整个接口的统一性。</p><p>像WebDAV就对HTTP方法进行了扩展，增加了LOCK、UPLOCK等方法。而github的API则支持使用PATCH方法来进行issue的更新，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATCH &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;issues&#x2F;:number</span><br></pre></td></tr></table></figure><p>不过，需要注意的是，像PATCH这种不是HTTP标准方法的，服务端需要考虑客户端是否能够支持的问题。</p><blockquote><p>统一资源接口对URI有什么指导意义?</p></blockquote><p>统一资源接口要求使用标准的HTTP方法对资源进行操作，所以URI只应该来表示资源的名称，而不应该包括资源的操作。</p><p>通俗来说，URI不应该使用动作来描述。例如，下面是一些不符合统一接口要求的URI:</p><ul><li>GET /getUser/1</li><li>POST /createUser</li><li>PUT /updateUser/1</li><li>DELETE /deleteUser/1</li></ul><h2 id="资源的表述"><a href="#资源的表述" class="headerlink" title="资源的表述"></a>资源的表述</h2><ul><li><p>资源在外界的具体呈现，可以有多种表述(或成为表现、表示)形式，在客户端和服务端之间传送的也是资源的表述，而不是资源本身。 例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。</p></li><li><p>资源的表述包括数据和描述数据的元数据，例如，HTTP头”Content-Type” 就是这样一个元数据属性。</p></li></ul><p><em>那么客户端如何知道服务端提供哪种表述形式呢?</em></p><p>答案是可以通过HTTP内容协商，客户端可以通过Accept头请求一种特定格式的表述，服务端则通过Content-Type告诉客户端资源的表述形式。</p><p>看一个github为例子，请求某组织资源的json格式的表述形式:</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/291731048886033.jpg"></p><p>转xml格式的表述格式：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/291731045756062.jpg"></p><h2 id="RESTful应用案例–用户信息查询"><a href="#RESTful应用案例–用户信息查询" class="headerlink" title="RESTful应用案例–用户信息查询"></a>RESTful应用案例–用户信息查询</h2><p>本案例将采用RESTful风格的请求实现对用户信息的查询，同时返回JSON格式的数据。</p><p>其具体实现步骤如下。</p><p>( 1 )在控制器类UserController中，编写用户查询方法selectUser()，代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shaotongjie.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shaotongjie.po.User;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收页面请求的JSON数据，并返回JSON格式结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testJson</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 打印接收的JSON格式数据</span></span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">// 返回JSON格式的响应</span></span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/user/&#123;id&#125;&quot;,method=RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id=&quot;</span>+id);</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">if</span>(id.equals(<span class="string">&quot;1234&quot;</span>))&#123;    </span><br><span class="line">        user.setUsername(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，@RequestMapping(value=”/user/{id}”，method=Requesttv1ethod.GET)注解用于匹配请求路径(包括参数)和方式。其中value=”/user/{id}”表示可以匹配以”/user/{id}”结尾的请求，id为请求中的动态参数;method=RequestMethod.GET表示只接收GET方式的请求。方法中的@PathVariable(咽”)注解则用于接收并绑定请求参数，它可以将请求URL中的变量映射到方法的形参上，如果请求路径为”/user/{id}”，即请求参数中的id和方法形参名称id一样，贝IJ@PathVariable后面的”(lIidll)”可以省略。</p><p>(2 )在WebContent目录下，编写页面文件restful.jsp，在页面中使用AJAX方式通过输入的用户编号来查询用户信息，如下所示。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">     pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> </span><br><span class="line"><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;RESTful测试&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> </span><br><span class="line">    src=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/js/jquery-1.11.3.min.js&quot;</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="function">function <span class="title">search</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 获取输入的查询编号</span></span><br><span class="line"><span class="keyword">var</span> id = $(<span class="string">&quot;#number&quot;</span>).val();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url : <span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/user/&quot;</span>+id,</span><br><span class="line">type : <span class="string">&quot;GET&quot;</span>, </span><br><span class="line"><span class="comment">//定义回调响应的数据格式为JSON字符串,该属性可以省略</span></span><br><span class="line">dataType : <span class="string">&quot;json&quot;</span>,</span><br><span class="line"><span class="comment">//成功响应的结果</span></span><br><span class="line">success : function(data)&#123;</span><br><span class="line"><span class="keyword">if</span>(data.username != <span class="keyword">null</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;您查询的用户是：&quot;</span>+data.username);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;没有找到id为:&quot;</span>+id+<span class="string">&quot;的用户！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">         编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;number&quot;</span> id=<span class="string">&quot;number&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;搜索&quot;</span> onclick=<span class="string">&quot;search()&quot;</span> /&gt;</span><br><span class="line">    &lt;/form&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在请求路径中使用了RESTful风格的URL，并且定义了请求方式为GET。</p><p>将项目发布到Tomcat服务器并启动，在浏览器中访问地址<a href="http://localhost:8080/chapter14/restful.jsp">http://localhost:8080/chapter14/restful.jsp</a></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/restful%E6%B5%8B%E8%AF%95.png" alt="restful测试"></p><p>在输入框中输入编号”1234”后，单击”查询”按钮，程序正确执行后，浏览器会弹出用户信息窗口</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/restful%E6%B5%8B%E8%AF%951.png" alt="restful测试1"></p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keymap-win转mac</title>
      <link href="/2020/08/23/keymap-win%E8%BD%ACmac/"/>
      <url>/2020/08/23/keymap-win%E8%BD%ACmac/</url>
      
        <content type="html"><![CDATA[<h1 id="从-Windows-过度到-Mac-必备快捷键对照表"><a href="#从-Windows-过度到-Mac-必备快捷键对照表" class="headerlink" title="从 Windows 过度到 Mac 必备快捷键对照表"></a>从 Windows 过度到 Mac 必备快捷键对照表</h1><h2 id="Mac-键盘符号说明"><a href="#Mac-键盘符号说明" class="headerlink" title="Mac 键盘符号说明"></a>Mac 键盘符号说明</h2><ul><li><code>⌘</code> == <code>Command</code></li><li><code>⇧</code> == <code>Shift</code></li><li><code>⇪</code> == <code>Caps Lock</code></li><li><code>⌥</code> == <code>Option</code></li><li><code>⌃</code> == <code>Control</code></li><li><code>↩</code> == <code>Return/Enter</code></li><li><code>⌫</code> == <code>Delete</code></li><li><code>⌦</code> == <code>向前删除键（Fn+Delete）</code></li><li><code>↑</code> == <code>上箭头</code></li><li><code>↓</code> == <code>下箭头</code></li><li><code>←</code> == <code>左箭头</code></li><li><code>→</code> == <code>右箭头</code></li><li><code>⇞</code> == <code>Page Up（Fn+↑）</code></li><li><code>⇟</code> == <code>Page Down（Fn+↓）</code></li><li><code>Home</code> == <code>Fn + ←</code></li><li><code>End</code> == <code>Fn + →</code></li><li><code>⇥</code> == <code>右制表符（Tab键）</code></li><li><code>⇤</code> == <code>左制表符（Shift+Tab）</code></li><li><code>⎋</code> == <code>Escape (Esc)</code></li><li><code>⏏</code> == <code>电源开关键</code></li></ul><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F</kbd></td><td align="left">在当前文件进行文本查找</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>R</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>R</kbd></td><td align="left">在当前文件进行文本替换</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Z</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Z</kbd></td><td align="left">撤销</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Y</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Delete</kbd></td><td align="left">删除光标所在行 或 删除选中的行</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>D</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>D</kbd></td><td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>W</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>方向键上</kbd></td><td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>E</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>E</kbd></td><td align="left">显示最近打开的文件记录列表</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>O</kbd></td><td align="left">根据输入的 <strong>类名</strong> 查找类文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>J</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>J</kbd></td><td align="left">插入自定义动态代码模板</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>P</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>P</kbd></td><td align="left">方法参数提示显示</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>U</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>U</kbd></td><td align="left">前往当前光标所在的方法的父类的方法 / 接口定义</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>B</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>B</kbd></td><td align="left">进入光标所在的方法/变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>/</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>/</kbd></td><td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F1</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F1</kbd></td><td align="left">在光标所在的错误代码处显示错误信息</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F11</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F3</kbd></td><td align="left">选中文件 / 文件夹，使用助记符设定 / 取消书签</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F12</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F12</kbd></td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Space</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Space</kbd></td><td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code></td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Delete</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Fn</kbd>+ Delete</td><td align="left">删除光标后面的单词或是中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>BackSpace</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Delete</kbd></td><td align="left">删除光标前面的单词或是中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">定位到对应数值的书签位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>加号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>加号</kbd></td><td align="left">展开代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>减号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>减号</kbd></td><td align="left">折叠代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>左键单击</kbd></td><td align="left">在打开的文件标题上，弹出该文件路径</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>左方向键</kbd></td><td align="left">光标跳转到当前单词 / 中文句的左侧开头位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>右方向键</kbd></td><td align="left">光标跳转到当前单词 / 中文句的右侧开头位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>前方向键</kbd></td><td align="left">预设中没有该快捷键</td><td align="left">等效于鼠标滚轮向前效果</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>后方向键</kbd></td><td align="left">预设中没有该快捷键</td><td align="left">等效于鼠标滚轮向后效果</td></tr></tbody></table><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Alt</kbd> + <kbd>`</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>V</kbd></td><td align="left">显示版本控制常用操作菜单弹出层</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>F1</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F1</kbd></td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>F7</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F7</kbd></td><td align="left">查询所选对象/变量被引用</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Enter</kbd></td><td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Insert</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>N</kbd></td><td align="left">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>左方向键</kbd></td><td align="left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>右方向键</kbd></td><td align="left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>前方向键</kbd></td><td align="left">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>后方向键</kbd></td><td align="left">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Shift</kbd> + <kbd>F11</kbd></td><td align="left"><kbd>Command + F3</kbd></td><td align="left">弹出书签显示层</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>Tab</kbd></td><td align="left"><kbd>Shift + Tab</kbd></td><td align="left">取消缩进</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Shift + Enter</kbd></td><td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Shift + 左键单击</kbd></td><td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr></tbody></table><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>L</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>L</kbd></td><td align="left">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>O</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Option</kbd> + <kbd>O</kbd></td><td align="left">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>T</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>T</kbd></td><td align="left">对选中的代码弹出环绕选项弹出层</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>逗号</kbd></td><td align="left">打开 IntelliJ IDEA 系统设置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>Enter</kbd></td><td align="left">光标所在行上空出一行，光标定位到新行</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>左方向键</kbd></td><td align="left">退回到上一个操作的地方</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>右方向键</kbd></td><td align="left">前进到上一个操作的地方</td></tr></tbody></table><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td align="left">根据输入内容查找整个项目 或 指定目录内文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td align="left">自动将下一行合并到当前行末尾</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td align="left">取消撤销</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>W</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>方向键下</kbd></td><td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></td><td align="left">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td align="left">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td align="left">复制当前文件磁盘路径到剪贴板</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left">跳转到类型声明处</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>/</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>/</kbd></td><td align="left">代码块注释</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td align="left">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td align="left">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td align="left">展开所有代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td align="left">折叠所有代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td align="left">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td align="left">编辑器最大化</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left">自动结束代码，行末自动添加分号</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td align="left">退回到上次修改的地方</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">快速添加指定数值的书签</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left">把光标放在某个类变量上，按此快捷键可以直接定位到该类中</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left">选择 / 添加 task</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td align="left">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left">移动光标所在行向上移动</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left">移动光标所在行向下移动</td></tr></tbody></table><h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>V</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Option</kbd> + <kbd>V</kbd></td><td align="left">无格式黏贴</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>;</kbd></td><td align="left">打开当前项目设置</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>F2</kbd></td><td align="left"><kbd>F2</kbd></td><td align="left">跳转到下一个高亮错误 或 警告位置</td></tr><tr><td align="left"><kbd>F4</kbd></td><td align="left"><kbd>F4</kbd></td><td align="left">编辑源</td></tr><tr><td align="left"><kbd>F11</kbd></td><td align="left"><kbd>F3</kbd></td><td align="left">添加书签</td></tr><tr><td align="left"><kbd>F12</kbd></td><td align="left"><kbd>F12</kbd></td><td align="left">回到前一个工具窗口</td></tr><tr><td align="left"><kbd>Tab</kbd></td><td align="left"><kbd>Tab</kbd></td><td align="left">缩进</td></tr><tr><td align="left"><kbd>ESC</kbd></td><td align="left"><kbd>ESC</kbd></td><td align="left">从工具窗口进入代码文件窗口</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js-07-typeof-null-undefined</title>
      <link href="/2020/08/23/js-07-typeof-null-undefined/"/>
      <url>/2020/08/23/js-07-typeof-null-undefined/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-typeof-null-和-undefined"><a href="#JavaScript-typeof-null-和-undefined" class="headerlink" title="JavaScript typeof, null, 和 undefined"></a>JavaScript typeof, null, 和 undefined</h3><ul><li>JavaScript typeof, null, undefined, valueOf()。<h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3></li><li>使用 typeof 操作符来检测变量的数据类型<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typeof &quot;John&quot;                // 返回 string</span><br><span class="line">typeof 3.14                  // 返回 number</span><br><span class="line">typeof false                 // 返回 boolean</span><br><span class="line">typeof [1,2,3,4]             // 返回 object</span><br><span class="line">typeof &#123;name:&#x27;John&#x27;, age:34&#125; // 返回 object</span><br></pre></td></tr></table></figure></li></ul><p><strong>在JavaScript中，数组是一种特殊的对象类型。 因此 typeof [1,2,3,4] 返回 object。</strong></p><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><ul><li>在 JavaScript 中 null 表示 “什么都没有”。</li><li>null是一个只有一个值的特殊类型。表示一个空对象引用。</li><li>用 typeof 检测 null 返回是object。<blockquote><p>var person = null;           // 值为 null(空), 但类型为对象</p></blockquote></li><li>var person = undefined;     // 值为 undefined, 类型为 undefined<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3></li><li>在 JavaScript 中, undefined 是一个没有设置值的变量。</li><li>typeof 一个没有值的变量会返回 undefined。<blockquote><p>var person;                  // 值为 undefined(空), 类型是undefined</p></blockquote></li><li>任何变量都可以通过设置值为 undefined 来清空。 类型为 undefined.<h3 id="undefined-和-null-的区别"><a href="#undefined-和-null-的区别" class="headerlink" title="undefined 和 null 的区别"></a>undefined 和 null 的区别</h3></li><li>null 和 undefined 的值相等，但类型不等：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typeof undefined             // undefined</span><br><span class="line">typeof null                  // object</span><br><span class="line">null === undefined           // false</span><br><span class="line">null == undefined            // true</span><br></pre></td></tr></table></figure></li></ul><p>1、定义</p><ul><li>（1）undefined：是所有没有赋值变量的默认值，自动赋值。</li><li>（2）null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。<br>2、何时使用null?</li></ul><blockquote><p>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null。</p></blockquote><p>3、null 与 undefined 的异同点是什么呢？</p><ul><li><p>共同点：都是原始类型，保存在栈中变量本地。</p></li><li><p>不同点：</p></li></ul><p>（1）undefined——表示变量声明过但并未赋过值。</p><p>它是所有未赋值变量默认值，例如：</p><p>var a;    // a 自动被赋值为 undefined<br>（2）null——表示一个变量将来可能指向一个对象。</p><p>一般用于主动释放指向对象的引用，例如：</p><p>var emps = [‘ss’,’nn’];<br>emps = null;     // 释放指向数组的引用<br>4、延伸——垃圾回收站</p><blockquote><p>它是专门释放对象内存的一个程序。</p></blockquote><p> （1）在底层，后台伴随当前程序同时运行；引擎会定时自动调用垃圾回收期；<br> （2）总有一个对象不再被任何变量引用时，才释放。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-04-break和continue</title>
      <link href="/2020/08/23/js-04-break%E5%92%8Ccontinue/"/>
      <url>/2020/08/23/js-04-break%E5%92%8Ccontinue/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-break-和-continue-语句"><a href="#JavaScript-break-和-continue-语句" class="headerlink" title="JavaScript break 和 continue 语句"></a>JavaScript break 和 continue 语句</h3><ul><li>break 语句用于跳出循环。</li><li>continue 用于跳过循环中的一个迭代。</li></ul><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><ul><li>break 语句可用于跳出循环。</li><li>continue 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">for (i=0;i<span class="tag">&lt;<span class="name">10;i++)</span></span></span><br><span class="line"><span class="tag">&#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">if</span> (<span class="attr">i</span>==<span class="string">3)</span></span></span><br><span class="line"><span class="tag">    &#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">break</span>;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><ul><li>continue 语句中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。<br>该例子跳过了值 3：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">实例</span><br><span class="line">for (i=0;i<span class="tag">&lt;<span class="name">=10;i++)</span></span></span><br><span class="line"><span class="tag">&#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">if</span> (<span class="attr">i</span>==<span class="string">3)</span> <span class="attr">continue</span>;</span></span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JavaScript-标签"><a href="#JavaScript-标签" class="headerlink" title="JavaScript 标签"></a>JavaScript 标签</h3><ul><li>continue 语句（带有或不带标签引用）只能用在循环中。</li><li>break 语句（不带标签引用），只能用在循环或 switch 中。</li><li>通过标签引用，break 语句可用于跳出任何 JavaScript 代码块：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    cars=[<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Ford&quot;</span>];</span></span><br><span class="line">    list:&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(cars[<span class="number">0</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(cars[<span class="number">1</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(cars[<span class="number">2</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span></span><br><span class="line"><span class="javascript">        <span class="keyword">break</span> list;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(cars[<span class="number">3</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(cars[<span class="number">4</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(cars[<span class="number">5</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>); </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">BMW</span><br><span class="line">Volvo</span><br><span class="line">Saab</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-06-判断语句</title>
      <link href="/2020/08/23/js-06-%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/08/23/js-06-%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-if…else-语句"><a href="#JavaScript-if…else-语句" class="headerlink" title="JavaScript if…else 语句"></a>JavaScript if…else 语句</h3><blockquote><p>条件语句用于基于不同的条件来执行不同的动作。</p></blockquote><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li>通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。</li></ul><blockquote><p>在 JavaScript 中，我们可使用以下条件语句：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码</span><br><span class="line">if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</span><br><span class="line">if...else if....else 语句- 使用该语句来选择多个代码块之一来执行</span><br><span class="line">switch 语句 - 使用该语句来选择多个代码块之一来执行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JavaScript-switch-语句"><a href="#JavaScript-switch-语句" class="headerlink" title="JavaScript switch 语句"></a>JavaScript switch 语句</h3><blockquote><p>switch 语句用于基于不同的条件来执行不同的动作。</p></blockquote><h3 id="JavaScript-switch-语句-1"><a href="#JavaScript-switch-语句-1" class="headerlink" title="JavaScript switch 语句"></a>JavaScript switch 语句</h3><blockquote><p>请使用 switch 语句来选择要执行的多个代码块之一。</p></blockquote><ul><li>语法<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(n)</span><br><span class="line">&#123;</span><br><span class="line">    case 1:</span><br><span class="line">        执行代码块 1</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        执行代码块 2</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        与 case 1 和 case 2 不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>工作原理：<ol><li>首先设置表达式 n（通常是一个变量）。</li><li>随后表达式的值会与结构中的每个 case 的值做比较。</li><li>如果存在匹配，则与该 case 关联的代码块会被执行。</li><li>请使用 break 来阻止代码自动地向下一个 case 运行。</li></ol></li></ul><blockquote><p>实例:显示今天的星期名称。请注意 Sunday=0, Monday=1, Tuesday=2, 等等：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var d=new Date().getDay(); </span><br><span class="line">switch (d) </span><br><span class="line">&#123; </span><br><span class="line">  case 0:x=&quot;今天是星期日&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 1:x=&quot;今天是星期一&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 2:x=&quot;今天是星期二&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 3:x=&quot;今天是星期三&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 4:x=&quot;今天是星期四&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 5:x=&quot;今天是星期五&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 6:x=&quot;今天是星期六&quot;; </span><br><span class="line">  break; </span><br><span class="line">&#125;</span><br><span class="line">x 的运行结果：</span><br><span class="line"></span><br><span class="line">今天是星期二</span><br></pre></td></tr></table></figure><h3 id="default-关键词"><a href="#default-关键词" class="headerlink" title="default 关键词"></a>default 关键词</h3><blockquote><p>请使用 default 关键词来规定匹配不存在时做的事情：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">如果今天不是星期六或星期日，则会输出默认的消息：</span><br><span class="line"></span><br><span class="line">var d=new Date().getDay();</span><br><span class="line">switch (d)</span><br><span class="line">&#123;</span><br><span class="line">    case 6:x=&quot;今天是星期六&quot;;</span><br><span class="line">    break;</span><br><span class="line">    case 0:x=&quot;今天是星期日&quot;;</span><br><span class="line">    break;</span><br><span class="line">    default:</span><br><span class="line">    x=&quot;期待周末&quot;;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=x;</span><br><span class="line">x 的运行结果：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">期待周末</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-05-字符串</title>
      <link href="/2020/08/23/js-05-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2020/08/23/js-05-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h3><blockquote><p>JavaScript 字符串用于存储和处理文本。<br>JavaScript 字符串<br>字符串可以存储一系列字符，如 “John Doe”。</p></blockquote><ul><li>字符串可以是插入到引号中的任何字符。你可以使用单引号或双引号：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">var carname = &quot;Volvo XC60&quot;;</span><br><span class="line">var carname = &#x27;Volvo XC60&#x27;;</span><br><span class="line">你可以使用索引位置来访问字符串中的每个字符：</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line">var character = carname[7];</span><br><span class="line">字符串的索引从 0 开始，这意味着第一个字符索引值为 [0],第二个为 [1], 以此类推。</span><br></pre></td></tr></table></figure><ul><li>你可以在字符串中使用引号，字符串中的引号不要与字符串的引号相同:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">var answer = &quot;It&#x27;s alright&quot;;</span><br><span class="line">var answer = &quot;He is called &#x27;Johnny&#x27;&quot;;</span><br><span class="line">var answer = &#x27;He is called &quot;Johnny&quot;&#x27;;</span><br><span class="line">你也可以在字符串添加转义字符来使用引号：</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line">var x = &#x27;It\&#x27;s alright&#x27;;</span><br><span class="line">var y = &quot;He is called \&quot;Johnny\&quot;&quot;;</span><br></pre></td></tr></table></figure><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><ul><li>可以使用内置属性 length 来计算字符串的长度：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">var txt = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">var sln = txt.length;       //26</span><br></pre></td></tr></table></figure><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3>在 JavaScript 中，字符串写在单引号或双引号中。<br>因为这样，以下实例 JavaScript 无法解析：<br>“We are the so-called “Vikings” from the north.”<br>字符串 “We are the so-called “ 被截断。</li></ul><p>如何解决以上的问题呢？可以使用反斜杠 () 来转义 “Vikings” 字符串中的双引号，如下:</p><p> “We are the so-called &quot;Vikings&quot; from the north.”<br> 反斜杠是一个转义字符。 转义字符将特殊字符转换为字符串字符：</p><p>转义字符 () 可以用于转义撇号，换行，引号，等其他特殊字符。</p><p>下表中列举了在字符串中可以使用转义字符转义的特殊字符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\&#x27;单引号</span><br><span class="line">\&quot;双引号</span><br><span class="line">\\反斜杠</span><br><span class="line">\n换行</span><br><span class="line">\r回车</span><br><span class="line">\ttab(制表符)</span><br><span class="line">\b退格符</span><br><span class="line">\f换页符</span><br></pre></td></tr></table></figure><h3 id="字符串可以是对象"><a href="#字符串可以是对象" class="headerlink" title="字符串可以是对象"></a>字符串可以是对象</h3><ul><li>通常， JavaScript 字符串是原始值，可以使用字符创建： var firstName = “John”</li><li>但我们也可以使用 new 关键字将字符串定义为一个对象： var firstName = new String(“John”)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">var x = &quot;John&quot;;</span><br><span class="line">var y = new String(&quot;John&quot;); </span><br><span class="line">typeof x // 返回 String</span><br><span class="line">typeof y // 返回 Object</span><br></pre></td></tr></table></figure></li></ul><p><strong>不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x = &quot;John&quot;;             </span><br><span class="line">var y = new String(&quot;John&quot;);</span><br><span class="line">(x === y) // 结果为 false，因为 x 是字符串，y 是对象</span><br></pre></td></tr></table></figure><ul><li>=== 为绝对相等，即数据类型与值都必须相等。</li></ul><h3 id="用于字符串的-运算符"><a href="#用于字符串的-运算符" class="headerlink" title="用于字符串的 + 运算符"></a>用于字符串的 + 运算符</h3><blockquote><ul><li>运算符用于把文本值或字符串变量加起来（连接起来）。<br>如需把两个或多个字符串变量连接起来，请使用 + 运算符。</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">如需把两个或多个字符串变量连接起来，请使用 + 运算符：</span><br><span class="line"></span><br><span class="line">txt1=&quot;What a very&quot;;</span><br><span class="line">txt2=&quot;nice day&quot;;</span><br><span class="line">txt3=txt1+txt2;</span><br><span class="line">txt3 运算结果如下:</span><br><span class="line"></span><br><span class="line">What a verynice day</span><br></pre></td></tr></table></figure><ul><li><p>要想在两个字符串之间增加空格，需要把空格插入一个字符串之中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">txt1=&quot;What a very &quot;;</span><br><span class="line">txt2=&quot;nice day&quot;;</span><br><span class="line">txt3=txt1+txt2;</span><br><span class="line">在以上语句执行后，变量 txt3包含的值是：</span><br><span class="line">What a very nice day</span><br></pre></td></tr></table></figure></li><li><p>或者把空格插入表达式中：:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">txt1=&quot;What a very&quot;;</span><br><span class="line">txt2=&quot;nice day&quot;;</span><br><span class="line">txt3=txt1+&quot; &quot;+txt2;</span><br><span class="line">在以上语句执行后，变量txt3 包含的值是：</span><br><span class="line"></span><br><span class="line">What a very nice day</span><br></pre></td></tr></table></figure></li><li><p>对字符串和数字进行加法运算</p></li><li><p>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串，如下实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">x&#x3D;5+5;</span><br><span class="line">y&#x3D;&quot;5&quot;+5;</span><br><span class="line">z&#x3D;&quot;Hello&quot;+5;</span><br><span class="line">x,y, 和 z 输出结果为:</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">55</span><br><span class="line">Hello5</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-03-对象</title>
      <link href="/2020/08/23/js-03-%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/08/23/js-03-%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><blockquote><p>JavaScript 对象是拥有属性和方法的数据。</p></blockquote><ul><li>在 JavaScript 中，对象是非常重要的，当你理解了对象，就可以了解 JavaScript 。</li><li>JavaScript 对象是变量的容器。</li><li>JavaScript 对象是属性变量的容器。</li><li>真实生活中的对象，属性和方法</li><li>真实生活中，一辆汽车是一个对象。</li><li>对象有它的属性，如重量和颜色等，方法有启动停止等:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象也是一个变量，但对象可以包含多个值（多个变量）。</span><br><span class="line">var car = &#123;type:&quot;Fiat&quot;, model:500, color:&quot;white&quot;&#125;;</span><br></pre></td></tr></table></figure><ul><li>对象键值对的写法类似于：<ol><li>PHP 中的关联数组</li><li>Python 中的字典</li><li>C 语言中的哈希表</li><li>Java 中的哈希映射</li><li>Ruby 和 Perl 中的哈希表<h3 id="JavaScript-函数语法"><a href="#JavaScript-函数语法" class="headerlink" title="JavaScript 函数语法"></a>JavaScript 函数语法</h3></li></ol></li><li>JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击这个按钮，来调用带参数的函数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction(&#x27;Harry Potter&#x27;,&#x27;Wizard&#x27;)&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">name,job</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;Welcome &quot;</span> + name + <span class="string">&quot;, the &quot;</span> + job);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="带有返回值的函数"><a href="#带有返回值的函数" class="headerlink" title="带有返回值的函数"></a>带有返回值的函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">有时，我们会希望函数将值返回调用它的地方。</span><br><span class="line">通过使用 return 语句就可以实现。</span><br><span class="line">在使用 return 语句时，函数会停止执行，并返回指定的值。</span><br><span class="line">语法</span><br><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">    var x=5;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line">上面的函数会返回值 5。</span><br><span class="line">注意： 整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。</span><br><span class="line"></span><br><span class="line">函数调用将被返回值取代：</span><br><span class="line">var myVar=myFunction();</span><br><span class="line">myVar 变量的值是 5，也就是函数 &quot;myFunction()&quot; 所返回的值。</span><br><span class="line"></span><br><span class="line">即使不把它保存为变量，您也可以使用返回值：</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=myFunction();</span><br><span class="line">&quot;demo&quot; 元素的 innerHTML 将成为 5，也就是函数 &quot;myFunction()&quot; 所返回的值。</span><br><span class="line"></span><br><span class="line">您可以使返回值基于传递到函数中的参数：</span><br><span class="line">实例</span><br><span class="line">计算两个数字的乘积，并返回结果：</span><br><span class="line">function myFunction(a,b)</span><br><span class="line">&#123;</span><br><span class="line">    return a*b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=myFunction(4,3);</span><br><span class="line">&quot;demo&quot; 元素的 innerHTML 将是：</span><br><span class="line">12</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a,b)</span><br><span class="line">&#123;</span><br><span class="line">    if (a&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    x=a+b</span><br><span class="line">&#125;</span><br><span class="line">如果 a 大于 b，则上面的代码将退出函数，并不会计算 a 和 b 的总和。</span><br></pre></td></tr></table></figure></li></ul><h3 id="局部-JavaScript-变量"><a href="#局部-JavaScript-变量" class="headerlink" title="局部 JavaScript 变量"></a>局部 JavaScript 变量</h3><ul><li>在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。<br>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。<br>只要函数运行完毕，本地变量就会被删除。</li></ul><h3 id="全局-JavaScript-变量-不要随便使用全局变量"><a href="#全局-JavaScript-变量-不要随便使用全局变量" class="headerlink" title="全局 JavaScript 变量    (不要随便使用全局变量)"></a>全局 JavaScript 变量    (不要随便使用全局变量)</h3><ul><li>在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。<h3 id="JavaScript-变量的生存期"><a href="#JavaScript-变量的生存期" class="headerlink" title="JavaScript 变量的生存期"></a>JavaScript 变量的生存期</h3><blockquote><p>JavaScript 变量的生命期从它们被声明的时间开始。</p></blockquote></li><li><em>局部变量会在函数运行以后被删除。</em></li><li><em>全局变量会在页面关闭后被删除。</em></li></ul><h3 id="向未声明的-JavaScript-变量分配值"><a href="#向未声明的-JavaScript-变量分配值" class="headerlink" title="向未声明的 JavaScript 变量分配值"></a>向未声明的 JavaScript 变量分配值</h3><ul><li><p>如果您把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p></li><li><p>这条语句：<br>carname=”Volvo”;将声明 window 的一个属性 carname。</p></li></ul><blockquote><p>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var var1 = 1; // 不可配置全局属性</span><br><span class="line">var2 = 2; // 没有使用 var 声明，可配置全局属性</span><br><span class="line"></span><br><span class="line">console.log(this.var1); // 1</span><br><span class="line">console.log(window.var1); // 1</span><br><span class="line"></span><br><span class="line">delete var1; // false 无法删除</span><br><span class="line">console.log(var1); //1</span><br><span class="line"></span><br><span class="line">delete var2; </span><br><span class="line">console.log(delete var2); // true</span><br><span class="line">console.log(var2); // 已经删除 报错变量未定义</span><br></pre></td></tr></table></figure><h3 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h3><blockquote><p>作用域是可访问变量的集合。</p></blockquote><h3 id="JavaScript-作用域-1"><a href="#JavaScript-作用域-1" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h3><ol><li>在 JavaScript 中, 对象和函数同样也是变量。</li><li>在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。</li><li>JavaScript 函数作用域: 作用域在函数内修改。<h3 id="JavaScript-局部作用域"><a href="#JavaScript-局部作用域" class="headerlink" title="JavaScript 局部作用域"></a>JavaScript 局部作用域</h3></li></ol><ul><li>变量在函数内声明，变量为局部作用域。</li><li>局部变量：只能在函数内部访问。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">// 此处不能调用 carName 变量(函数外)</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    var carName = &quot;Volvo&quot;;</span><br><span class="line">    // 函数内可调用 carName 变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。<br>局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。<br>JavaScript 全局变量</p></blockquote><h3 id="变量在函数外定义，即为全局变量。"><a href="#变量在函数外定义，即为全局变量。" class="headerlink" title="变量在函数外定义，即为全局变量。"></a>变量在函数外定义，即为全局变量。</h3></li></ul><blockquote><p>全局变量有全局作用域: 网页中所有脚本和函数均可使用。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">var carName = &quot; Volvo&quot;;</span><br><span class="line">// 此处可调用 carName 变量</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    // 函数内可调用 carName 变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">以下例子中 carName 在函数内，但是为全局变量。</span><br><span class="line"></span><br><span class="line">// 此处可调用 carName 变量</span><br><span class="line"> </span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    carName = &quot;Volvo&quot;;</span><br><span class="line">    // 此处可调用 carName 变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>你的全局变量，或者函数，可以覆盖 window 对象的变量或者函数。<br>  局部变量，包括 window 对象可以覆盖全局变量和函数。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-02-基本语法</title>
      <link href="/2020/08/23/js-02-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/08/23/js-02-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章-JavaScript-语法"><a href="#第二章-JavaScript-语法" class="headerlink" title="第二章 JavaScript 语法"></a>第二章 JavaScript 语法</h2><blockquote><p>JavaScript 是一个脚本语言。它是一个轻量级，但功能强大的编程语言。</p></blockquote><ul><li>程序中调试是测试，查找及减少bug(错误)的过程。</li><li>一个好的编程习惯是，在代码开始处，统一对需要的变量进行声明。</li><li>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</li></ul><h3 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h3><blockquote><p>在编程语言中，一般固定值称为字面量，如 3.14。数字（Number）字面量 可以是整数或者是小数，或者是科学计数(e)。<br>3.14,1001,123e5</p></blockquote><ul><li>字符串（String）字面量 可以使用单引号或双引号:”John Doe”或者’John Doe’</li><li>数组（Array）字面量 定义一个数组：[40, 100, 1, 5, 25, 10]</li><li>对象（Object）字面量 定义一个对象：{firstName:”John”, lastName:”Doe”, age:50, eyeColor:”blue”}</li><li>函数（Function）字面量 定义一个函数：function myFunction(a, b) { return a * b;}</li></ul><h3 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h3><blockquote><p>在编程语言中，变量用于存储数据值。JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值：<br>var x, length   x = 5  length = 6</p></blockquote><ul><li>变量可以通过变量名访问。在指令式语言中，变量通常是可变的。字面量是一个恒定的值。</li><li>变量是一个名称。字面量是一个值。<h3 id="JavaScript-关键字"><a href="#JavaScript-关键字" class="headerlink" title="JavaScript 关键字"></a>JavaScript 关键字</h3><blockquote><p>JavaScript 同样保留了一些关键字，这些关键字在当前的语言版本中并没有使用，但在以后 JavaScript 扩展中会用到。以下是 JavaScript 中最​​重要的保留字（按字母顺序）：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">abstractelseinstanceofsuper</span><br><span class="line">booleanenumintswitch</span><br><span class="line">breakexportinterfacesynchronized</span><br><span class="line">byteextendsletthis</span><br><span class="line">casefalselongthrow</span><br><span class="line">catchfinalnativethrows</span><br><span class="line">charfinallynewtransient</span><br><span class="line">classfloatnulltrue</span><br><span class="line">constforpackagetry</span><br><span class="line">continuefunctionprivatetypeof</span><br><span class="line">debuggergotoprotectedvar</span><br><span class="line">defaultifpublicvoid</span><br><span class="line">deleteimplementsreturnvolatile</span><br><span class="line">doimportshortwhile</span><br><span class="line">doubleinstaticwith</span><br></pre></td></tr></table></figure><h3 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h3></li></ul><ol><li>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</li><li>引用数据类型：对象(Object)、数组(Array)、函数(Function)。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x;               // x 为 undefined</span><br><span class="line">var x = 5;           // 现在 x 为数字</span><br><span class="line">var x = &quot;John&quot;;      // 现在 x 为字符串</span><br><span class="line">var length = 16;                                  // Number 通过数字字面量赋值</span><br><span class="line">var points = x * 10;                              // Number 通过表达式字面量赋值</span><br><span class="line">var lastName = &quot;Johnson&quot;;                         // String 通过字符串字面量赋值</span><br><span class="line">var lastName = &#x27;Johnson&#x27;;                         //字符串可以是引号中的任意文本。您可以使用单引号或双引号：</span><br><span class="line">var cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];              // Array  通过数组字面量赋值</span><br><span class="line">var person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;&#125;;  // Object 通过对象字面量赋值</span><br></pre></td></tr></table></figure><h3 id="JavaScript-布尔"><a href="#JavaScript-布尔" class="headerlink" title="JavaScript 布尔"></a>JavaScript 布尔</h3><blockquote><p>布尔（逻辑）只能有两个值：true 或 false。<br>var x=true;<br>var y=false;</p></blockquote></li></ol><h3 id="JavaScript-数组"><a href="#JavaScript-数组" class="headerlink" title="JavaScript 数组"></a>JavaScript 数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">下面的代码创建名为 cars 的数组：</span><br><span class="line">var cars=new Array();</span><br><span class="line">cars[0]=&quot;Saab&quot;;</span><br><span class="line">cars[1]=&quot;Volvo&quot;;</span><br><span class="line">cars[2]=&quot;BMW&quot;;</span><br><span class="line"> 或者 (condensed array):</span><br><span class="line"> var cars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);</span><br></pre></td></tr></table></figure><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><ul><li>Undefined 这个值表示变量不含有值。</li><li>可以通过将变量的值设置为 null 来清空变量。</li></ul><h3 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当您声明新变量时，可以使用关键词 &quot;new&quot; 来声明其类型：</span><br><span class="line">var carname = new String;</span><br><span class="line">var x = new Number;</span><br><span class="line">var y = new Boolean;</span><br><span class="line">var cars = new Array;</span><br><span class="line">var person= new Object;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-01-入门</title>
      <link href="/2020/08/23/js-01-%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/23/js-01-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>JavaScript 与 Java 是两种完全不同的语言，无论在概念上还是设计上。<br>  Java（由 Sun 发明）是更复杂的编程语言。ECMA-262 是 JavaScript 标准的官方名称。JavaScript 由 Brendan Eich 发明。它于 1995 年出现在 Netscape 中（该浏览器已停止更新），并于 1997 年被 ECMA（一个标准协会）采纳。</p></blockquote><h3 id="1-JavaScript引用方式"><a href="#1-JavaScript引用方式" class="headerlink" title="1. JavaScript引用方式"></a>1. JavaScript引用方式</h3><p>JavaScript的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> JavaScript标识放置<span class="tag">&lt;<span class="name">Head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">Head</span>&gt;</span>头部之间<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ODiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;context&quot;</span>);</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(ODiv); <span class="comment">// 打印出null</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;context&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>嵌入式 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span>javascript语句;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>javascript语句;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">- 外链式  </span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>行内式  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert&#x27;hello&#x27;;&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><script>console.log('你好！');</script></li></ul><script>  document.write('你好！');</script><script>  document.write('<script>alert(123);<\/script>');</script><h3 id="2-JavaScript-输出"><a href="#2-JavaScript-输出" class="headerlink" title="2. JavaScript 输出"></a>2. JavaScript 输出</h3><ul><li>使用 window.alert() 弹出警告框。</li><li>使用 document.write() 方法将内容写到 HTML 文档中。</li><li>使用 innerHTML 写入到 HTML 元素。</li><li>使用 console.log() 写入到浏览器的控制台。</li></ul><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h3><ul><li>JavaScript：改变 HTML 内容<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">x=document.getElementById(&quot;demo&quot;);  // 找到元素</span><br><span class="line">x.innerHTML=&quot;Hello JavaScript!&quot;;    // 改变内容</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>JavaScript：改变 HTML 图像</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  alert(<span class="number">220</span> + <span class="number">230</span>);             <span class="comment">// 输出结果：450</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="number">2</span> * <span class="number">3</span> + <span class="number">25</span> / <span class="number">5</span> - <span class="number">1</span>);    <span class="comment">// 输出结果：10</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="number">2</span> * (<span class="number">3</span> + <span class="number">25</span>) / <span class="number">5</span> - <span class="number">1</span>);  <span class="comment">// 输出结果：10.2</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;Hello&#x27;</span>);               <span class="comment">// 单引号字符串</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&quot;Hello&quot;</span>);               <span class="comment">// 双引号字符串</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;22&#x27;</span> == <span class="string">&#x27;22&#x27;</span>);          <span class="comment">// 输出结果：true</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;22&#x27;</span> == <span class="string">&#x27;33&#x27;</span>);          <span class="comment">// 输出结果：false</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;220&#x27;</span> + <span class="string">&#x27;230&#x27;</span>);                 <span class="comment">// 输出结果：220230</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;220 + 230 = &#x27;</span> + <span class="number">220</span> + <span class="number">230</span>);    <span class="comment">// 输出结果：220 + 230 = 220230</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;220 + 230 = &#x27;</span> + (<span class="number">220</span> + <span class="number">230</span>));  <span class="comment">// 输出结果：220 + 230 = 450</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  if (22 &gt; 33) &#123;</span><br><span class="line"><span class="javascript">    alert(<span class="literal">true</span>);            <span class="comment">// 判断成立时执行此语句</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="literal">false</span>);           <span class="comment">// 判断不成立时执行此语句</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> num1 = <span class="number">22</span>;            <span class="comment">// 使用名称为num1的变量保存数字22</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> num2 = <span class="number">33</span>;            <span class="comment">// 使用名称为num2的变量保存数字33</span></span></span><br><span class="line"><span class="javascript">  alert(num1 + num2);       <span class="comment">// 输出结果：55</span></span></span><br><span class="line"><span class="javascript">  alert(num1 - num2);       <span class="comment">// 输出结果：-11</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> temp = num1;          <span class="comment">// 将变量num1的值赋给变量temp</span></span></span><br><span class="line"><span class="javascript">  num1 = num2;              <span class="comment">// 将变量num2的值赋给变量num1</span></span></span><br><span class="line"><span class="javascript">  num2 = temp;              <span class="comment">// 将变量temp的值赋给变量num2</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;num1 = &#x27;</span> + num1 + <span class="string">&#x27;, num2 = &#x27;</span> + num2);    <span class="comment">// 输出结果：num1 = 33, num2 = 22</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.console;               <span class="comment">// 访问window对象的console属性</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.document;              <span class="comment">// 访问window对象的document属性</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.alert(<span class="string">&#x27;test&#x27;</span>);         <span class="comment">// 调用window对象的alert()方法</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.prompt(<span class="string">&#x27;test&#x27;</span>);        <span class="comment">// 调用window对象的prompt()方法</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.console.log(<span class="string">&#x27;test&#x27;</span>);         <span class="comment">// 调用console对象的log()方法</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.document.write(<span class="string">&#x27;test&#x27;</span>);      <span class="comment">// 调用document对象的write()方法</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>);    <span class="comment">// 根据元素id创建元素对象</span></span></span><br><span class="line"><span class="javascript">    alert(test.innerHTML);                         <span class="comment">// 通过InnerHTML属性获取元素内容，输出结果：Hello</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> str = <span class="string">&#x27;apple&#x27;</span>;                 <span class="comment">// 定义一个字符串</span></span></span><br><span class="line"><span class="javascript">  alert(str.length);                 <span class="comment">// 获取字符串长度，输出结果：5</span></span></span><br><span class="line"><span class="javascript">  alert(str.toUpperCase());          <span class="comment">// 获取转换大写后的结果，输出结果：APPLE</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">&#x27;aa&#x27;</span>.toUpperCase());         <span class="comment">// 直接调用字符串的成员方法，输出结果：AA</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> stu = &#123;&#125;;                      <span class="comment">// 创建一个名称为stu的空对象</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 添加属性</span></span></span><br><span class="line"><span class="javascript">  stu.name = <span class="string">&#x27;小明&#x27;</span>;                 <span class="comment">// 为stu对象添加name属性</span></span></span><br><span class="line"><span class="javascript">  stu.gender = <span class="string">&#x27;男&#x27;</span>;                 <span class="comment">// 为stu对象添加gender属性</span></span></span><br><span class="line"><span class="javascript">  stu.age = <span class="number">18</span>;                      <span class="comment">// 为stu对象添加age属性</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 访问属性</span></span></span><br><span class="line"><span class="javascript">  alert(stu.name);                   <span class="comment">// 访问stu对象的name属性，输出结果：小明</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 添加方法</span></span></span><br><span class="line"><span class="javascript">  stu.introduce = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;，今年&#x27;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;岁。&#x27;</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="javascript">  <span class="comment">// 调用方法</span></span></span><br><span class="line"><span class="javascript">  alert(stu.introduce());            <span class="comment">// 输出结果：我叫小明，今年18岁。</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>case01-6 函数的定义与调用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>计算1到100个数相加和<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">     /* </span><br><span class="line">      1:函数的定义</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">funName</span> (<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3.</span>...</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//函数体</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      2:函数调用</span><br><span class="line">      funName(1,2,3);</span><br><span class="line">      */</span><br><span class="line"><span class="javascript">      <span class="comment">//1 定义一个getSum()函数</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">getSum</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span><br><span class="line">              sum += i;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.write(<span class="string">&#x27;1到100个数相加和是：&#x27;</span>+sum);</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">//2 调用getSum()函数</span></span></span><br><span class="line">      getSum();</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>case01-7 自定义函数与调用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      /* 定义函数</span><br><span class="line"><span class="javascript">       <span class="function"><span class="keyword">function</span> <span class="title">funName</span> (<span class="params">a,b</span>) </span>&#123;</span></span><br><span class="line">          函数体</span><br><span class="line">        &#125;</span><br><span class="line">        在调用函数的时候，传入的参数叫做实参</span><br><span class="line">        funName(5, 6);</span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 求n-m之间所有数的和</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// n,m  形式参数(形参)</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">n, m</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt;= m; i++) &#123;</span></span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(n+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;之间的数相加为：&#x27;</span>+sum);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        getSum(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// n=5,m=10 sum=0+5+6+7+8+9+10==45</span></span></span><br><span class="line"><span class="javascript">        getSum(<span class="number">100</span>,<span class="number">1000</span>);<span class="comment">// n=100,m=1000 sum=0+100+101+102+...+1000=495550</span></span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>case01-8 改变网页皮肤</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">value</span>=<span class="string">&quot;设为红色&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;color(&#x27;red&#x27;)&quot;</span>&gt;</span>设为红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">value</span>=<span class="string">&quot;设为黄色&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;color(&#x27;yellow&#x27;)&quot;</span>&gt;</span>设为黄色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">value</span>=<span class="string">&quot;设为蓝色&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;color(&#x27;blue&#x27;)&quot;</span>&gt;</span>设为蓝色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">value</span>=<span class="string">&quot;设为绿色&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;color(&#x27;green&#x27;)&quot;</span>&gt;</span>设为绿色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">color</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.style.backgroundColor = e</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>case01-9 验证用户名和密码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 输入用户名和密码，如果正确，给出弹出框提示“登录成功”，如果不对，提示“输入错误”</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> userName = prompt(<span class="string">&quot;请输入用户名&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> passWord = prompt(<span class="string">&quot;请输入密码&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(userName ==<span class="string">&#x27;admin&#x27;</span> &amp;&amp; passWord ==<span class="string">&#x27;123456&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&#x27;登录成功&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&#x27;用户名或密码输入错误&#x27;</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>case01-10 输出用户输入的信息</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> msg = prompt(<span class="string">&quot;请输入您的信息&quot;</span>); <span class="comment">// 输入框</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(msg);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>case01-11 计算年龄小游戏</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;disp_year()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入您的出生年份&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">disp_year</span>(<span class="params"></span>)</span></span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> year=prompt(<span class="string">&quot;请输入您的出生年份&quot;</span>,<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="javascript">   <span class="keyword">if</span> (year!=<span class="literal">null</span> &amp;&amp; year!=<span class="string">&quot;&quot;</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&#x27;您今年&#x27;</span>+(<span class="number">2019</span>-year)+<span class="string">&#x27;岁&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/23/hello-world/"/>
      <url>/2020/08/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h2><ul><li>可以hexo g -d 提交的仓库 ，或者hexo g 然后 git add . /git commit - “XX” / git push</li></ul><p>// 底部音乐</p><div style="position:absolute; bottom: 0; right: 0;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=29393038&auto=1&height=66"></iframe></div><p>//右上角Github图标<br><a href="https://github.com/nateshao" class="github-corner" aria-label="View source on GitHub"><br>    <svg width="80"         height="80"         viewBox="0 0 250 250"         style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"         aria-hidden="true"><br>        <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><br>        <path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"                                                                                                                                                                                                                                                                                                    fill="currentColor"                                                                                                                                                                                                                                                                                                    class="octo-body"><br>        </path><br>    </svg><br></a></p><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-12-k8s部署SpringCloud</title>
      <link href="/2020/08/22/docker-12-k8s%E9%83%A8%E7%BD%B2SpringCloud/"/>
      <url>/2020/08/22/docker-12-k8s%E9%83%A8%E7%BD%B2SpringCloud/</url>
      
        <content type="html"><![CDATA[<h1 id="K8S部署SpringCloud"><a href="#K8S部署SpringCloud" class="headerlink" title="K8S部署SpringCloud"></a>K8S部署SpringCloud</h1><a id="more"></a><h1 id="编译应用"><a href="#编译应用" class="headerlink" title="编译应用"></a>编译应用</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前提安装了docker-compose</span><br><span class="line"><span class="comment"># 安装相关软件</span></span><br><span class="line">yum install -y git java  maven</span><br><span class="line"> </span><br><span class="line"><span class="comment"># clone 源码</span></span><br><span class="line">git clone https://gitee.com/nateshao/pig.git</span><br><span class="line"><span class="comment"># 编译源码</span></span><br><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker-compose build</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">docker tag pig-mysql:latest <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-mysql:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker tag pig-register:latest <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-register:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker tag pig-gateway:latest <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-gateway:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker tag pig-upms:latest <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-upms:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker tag pig-auth:latest <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-auth:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker tag pig-monitor:latest <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-monitor:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker tag pig-codegen:latest <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-codegen:<span class="number">2.6</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="推送私服"><a href="#推送私服" class="headerlink" title="推送私服"></a>推送私服</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-mysql:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-register:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-gateway:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-upms:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-auth:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-monitor:<span class="number">2.6</span>.<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/library/pig-codegen:<span class="number">2.6</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="部署顺序"><a href="#部署顺序" class="headerlink" title="部署顺序"></a>部署顺序</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pig-mysql</span></span><br><span class="line"> </span><br><span class="line"> 环境变量: MYSQL_ROOT_PASSWORD: root</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pig-redis</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pig-register</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pig-gateway</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pig-upms</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pig-auth</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pig-monitor</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># pig-codegen</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Shiro</title>
      <link href="/2020/08/22/SpringBoot%E6%95%B4%E5%90%88Shiro/"/>
      <url>/2020/08/22/SpringBoot%E6%95%B4%E5%90%88Shiro/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><p>什么是 Shiro</p><p>官网：<a href="http://shiro.apache.org/">http://shiro.apache.org/</a></p><p>是一款主流的 Java 安全框架，不依赖任何容器，可以运行在 Java SE 和 Java EE 项目中，它的主要作用是对访问系统的用户进行身份认证、授权、会话管理、加密等操作。</p><p>Shiro 就是用来解决安全管理的系统化框架。</p><h1 id="Shiro-核心组件"><a href="#Shiro-核心组件" class="headerlink" title="Shiro 核心组件"></a>Shiro 核心组件</h1><p>用户、角色、权限</p><p>会给角色赋予权限，给用户赋予角色</p><p>1、UsernamePasswordToken，Shiro 用来封装用户登录信息，使用用户的登录信息来创建令牌 Token。</p><p>2、SecurityManager，Shiro 的核心部分，负责安全认证和授权。</p><p>3、Suject，Shiro 的一个抽象概念，包含了用户信息。</p><p>4、Realm，开发者自定义的模块，根据项目的需求，验证和授权的逻辑全部写在 Realm 中。</p><p>5、AuthenticationInfo，用户的角色信息集合，认证时使用。</p><p>6、AuthorzationInfo，角色的权限信息集合，授权时使用。</p><p>7、DefaultWebSecurityManager，安全管理器，开发者自定义的 Realm 需要注入到 DefaultWebSecurityManager 进行管理才能生效。</p><p>8、ShiroFilterFactoryBean，过滤器工厂，Shiro 的基本运行机制是开发者定制规则，Shiro 去执行，具体的执行操作就是由 ShiroFilterFactoryBean 创建的一个个 Filter 对象来完成。</p><p>Shiro 的运行机制如下图所示。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/12.png" alt="12"></p><h1 id="Spring-Boot-整合-Shiro"><a href="#Spring-Boot-整合-Shiro" class="headerlink" title="Spring Boot 整合 Shiro"></a>Spring Boot 整合 Shiro</h1><p>1、创建 Spring Boot 应用，集成 Shiro 及相关组件，pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、自定义 Shiro 过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccoutRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        Account account = accountService.findByUsername(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(account != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(account,account.getPassword(),getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;accoutRealm&quot;)</span> AccoutRealm accoutRealm)</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(accoutRealm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccoutRealm <span class="title">accoutRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccoutRealm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写认证和授权规则：</p><blockquote><p>认证过滤器</p></blockquote><p>anon：无需认证。</p><p>authc：必须认证。</p><p>authcBasic：需要通过 HTTPBasic 认证。</p><p>user：不一定通过认证，只要曾经被 Shiro 记录即可，比如：记住我。</p><blockquote><p>授权过滤器</p></blockquote><p>perms：必须拥有某个权限才能访问。</p><p>role：必须拥有某个角色才能访问。</p><p>port：请求的端口必须是指定值才可以。</p><p>rest：请求必须基于 RESTful，POST、PUT、GET、DELETE。</p><p>ssl：必须是安全的 URL 请求，协议 HTTPS。</p><p>创建 3 个页面，main.html、manage.html、administrator.html</p><p>访问权限如下：</p><p>1、必须登录才能访问 main.html</p><p>2、当前用户必须拥有 manage 授权才能访问 manage.html</p><p>3、当前用户必须拥有 administrator 角色才能访问 administrator.html</p><blockquote><p>Shiro 整合 Thymeleaf</p></blockquote><p>1、pom.xml 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置类添加 ShiroDialect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.account != null&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.account.username&#125;+&#x27;欢迎回来！&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;manage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;manage&quot;</span>&gt;</span>manage<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasRole</span>=<span class="string">&quot;administrator&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/administrator&quot;</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础28-巩固</title>
      <link href="/2020/08/19/Java%E5%9F%BA%E7%A1%8028-%E5%B7%A9%E5%9B%BA/"/>
      <url>/2020/08/19/Java%E5%9F%BA%E7%A1%8028-%E5%B7%A9%E5%9B%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/Java%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.bmp" alt="Java代码的三个阶段"></h1><pre><code>1. Junit单元测试2. 反射3. 注解</code></pre><h2 id="Junit单元测试："><a href="#Junit单元测试：" class="headerlink" title="Junit单元测试："></a>Junit单元测试：<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB.bmp" alt="测试分类"></h2><pre><code>* 测试分类：    1. 黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。    2. 白盒测试：需要写代码的。关注程序具体的执行流程。* Junit使用：白盒测试    * 步骤：        1. 定义一个测试类(测试用例)            * 建议：                * 测试类名：被测试的类名Test        CalculatorTest                * 包名：xxx.xxx.xx.test        cn.itcast.test        2. 定义测试方法：可以独立运行            * 建议：                * 方法名：test测试的方法名        testAdd()                  * 返回值：void                * 参数列表：空参        3. 给方法加@Test        4. 导入junit依赖环境    * 判定结果：        * 红色：失败        * 绿色：成功        * 一般我们会使用断言操作来处理结果            * Assert.assertEquals(期望的结果,运算的结果);    * 补充：        * @Before:            * 修饰的方法会在测试方法之前被自动执行        * @After:            * 修饰的方法会在测试方法执行之后自动被执行</code></pre><h2 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h2><pre><code>* 框架：半成品软件。可以在框架的基础上进行软件开发，简化编码* 反射：将类的各个组成部分封装为其他对象，这就是反射机制    * 好处：        1. 可以在程序运行过程中，操作这些对象。        2. 可以解耦，提高程序的可扩展性。* 获取Class对象的方式：    1. Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回Class对象        * 多用于配置文件，将类名定义在配置文件中。读取文件，加载类    2. 类名.class：通过类名的属性class获取        * 多用于参数的传递    3. 对象.getClass()：getClass()方法在Object类中定义着。        * 多用于对象的获取字节码的方式。    * 结论：        同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。* Class对象功能：    * 获取功能：        1. 获取成员变量们            * Field[] getFields() ：获取所有public修饰的成员变量            * Field getField(String name)   获取指定名称的 public修饰的成员变量            * Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符            * Field getDeclaredField(String name)          2. 获取构造方法们            * Constructor&lt;?&gt;[] getConstructors()              * Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)              * Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)              * Constructor&lt;?&gt;[] getDeclaredConstructors()          3. 获取成员方法们：            * Method[] getMethods()              * Method getMethod(String name, 类&lt;?&gt;... parameterTypes)              * Method[] getDeclaredMethods()              * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)          4. 获取全类名                * String getName()  * Field：成员变量    * 操作：        1. 设置值            * void set(Object obj, Object value)          2. 获取值            * get(Object obj)         3. 忽略访问权限修饰符的安全检查            * setAccessible(true):暴力反射* Constructor:构造方法    * 创建对象：        * T newInstance(Object... initargs)          * 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法* Method：方法对象    * 执行方法：        * Object invoke(Object obj, Object... args)      * 获取方法名称：        * String getName:获取方法名* 案例：    * 需求：写一个&quot;框架&quot;，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法        * 实现：            1. 配置文件            2. 反射        * 步骤：            1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中            2. 在程序中加载读取配置文件            3. 使用反射技术来加载类文件进内存            4. 创建对象            5. 执行方法</code></pre><h2 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h2><pre><code>* 概念：说明程序的。给计算机看的* 注释：用文字描述程序的。给程序员看的* 定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。* 概念描述：    * JDK1.5之后的新特性    * 说明程序的    * 使用注解：@注解名称</code></pre><p>​<br>    * 作用分类：<br>        ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】<br>        ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br>        ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p><pre><code>* JDK中预定义的一些注解    * @Override    ：检测被该注解标注的方法是否是继承自父类(接口)的    * @Deprecated：该注解标注的内容，表示已过时    * @SuppressWarnings：压制警告        * 一般传递参数all  @SuppressWarnings(&quot;all&quot;)* 自定义注解    * 格式：        元注解        public @interface 注解名称&#123;            属性列表;        &#125;    * 本质：注解本质上就是一个接口，该接口默认继承Annotation接口        * public interface MyAnno extends java.lang.annotation.Annotation &#123;&#125;    * 属性：接口中的抽象方法        * 要求：            1. 属性的返回值类型有下列取值                * 基本数据类型                * String                * 枚举                * 注解                * 以上类型的数组            2. 定义了属性，在使用时需要给属性赋值                1. 如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。                2. 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。                3. 数组赋值时，值使用&#123;&#125;包裹。如果数组中只有一个值，则&#123;&#125;可以省略    * 元注解：用于描述注解的注解        * @Target：描述注解能够作用的位置            * ElementType取值：                * TYPE：可以作用于类上                * METHOD：可以作用于方法上                * FIELD：可以作用于成员变量上        * @Retention：描述注解被保留的阶段            * @Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到        * @Documented：描述注解是否被抽取到api文档中        * @Inherited：描述注解是否被子类继承* 在程序使用(解析)注解：获取注解中定义的属性值    1. 获取注解定义的位置的对象  （Class，Method,Field）    2. 获取指定的注解        * getAnnotation(Class)        //其实就是在内存中生成了一个该注解接口的子类实现对象                public class ProImpl implements Pro&#123;                    public String className()&#123;                        return &quot;cn.itcast.annotation.Demo1&quot;;                    &#125;                    public String methodName()&#123;                        return &quot;show&quot;;                    &#125;                &#125;    3. 调用注解中的抽象方法获取配置的属性值* 案例：简单的测试框架* 小结：    1. 以后大多数时候，我们会使用注解，而不是自定义注解    2. 注解给谁用？        1. 编译器        2. 给解析程序用    3. 注解不是程序的一部分，可以理解为注解就是一个标签</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能测试</title>
      <link href="/2020/08/18/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/08/18/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="性能测试常见分类"><a href="#性能测试常见分类" class="headerlink" title="性能测试常见分类"></a>性能测试常见分类</h2><p><strong>性能测试（狭义）</strong></p><blockquote><p>性能测试方法是通过模拟生产运行的业务压力量和使用场景组合，测试系统的性能是否满足生产性能要求。通俗地说，这种方法就是要在特定的运行条件下验证系统的能力状态。</p></blockquote><p>特点：</p><ol><li><p>这种方法的主要目的是验证系统是否有系统宣称具有的能力。</p></li><li><p>这种方法要事先了解被测试系统经典场景，并具有确定的性能目标。</p></li><li><p>这种方法要求在已经确定的环境下运行。</p></li><li><p>也就是说，这种方法是对系统性能已经有了解的前提，并对需求有明确的目标，并在已经确定的环境下进行的。</p></li></ol><h2 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h2><blockquote><p> 通过在被测系统上不断加压，直到性能指标达到极限，例如“响应时间”超过预定指标或某种资源已经达到饱和状态。</p></blockquote><p>特点：</p><ol><li><p>这种性能测试方法的主要目的是找到系统处理能力的极限。</p></li><li><p>这种性能测试方法需要在给定的测试环境下进行，通常也需要考虑被测试系统的业务压力量和典型场景、使得测试结果具有业务上的意义。</p></li><li><p>这种性能测试方法一般用来了解系统的性能容量，或是配合性能调优来使用。<br> 也就是说，这种方法是对一个系统持续不段的加压，看你在什么时候已经超出“我的要求”或系统崩溃。</p></li></ol><h2 id="压力测试（强度测试）"><a href="#压力测试（强度测试）" class="headerlink" title="压力测试（强度测试）"></a>压力测试（强度测试）</h2><blockquote><p>压力测试方法测试系统在一定饱和状态下，例如cpu、内存在饱和使用情况下，系统能够处理的会话能力，以及系统是否会出现错误</p></blockquote><p>特点：</p><ol><li><p>这种性能测试方法的主要目的是检查系统处于压力性能下时，应用的表现。</p></li><li><p>这种性能测试一般通过模拟负载等方法，使得系统的资源使用达到较高的水平。</p></li><li><p>这种性能测试方法一般用于测试系统的稳定性。</p></li><li><p>也就是说，这种测试是让系统处在很大强度的压力之下，看系统是否稳定，哪里会出问题。</p></li></ol><h2 id="并发测试"><a href="#并发测试" class="headerlink" title="并发测试"></a>并发测试</h2><blockquote><p>并发测试方法通过模拟用户并发访问，测试多用户并发访问同一个应用、同一个模块或者数据记录时是否存在死锁或其者他性能问题。</p></blockquote><p>特点：</p><ol><li>这种性能测试方法的主要目的是发现系统中可能隐藏的并发访问时的问题。</li><li>这种性能测试方法主要关注系统可能存在的并发问题，例如系统中的内存泄漏、线程锁和资源争用方面的问题。</li><li>这种性能测试方法可以在开发的各个阶段使用需要相关的测试工具的配合和支持。</li><li>也就是说，这种测试关注点是多个用户同时（并发）对一个模块或操作进行加压。 </li></ol><h2 id="配置测试"><a href="#配置测试" class="headerlink" title="配置测试"></a>配置测试</h2><blockquote><p>配置测试方法通过对被测系统的软\硬件环境的调整，了解各种不同对系统的性能影响的程度，从而找到系统各项资源的最优分配原则。</p></blockquote><p>特点：</p><ol><li><p>这种性能测试方法的主要目的是了解各种不同因素对系统性能影响的程度，从而判断出最值得进行的调优操作。</p></li><li><p>这种性能测试方法一般在对系统性能状况有初步了解后进行。</p></li><li><p>这种性能测试方法一般用于性能调优和规划能力。</p></li><li><p>也就是说，这种测试关注点是“微调”，通过对软硬件的不段调整，找出这他们的最佳状态，使系统达到一个最强的状态。</p></li></ol><h2 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h2><blockquote><p>在给系统加载一定业务压力的情况下，使系统运行一段时间，以此检测系统是否稳定。</p></blockquote><p>特点：</p><ol><li><p>这种性能测试方法的主要目的是验证是否支持长期稳定的运行。</p></li><li><p>这种性能测试方法需要在压力下持续一段时间的运行。（2~3天）</p></li><li><p>测试过程中需要关注系统的运行状况。</p></li><li><p>也就是说，这种测试的关注点是“稳定”，不需要给系统太大的压力，只要系统能够长期处于一个稳定的状态。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-09-写Dockerfile并上传DockerHub</title>
      <link href="/2020/08/17/docker-09-%E5%86%99Dockerfile%E5%B9%B6%E4%B8%8A%E4%BC%A0DockerHub/"/>
      <url>/2020/08/17/docker-09-%E5%86%99Dockerfile%E5%B9%B6%E4%B8%8A%E4%BC%A0DockerHub/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/docker%E6%88%90%E5%8A%9F%E6%88%AA%E5%9B%BE.png" alt="docker成功截图"></p><h1 id="教你写Dockerfile并上传DockerHub"><a href="#教你写Dockerfile并上传DockerHub" class="headerlink" title="教你写Dockerfile并上传DockerHub"></a>教你写Dockerfile并上传DockerHub</h1><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/curl.png"></p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos <span class="comment">#制作base image 基础镜像，尽量使用官方的image作为base image</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">&quot;1.0&quot;</span> <span class="comment">#容器元信息，帮助信息，Metadata，类似于代码注释</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;shaotongjie335@163.com&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#对于复杂的RUN命令，避免无用的分层，多条命令用反斜线换行，合成一条命令！</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum update &amp;&amp; yum install -y vim \</span></span><br><span class="line"><span class="bash">    Python-dev <span class="comment">#反斜线换行</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root <span class="comment">#相当于linux的cd命令，改变目录，尽量使用绝对路径！！！不要用RUN cd</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /<span class="built_in">test</span> <span class="comment"># 如果没有就自动创建</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.tar.gz /  <span class="comment"># 添加到根目录并解压</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hello <span class="built_in">test</span>/  <span class="comment"># 等同于上述ADD效果</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">ADD</span><span class="bash">与COPY</span></span><br><span class="line">   - 优先使用<span class="keyword">COPY</span><span class="bash">命令</span></span><br><span class="line">    -<span class="keyword">ADD</span><span class="bash">除了COPY功能还有解压功能</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ENV</span> <span class="comment"># 环境变量，尽可能使用ENV增加可维护性</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_VERSION <span class="number">5.6</span> <span class="comment"># 设置一个mysql常量</span></span><br></pre></td></tr></table></figure><h2 id="编写DockerFile文件"><a href="#编写DockerFile文件" class="headerlink" title="编写DockerFile文件"></a>编写DockerFile文件</h2><p>vim DockerFile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.17</span>.<span class="number">6</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> index.html /usr/share/nginx/html</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line"> </span><br><span class="line">docker build . -t hello-k8s:<span class="number">0.0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/hello-k8s.png"></p><p>那么如何将构建好的镜像上传到中央仓库呢？</p><h2 id="注册DockerHub账号和密码"><a href="#注册DockerHub账号和密码" class="headerlink" title="注册DockerHub账号和密码"></a>注册<a href="%5Bhttps://hub.docker.com%5D(https://hub.docker.com/)">DockerHub</a>账号和密码</h2><p>可以在<a href="%5B%5Bwww.**yopmail**.com%5D(https://www.baidu.com/link?url=9wkV_ao-n0C-L7zoZjW3v078RjoLD_wbpn5RXCu5nJGCuTZFiCeB_kdweIfqJXO8&wd=&eqid=84883aac0028b04a000000035f315276)">YOPmail</a> 注册临时邮箱</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/docker-login.png" alt="docker-login"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册docker id后，在linux中登录dockerhub</span></span><br><span class="line">docker login</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注意要保证image名字 必须是  仓库名/镜像名称:版本</span></span><br><span class="line">docker tag hello-k8s:<span class="number">0.0</span>.<span class="number">1</span> pig4cloud/hello-k8s:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 推送docker image到dockerhub</span></span><br><span class="line">docker push pig4cloud/hello-k8s:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 去dockerhub中检查镜像</span></span><br><span class="line"><span class="comment"># 先删除本地镜像，然后再测试下载pull 镜像文件</span></span><br><span class="line">docker rmi pig4cloud/hello-k8s:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">docker pull pig4cloud/hello-k8s:<span class="number">0.0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.png" alt="上传成功"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F.png" alt="下载成功"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-10-搭建企业镜像私服</title>
      <link href="/2020/08/17/docker-10-%E6%90%AD%E5%BB%BA%E4%BC%81%E4%B8%9A%E9%95%9C%E5%83%8F%E7%A7%81%E6%9C%8D/"/>
      <url>/2020/08/17/docker-10-%E6%90%AD%E5%BB%BA%E4%BC%81%E4%B8%9A%E9%95%9C%E5%83%8F%E7%A7%81%E6%9C%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建企业镜像私服Harbor"><a href="#搭建企业镜像私服Harbor" class="headerlink" title="搭建企业镜像私服Harbor"></a>搭建企业镜像私服Harbor</h1><a id="more"></a><h1 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.png" alt="1"></h1><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/2.png" alt="2"></p><p>1，准备docker-compose</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改文件名</span></span><br><span class="line">[root@zsh ~]<span class="comment"># mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line">[root@zsh ~]<span class="comment"># chmod +x //usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zsh ~]<span class="comment"># docker-compose version</span></span><br><span class="line">docker-compose version <span class="number">1.25</span>.<span class="number">0</span>, build <span class="number">0</span>a186604</span><br><span class="line">docker-py version: <span class="number">4.1</span>.<span class="number">0</span></span><br><span class="line">CPython version: <span class="number">3.7</span>.<span class="number">4</span></span><br><span class="line">OpenSSL version: OpenSSL <span class="number">1.1</span>.<span class="number">0</span>l  <span class="number">10</span> Sep <span class="number">2019</span></span><br><span class="line">[root@zsh ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前提条件</span></span><br><span class="line"> </span><br><span class="line">已安装docker-compose</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解压harbor 离线包</span></span><br><span class="line">tar -zxvf harbor-offline-installer-v1.<span class="number">9.3</span>.tgz</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 harbor.yml hostname配置</span></span><br><span class="line">vim harbor.yml</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行安装</span></span><br><span class="line">    sh install.sh</span><br><span class="line">    </span><br><span class="line">    账号：admin</span><br><span class="line">    密码：Harbor12345</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E4%BF%AE%E6%94%B9ip.png" alt="修改ip"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/33333.png" alt="成功"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/55555.png" alt="55555"></p><h1 id="Docker配置私服"><a href="#Docker配置私服" class="headerlink" title="Docker配置私服"></a>Docker配置私服</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 docker 接入私服</span></span><br><span class="line"> </span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span> : [<span class="string">&quot;172.17.0.130&quot;</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line"> </span><br><span class="line">systemctl restart docker</span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker-compose start</span></span><br><span class="line">Starting log         ... done</span><br><span class="line">Starting registry    ... done</span><br><span class="line">Starting registryctl ... done</span><br><span class="line">Starting postgresql  ... done</span><br><span class="line">Starting portal      ... done</span><br><span class="line">Starting redis       ... done</span><br><span class="line">Starting core        ... done</span><br><span class="line">Starting jobservice  ... done</span><br><span class="line">Starting proxy       ... done</span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h1 id="公开私有"><a href="#公开私有" class="headerlink" title="公开私有"></a>公开私有</h1><h1 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录</span></span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker login 122.51.23.194</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: Harbor12345</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上传至公开库</span></span><br><span class="line">docker tag nginx:latest <span class="number">122.51</span>.<span class="number">23.194</span>/nateshao-pub/nginx:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/nateshao-pub/nginx:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#上传至私有库</span></span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker tag mysql 122.51.23.194/nateshao-private/mysql:0.0.1</span></span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker push 122.51.23.194/nateshao-private/mysql:0.0.1</span></span><br><span class="line">The push refers to repository [<span class="number">122.51</span>.<span class="number">23.194</span>/nateshao-private/mysql]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/21.png" alt="21"></p><h2 id="上传私有nateshao-private"><a href="#上传私有nateshao-private" class="headerlink" title="上传私有nateshao-private"></a>上传私有nateshao-private</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E8%A7%86%E9%A2%91.png" alt="视频"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-11-Rancker来了</title>
      <link href="/2020/08/17/docker-11-Rancher%E6%9D%A5%E4%BA%86/"/>
      <url>/2020/08/17/docker-11-Rancher%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建企业镜像私服Harbor"><a href="#搭建企业镜像私服Harbor" class="headerlink" title="搭建企业镜像私服Harbor"></a>搭建企业镜像私服Harbor</h1><a id="more"></a><h1 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.png" alt="1"></h1><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/2.png" alt="2"></p><p>1，准备docker-compose</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改文件名</span></span><br><span class="line">[root@zsh ~]<span class="comment"># mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line">[root@zsh ~]<span class="comment"># chmod +x //usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zsh ~]<span class="comment"># docker-compose version</span></span><br><span class="line">docker-compose version <span class="number">1.25</span>.<span class="number">0</span>, build <span class="number">0</span>a186604</span><br><span class="line">docker-py version: <span class="number">4.1</span>.<span class="number">0</span></span><br><span class="line">CPython version: <span class="number">3.7</span>.<span class="number">4</span></span><br><span class="line">OpenSSL version: OpenSSL <span class="number">1.1</span>.<span class="number">0</span>l  <span class="number">10</span> Sep <span class="number">2019</span></span><br><span class="line">[root@zsh ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前提条件</span></span><br><span class="line"> </span><br><span class="line">已安装docker-compose</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解压harbor 离线包</span></span><br><span class="line">tar -zxvf harbor-offline-installer-v1.<span class="number">9.3</span>.tgz</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 harbor.yml hostname配置</span></span><br><span class="line">vim harbor.yml</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行安装</span></span><br><span class="line">    sh install.sh</span><br><span class="line">    </span><br><span class="line">    账号：admin</span><br><span class="line">    密码：Harbor12345</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E4%BF%AE%E6%94%B9ip.png" alt="修改ip"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/33333.png" alt="成功"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/55555.png" alt="55555"></p><h1 id="Docker配置私服"><a href="#Docker配置私服" class="headerlink" title="Docker配置私服"></a>Docker配置私服</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 docker 接入私服</span></span><br><span class="line"> </span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span> : [<span class="string">&quot;172.17.0.130&quot;</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line"> </span><br><span class="line">systemctl restart docker</span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker-compose start</span></span><br><span class="line">Starting log         ... done</span><br><span class="line">Starting registry    ... done</span><br><span class="line">Starting registryctl ... done</span><br><span class="line">Starting postgresql  ... done</span><br><span class="line">Starting portal      ... done</span><br><span class="line">Starting redis       ... done</span><br><span class="line">Starting core        ... done</span><br><span class="line">Starting jobservice  ... done</span><br><span class="line">Starting proxy       ... done</span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h1 id="公开私有"><a href="#公开私有" class="headerlink" title="公开私有"></a>公开私有</h1><h1 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录</span></span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker login 122.51.23.194</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: Harbor12345</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上传至公开库</span></span><br><span class="line">docker tag nginx:latest <span class="number">122.51</span>.<span class="number">23.194</span>/nateshao-pub/nginx:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">docker push <span class="number">122.51</span>.<span class="number">23.194</span>/nateshao-pub/nginx:<span class="number">0.0</span>.<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#上传至私有库</span></span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker tag mysql 122.51.23.194/nateshao-private/mysql:0.0.1</span></span><br><span class="line">[root@VM_0_16_centos harbor]<span class="comment"># docker push 122.51.23.194/nateshao-private/mysql:0.0.1</span></span><br><span class="line">The push refers to repository [<span class="number">122.51</span>.<span class="number">23.194</span>/nateshao-private/mysql]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/21.png" alt="21"></p><h2 id="上传私有nateshao-private"><a href="#上传私有nateshao-private" class="headerlink" title="上传私有nateshao-private"></a>上传私有nateshao-private</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E8%A7%86%E9%A2%91.png" alt="视频"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试-01-基础知识</title>
      <link href="/2020/08/17/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95-01-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/08/17/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95-01-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li><p>了解项目开发中为什么要采用接口 </p></li><li><p>了解接口测试课程学习大纲 </p></li></ol><h2 id="为什么要学习接口测试"><a href="#为什么要学习接口测试" class="headerlink" title="为什么要学习接口测试"></a>为什么要学习接口测试</h2><h2 id="1-1-项目开发中为什么要采用接口？"><a href="#1-1-项目开发中为什么要采用接口？" class="headerlink" title="1.1 项目开发中为什么要采用接口？"></a>1.1 项目开发中为什么要采用接口？</h2><ol><li>开发效率和质量 </li><li>方便与第三方交互 </li><li>维护便捷(后台代码修改，接口无需改变) <h2 id="1-2-什么是软件接口？"><a href="#1-2-什么是软件接口？" class="headerlink" title="1.2 什么是软件接口？"></a>1.2 什么是软件接口？</h2><blockquote><p>说明：一个数据访问地址，一个规范交互标准，对指定数据进行（增删改查） </p></blockquote><h2 id="1-3-总结："><a href="#1-3-总结：" class="headerlink" title="1.3 总结："></a>1.3 总结：</h2></li></ol><blockquote><p>软件项目开发模式大多数都采用接口了，那我们作为软件测试人员要学接口</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试-02-Jmeter</title>
      <link href="/2020/08/17/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95-02-Jmeter/"/>
      <url>/2020/08/17/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95-02-Jmeter/</url>
      
        <content type="html"><![CDATA[<h1 id="Jmeter-介绍"><a href="#Jmeter-介绍" class="headerlink" title="Jmeter 介绍"></a>Jmeter 介绍</h1><h1 id="1-Jmeter-是什么？"><a href="#1-Jmeter-是什么？" class="headerlink" title="1. Jmeter 是什么？"></a>1. Jmeter 是什么？</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><blockquote><p>Jmeter：是Apche公司使用Java平台开发的一款测试工具。</p></blockquote><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">接口测试</span><br><span class="line">性能测试：内在 ---&gt; 程序的算法 (程序运行的时间效率)</span><br><span class="line">压力测试：外在 ---&gt; 外在负载  (用户量)</span><br><span class="line">Web自动化测试</span><br><span class="line">数据库测试</span><br><span class="line">JAVA程序测试</span><br></pre></td></tr></table></figure><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开源、免费</span><br><span class="line">支持多协议：http https ftp ftps</span><br><span class="line">小巧</span><br><span class="line">功能强大</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.jpg"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/2.jpg"></p><h2 id="1-5-缺点"><a href="#1-5-缺点" class="headerlink" title="1.5 缺点"></a>1.5 缺点</h2><blockquote><ol><li><p>不支持IP欺骗</p></li><li><p>不支持前端测试。使用JMeter无法验证JS程序，也无法验证页面UI，所以要须要和Selenium配合来完成</p></li></ol><p>Web2.0应用的测试</p></blockquote><h2 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6 总结"></a>1.6 总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JMeter概念</span><br><span class="line">JMeter作用</span><br><span class="line">JMeter优点</span><br><span class="line">JMeter缺点</span><br></pre></td></tr></table></figure><h2 id="2-了解：配置-JMeter-运行环境（-JDK-、-JRE-、-JVM-）"><a href="#2-了解：配置-JMeter-运行环境（-JDK-、-JRE-、-JVM-）" class="headerlink" title="2. 了解：配置 JMeter 运行环境（ JDK 、 JRE 、 JVM ）"></a>2. 了解：配置 JMeter 运行环境（ JDK 、 JRE 、 JVM ）</h2><h4 id="2-1-JDK"><a href="#2-1-JDK" class="headerlink" title="2.1 JDK"></a>2.1 JDK</h4><blockquote><p>JDK概念：java开发工具包，程序员使用。包含JRE和JVM。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载方式：</span><br><span class="line">1. 官网下载地址：http:&#x2F;&#x2F;www.oracle.com&#x2F;</span><br><span class="line">2. 百度搜索“JDK”关键字</span><br></pre></td></tr></table></figure><h4 id="2-2-JRE"><a href="#2-2-JRE" class="headerlink" title="2.2 JRE"></a>2.2 JRE</h4><blockquote><p> JRE概念：JAVA程序运行环境，包含JVM和JVM运行时所需要的资源。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载方式：</span><br><span class="line"><span class="number">1.</span> 官网下载地址：http:<span class="comment">//www.oracle.com/</span></span><br><span class="line"><span class="number">2.</span> 百度搜索“JRE”关键字</span><br></pre></td></tr></table></figure><h4 id="2-3-JVM"><a href="#2-3-JVM" class="headerlink" title="2.3 JVM"></a>2.3 JVM</h4><blockquote><p>JVM概念：Java虚拟机</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无需下载，JDK或者JRE包含。</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/3.jpg"></p><h4 id="2-4-JAVA-跨平台原理【扩展】"><a href="#2-4-JAVA-跨平台原理【扩展】" class="headerlink" title="2.4 JAVA 跨平台原理【扩展】"></a>2.4 JAVA 跨平台原理【扩展】</h4><blockquote><p>总结： 对于测试人员，我们要记住，如果使用JMeter，必须要安装JDK或者JRE。</p></blockquote><h1 id="Jmeter-工具安装"><a href="#Jmeter-工具安装" class="headerlink" title="Jmeter 工具安装"></a>Jmeter 工具安装</h1><h2 id="2-Jmeter-下载与安装"><a href="#2-Jmeter-下载与安装" class="headerlink" title="2. Jmeter 下载与安装"></a>2. Jmeter 下载与安装</h2><h2 id="2-1-官网下载地址"><a href="#2-1-官网下载地址" class="headerlink" title="2.1 官网下载地址 :"></a>2.1 官网下载地址 :</h2><h5 id="http-jmeter-apache-org-download-jmeter-cgi"><a href="#http-jmeter-apache-org-download-jmeter-cgi" class="headerlink" title="http://jmeter.apache.org/download_jmeter.cgi"></a><a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></h5><h5 id="下载示意图："><a href="#下载示意图：" class="headerlink" title="下载示意图："></a>下载示意图：<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/4.jpg"></h5><blockquote><p>注意：下载后，解压文件到任意目录，避免在一个有空格的路径安装Jmeter，这将导致远程测试出现问题</p></blockquote><h2 id="2-2-启动-JMeter-的两种方式："><a href="#2-2-启动-JMeter-的两种方式：" class="headerlink" title="2.2 启动 JMeter 的两种方式："></a>2.2 启动 JMeter 的两种方式：</h2><h5 id="进入bin目录"><a href="#进入bin目录" class="headerlink" title="进入bin目录"></a>进入bin目录</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 双击 ApacheJMeter.jar文件;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 双击 Jmeter.bat文件;</span><br><span class="line"></span><br><span class="line">i. 出现Jmeter不是内部或外部命令在环境变量PATH中添加Jmeter路径bin目录，</span><br><span class="line">   比如（E:\测试\Tools\apache-jmeter-<span class="number">3.1</span>\bin）</span><br><span class="line">ii. 出现<span class="string">&#x27;findstr&#x27;</span> 不是内部或外部命令，在PATH中添(%SystemRoot%/system32;%SystemRoot%;)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 两种打开方式的区别</span><br><span class="line"><span class="number">4.</span> 发送桌面快捷方式</span><br></pre></td></tr></table></figure><h2 id="3-Jmeter-常用目录文件介绍"><a href="#3-Jmeter-常用目录文件介绍" class="headerlink" title="3 Jmeter 常用目录文件介绍"></a>3 Jmeter 常用目录文件介绍</h2><h3 id="3-1-Bin-目录"><a href="#3-1-Bin-目录" class="headerlink" title="3.1 Bin 目录"></a>3.1 Bin 目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Jmeter.bat：windows系统中JMeter的启动文件</span><br><span class="line">ApacheJMeter.jar Java环境下的JMeter启动文件</span><br><span class="line">Jmeter.log：日志文件</span><br><span class="line">Jmeter.sh：linux系统中JMeter的启动文件</span><br><span class="line">Jmeter.properties：系统配置文件</span><br><span class="line">Jmeter-server.bat：windows分布式测试要用到的服务器配置</span><br><span class="line">Jmeter-serve：linux分布式测试要用到的服务器配置</span><br></pre></td></tr></table></figure><h3 id="3-2-docs-目录-了解开源"><a href="#3-2-docs-目录-了解开源" class="headerlink" title="3.2 docs 目录 ( 了解开源 )"></a>3.2 docs 目录 ( 了解开源 )</h3><blockquote><p>docs：是JMeter的java Doc，可打开api\index.html页面来查看;</p></blockquote><h3 id="3-3-printable-docs-目录"><a href="#3-3-printable-docs-目录" class="headerlink" title="3.3 printable_docs 目录"></a>3.3 printable_docs 目录</h3><blockquote><p> printable_docs的usermanual子目录下的内容是JMeter的用户手册文档，其中usermanual 下 component_reference.html 是最常用到的核心元件帮助文档。</p></blockquote><blockquote><p>注意： lib 文件夹也是一个常用文件夹，使用时再讲。</p></blockquote><h1 id="Jmeter-工具功能界面布局"><a href="#Jmeter-工具功能界面布局" class="headerlink" title="Jmeter 工具功能界面布局"></a>Jmeter 工具功能界面布局</h1><h5 id="熟悉测试计划面板"><a href="#熟悉测试计划面板" class="headerlink" title="熟悉测试计划面板"></a>熟悉测试计划面板</h5><h2 id="1-主界面布局"><a href="#1-主界面布局" class="headerlink" title="1. 主界面布局"></a>1. 主界面布局</h2><h5 id="JMeter的主界面布局分为标题栏、菜单栏、工具栏、树形标签栏和内容栏"><a href="#JMeter的主界面布局分为标题栏、菜单栏、工具栏、树形标签栏和内容栏" class="headerlink" title="JMeter的主界面布局分为标题栏、菜单栏、工具栏、树形标签栏和内容栏"></a>JMeter的主界面布局分为标题栏、菜单栏、工具栏、树形标签栏和内容栏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标题栏：主要显示计划信息及JMeter版本。</span><br><span class="line">菜单栏：全部的功能的都包含在菜单栏中。</span><br><span class="line">工具栏：工具栏中的按钮在菜单栏都可以找到，工具栏就相当于菜单栏常用功能的快捷按钮</span><br><span class="line">树形标签栏：树形标签栏通常用来显示测试用例（计划）相关的标签。</span><br><span class="line">内容栏：配合树形标签栏显示，树形标签中点击哪个标签，内容栏中就显示相应的内容和操作。</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/11.jpg" alt="11"></p><h2 id="2-使用-JMeter-进行接口测试"><a href="#2-使用-JMeter-进行接口测试" class="headerlink" title="2. 使用 JMeter 进行接口测试"></a>2. 使用 JMeter 进行接口测试</h2><h2 id="遗留的问题："><a href="#遗留的问题：" class="headerlink" title="遗留的问题："></a>遗留的问题：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 需求对我们学院查询执行 <span class="number">100</span> 次，如何去做？</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="number">50</span>个请求同时请求如何操作？</span><br></pre></td></tr></table></figure><h4 id="使用-JMeter-的解决方案"><a href="#使用-JMeter-的解决方案" class="headerlink" title="使用 JMeter 的解决方案"></a>使用 JMeter 的解决方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 添加【测试计划】</span><br><span class="line"><span class="number">2.</span> 基于添加的测试计划添加【线程组】，循环次数设置为 <span class="number">100</span> 次</span><br><span class="line"><span class="number">3.</span> 在【取样器】中基于线程组添加HTTP请求</span><br><span class="line"><span class="number">4.</span> 在【监听器】基于线程组添加【察看结果树】</span><br><span class="line"><span class="number">5.</span> 在监听器基于线程组添加【聚合报告】</span><br></pre></td></tr></table></figure><h3 id="3-Test-Plan-测试计划"><a href="#3-Test-Plan-测试计划" class="headerlink" title="3. Test Plan( 测试计划 )"></a>3. Test Plan( 测试计划 )</h3><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/12.jpg" alt="12"></p><h4 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 本次测试所需要的【组件】都是基于测试计划添加；</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 本次测试所有组件的设置与执行都基于测试计划；</span><br></pre></td></tr></table></figure><ul><li><p>组件：完成指定功能代码段的封装；</p></li><li><p>选项：独立运行每个线程组</p></li><li><p>进程：是每个正在运行的应用程序。</p></li><li><p>线程：按照进程的指令去执行指定的代码。</p></li><li><p>线程组（多线程）：多个线程的组合。</p></li><li><p>线程组（多线程）的执行顺序是并行的。</p></li><li><p>勾选：让本次测试计划中所有线程组保持从上到下顺序执行</p></li><li><p>并发执行：多个线程同时进行 特点：执行结束的顺序和启动顺序不一定一致</p></li><li><p>顺序执行：按照线程的启动顺序挨个执行</p></li><li><p>默认情况下，线程组中的线程是并发执行的，每一个线程都要执行组内的http请求</p></li></ul><blockquote><p>Add directory or jar to classpath ：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加载第三方jar包；比如：测试数据库时使用，加载数据库驱动jar包。</span><br></pre></td></tr></table></figure><h3 id="4-Threads-User-线程组-【重点】"><a href="#4-Threads-User-线程组-【重点】" class="headerlink" title="4. Threads(User) 线程组 【重点】"></a>4. Threads(User) 线程组 【重点】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) thread group(线程组)</span><br><span class="line">2) setup thread group【特殊线程组】</span><br><span class="line">3) teardown thread group【特殊线程组】</span><br></pre></td></tr></table></figure><h4 id="4-1-thread-group-线程组"><a href="#4-1-thread-group-线程组" class="headerlink" title="4.1 thread group( 线程组 )"></a>4.1 thread group( 线程组 )<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/13.jpg" alt="13"></h4><blockquote><p>作用 :  添加测试中使用的大多数组件</p></blockquote><h5 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程数：虚拟用户数</span><br><span class="line">Ramp-<span class="function">Up <span class="title">Period</span><span class="params">(in serconds)</span>：启动虚拟全部用户数所需要的时间</span></span><br><span class="line"><span class="function">循环次数 ：指定次数或勾线永远</span></span><br><span class="line"><span class="function">调度器：勾选后，调度器配置才能使用；</span></span><br></pre></td></tr></table></figure><h5 id="调度器配置"><a href="#调度器配置" class="headerlink" title="调度器配置"></a>调度器配置</h5><ul><li><p>持续时间（秒）：设置脚本压测持续时间</p></li><li><p>启动延迟（秒）：启动延迟时间</p></li></ul><blockquote><p>提示：为了理解setup thread、teardown thread两个线程组我们结合案例理解下</p></blockquote><h4 id="4-2-案例"><a href="#4-2-案例" class="headerlink" title="4.2 案例"></a>4.2 案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过thread group、setup thread group、teardown thread group 三个线程组去访问</span><br><span class="line">去访问查询所有学院接口.</span><br></pre></td></tr></table></figure><h5 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/11111111111111.jpg"></h5><ul><li>需求组件：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基于测试计划添加【线程组】</span><br><span class="line">基于线程组添加【HTTP请求】</span><br><span class="line">基于测试计划添加【setup thread group】线程组</span><br><span class="line">基于setup thread group添加HTTP请求</span><br><span class="line">基于测试计划添加【teardown thread group】线程组</span><br><span class="line">基于teardown thread group添加HTTP请求</span><br><span class="line">基于测试计划添加【察看结果树】</span><br></pre></td></tr></table></figure><h5 id="组件设置细节："><a href="#组件设置细节：" class="headerlink" title="组件设置细节："></a>组件设置细节：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试计划勾选独立运行线程组</span><br><span class="line">HTTP请求：服务器地址 http:<span class="comment">//127.0.0.1:8000/api/departments/</span></span><br><span class="line">HTTP请求: 修改HTTP请求名称，以做区分</span><br></pre></td></tr></table></figure><h3 id="4-3-组件详解"><a href="#4-3-组件详解" class="headerlink" title="4.3 组件详解"></a>4.3 组件详解</h3><ol><li><p>HTTP请求</p></li><li><p>察看结果树</p></li></ol><h3 id="4-3-HTTP-请求"><a href="#4-3-HTTP-请求" class="headerlink" title="4.3 - HTTP 请求"></a>4.3 - HTTP 请求<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/18.jpg" alt="18"></h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用 :"></a>作用 :</h4><blockquote><ol><li><p>模拟前端或第三方软件向服务器发送请求;</p></li><li><p>设置请求时的方法和参数数据;</p></li></ol></blockquote><h4 id="参数详解："><a href="#参数详解：" class="headerlink" title="参数详解："></a>参数详解：</h4><ol><li><p>名称：本属性用于标识一个取样器，建议使用一个有意义的名称。</p></li><li><p>服务器名称或IP ：HTTP请求发送的目标服务器名称或IP地址。</p></li><li><p>端口号：目标服务器的端口号，默认值为 80 。</p></li><li><p>协议：向目标服务器发送HTTP请求时的协议,可以是http或者是https ,默认值为http 。</p></li><li><p>方法：发送HTTP请求的方法，可用方法包括GET、POST、PUT、DELETE。</p></li><li><p>Content encoding ：内容的编码方式，默认值为iso8859；一般设置【UTF-8】</p></li><li><p>路径：目标URL路径（不包括服务器地址和端口）</p></li><li><p>同请求一起发送参数:请求时需要传递参数，如：学院资源list查询<br><a href="http://127.0.0.1:8000/api/departments/?$dep_id_list=T01,T02,T03">http://127.0.0.1:8000/api/departments/?$dep_id_list=T01,T02,T03</a><br>参数名称：【$dep_id_list】<br>参数值：T01,T02,T03</p></li></ol><h5 id="Body-Data-选项作用："><a href="#Body-Data-选项作用：" class="headerlink" title="Body Data 选项作用："></a>Body Data 选项作用：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 1.新增或更新时需要传递JSON报文；如学院新增是的JSON报文填写位置：</span><br><span class="line"> &#123;</span><br><span class="line">&quot;data&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;dep_id&quot;: &quot;T01&quot;,</span><br><span class="line">&quot;dep_name&quot;: &quot;Test学院&quot;,</span><br><span class="line">&quot;master_name&quot;: &quot;Test-Master&quot;,</span><br><span class="line">&quot;slogan&quot;: &quot;Here is Slogan&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】：新增和更新时传入报文也需要设置Content-Type:application/json<br>告诉服务器我传的数据格式为JSON格式；<br>设置地点：配置元件–&gt;HTTP信息头管理器（用到的时候我们在讲解）</p></blockquote><h4 id="HTTP-请求总结："><a href="#HTTP-请求总结：" class="headerlink" title="HTTP 请求总结："></a>HTTP 请求总结：</h4><ol><li><p>接口完整请求地址</p></li><li><p>JSON报文存放地址</p></li><li><p>设置默认请求数据格式</p></li></ol><h3 id="4-3-察看结果树"><a href="#4-3-察看结果树" class="headerlink" title="4.3  察看结果树"></a>4.3  察看结果树<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/31.jpg" alt="31"></h3><h4 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h4><blockquote><p>1.查看请求服务器时的请求信息;</p><p>2.查看服务器响应数据;</p><p>3.记录信息到指定文件;</p></blockquote><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ol><li>文件名：存放服务器响应后的状态信息； 如：e:\查询所有response.txt</li><li>取样结果：服务器响应的信息头信息；比如：响应代码，响应数据大小</li><li>请求：查看向服务器请求时的信息；比如：请求地址、方法、数据等</li><li>响应数据：查看服务器响应的数据；比如：获取资源时，返回的JSON数据</li></ol><h4 id="察看结果树总结："><a href="#察看结果树总结：" class="headerlink" title="察看结果树总结："></a>察看结果树总结：</h4><ol><li><p>查看请求</p></li><li><p>查看响应</p></li><li><p>存储请求状态信息</p></li></ol><h4 id="4-4-线程组总结："><a href="#4-4-线程组总结：" class="headerlink" title="4.4 线程组总结："></a>4.4 线程组总结：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setup thread group：一种特殊线程组，测试计划运行之前首先执行，一般做初始化操作</span><br><span class="line">teardown thread group：一种特殊线程组，测试计划运行结束时运行，一般做收尾工作</span><br><span class="line">thread group(线程组) ：线程组，我们测试计划中场景创建和实现都是基于此线程组</span><br></pre></td></tr></table></figure><h3 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h3><blockquote><p>概念：相同类似功能组件的集合称之为元件</p></blockquote><ol><li><p>逻辑控制器</p></li><li><p>配置元件</p></li><li><p>定时器</p></li><li><p>前置处理器</p></li><li><p>Sampler</p></li><li><p>后置处理器</p></li><li><p>断言</p></li><li><p>监听器</p></li></ol><h3 id="元件结论："><a href="#元件结论：" class="headerlink" title="元件结论："></a>元件结论：</h3><blockquote><p>只学重要的、常用的</p></blockquote><h1 id="Jmeter-各元件中需要掌握元件"><a href="#Jmeter-各元件中需要掌握元件" class="headerlink" title="Jmeter 各元件中需要掌握元件"></a>Jmeter 各元件中需要掌握元件</h1><h5 id="整理出各大元件常用的重点组件"><a href="#整理出各大元件常用的重点组件" class="headerlink" title="整理出各大元件常用的重点组件"></a>整理出各大元件常用的重点组件</h5><h2 id="1-配置元件（-config-Element-）"><a href="#1-配置元件（-config-Element-）" class="headerlink" title="1. 配置元件（ config Element ）"></a>1. 配置元件（ config Element ）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) CSV Data Set Config</span><br><span class="line">2) HTTP请求默认值</span><br><span class="line">3) HTTP信息头管理器</span><br></pre></td></tr></table></figure><h2 id="2-前置处理器（-Per-Processors-）"><a href="#2-前置处理器（-Per-Processors-）" class="headerlink" title="2. 前置处理器（ Per Processors ）"></a>2. 前置处理器（ Per Processors ）</h2><blockquote><ol><li>用户参数</li></ol></blockquote><h2 id="3-定时器（-Timer-）"><a href="#3-定时器（-Timer-）" class="headerlink" title="3. 定时器（ Timer ）"></a>3. 定时器（ Timer ）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1) Synchronizing Timer</span><br></pre></td></tr></table></figure><h2 id="4-取样器（-sample-）"><a href="#4-取样器（-sample-）" class="headerlink" title="4. 取样器（ sample ）"></a>4. 取样器（ sample ）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) HTTP请求</span><br><span class="line">2) JDBC Request</span><br><span class="line">3) Debug Sampler</span><br></pre></td></tr></table></figure><h2 id="5-后置处理器（-Post-Processors-）"><a href="#5-后置处理器（-Post-Processors-）" class="headerlink" title="5. 后置处理器（ Post Processors ）"></a>5. 后置处理器（ Post Processors ）</h2><h6 id="1-正则表达式提取器"><a href="#1-正则表达式提取器" class="headerlink" title="1) 正则表达式提取器"></a>1) 正则表达式提取器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2) XPath Extractor</span><br></pre></td></tr></table></figure><h2 id="6-断言（-Assertions-）"><a href="#6-断言（-Assertions-）" class="headerlink" title="6. 断言（ Assertions ）"></a>6. 断言（ Assertions ）</h2><h6 id="1-响应断言"><a href="#1-响应断言" class="headerlink" title="1) 响应断言"></a>1) 响应断言</h6><h3 id="6-监听器（-Listener-）"><a href="#6-监听器（-Listener-）" class="headerlink" title="6. 监听器（ Listener ）"></a>6. 监听器（ Listener ）</h3><h6 id="1-察看结果树"><a href="#1-察看结果树" class="headerlink" title="1) 察看结果树"></a>1) 察看结果树</h6><h6 id="2-聚合报告"><a href="#2-聚合报告" class="headerlink" title="2) 聚合报告"></a>2) 聚合报告</h6><h6 id="3-断言结果"><a href="#3-断言结果" class="headerlink" title="3) 断言结果"></a>3) 断言结果</h6><h3 id="8-逻辑控制器"><a href="#8-逻辑控制器" class="headerlink" title="8. 逻辑控制器"></a>8. 逻辑控制器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) 如果（If）控制器</span><br><span class="line">2) ForEach控制器</span><br><span class="line">3) 循环控制器</span><br></pre></td></tr></table></figure><blockquote><p>总结：正常来说，应该开始按照顺序一个组件一个组件的进行讲解。</p><p>问题：每个组件都不能独立执行。都需要多个组件进行配合，才能够解决实际问题。</p><p>解决方案：按照JMeter主要解决的问题点来讲解组件。</p></blockquote><h1 id="Jmeter-工具核心知识点"><a href="#Jmeter-工具核心知识点" class="headerlink" title="Jmeter 工具核心知识点"></a>Jmeter 工具核心知识点</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><p>参数化：数据分离</p></li><li><p>数据库：连接数据库获取数据</p></li><li><p>关联：动态获取数据</p></li><li><p>集合点：掌握如何基于Jmeter并发测试</p></li><li><p>断言：判断自动化脚本执行成功或失败</p></li></ul><h1 id="Jmeter-参数化"><a href="#Jmeter-参数化" class="headerlink" title="Jmeter 参数化"></a>Jmeter 参数化</h1><h5 id="学习掌握Jmeter中常用参数化方式"><a href="#学习掌握Jmeter中常用参数化方式" class="headerlink" title="学习掌握Jmeter中常用参数化方式"></a>学习掌握Jmeter中常用参数化方式</h5><h2 id="1-为什么要参数化？"><a href="#1-为什么要参数化？" class="headerlink" title="1. 为什么要参数化？"></a>1. 为什么要参数化？</h2><h2 id="1-1-需求新增-10-条数据"><a href="#1-1-需求新增-10-条数据" class="headerlink" title="1.1 需求新增 10 条数据"></a>1.1 需求新增 10 条数据</h2><h6 id="学院-新增"><a href="#学院-新增" class="headerlink" title="学院-新增"></a>学院-新增</h6><h6 id="1-请求方法：POST"><a href="#1-请求方法：POST" class="headerlink" title="1) 请求方法：POST"></a>1) 请求方法：POST</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2) 请求地址：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api&#x2F;departments&#x2F;</span><br><span class="line">3) 请求JOSN报文：</span><br><span class="line">4) 调用传入的json串如下（可新增多条，之间用,隔开）：</span><br><span class="line">&#123;</span><br><span class="line">&quot;data&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;dep_id&quot;: &quot;T01&quot;,</span><br><span class="line">&quot;dep_name&quot;: &quot;Test学院&quot;,</span><br><span class="line">&quot;master_name&quot;: &quot;Test-Master&quot;,</span><br><span class="line">&quot;slogan&quot;: &quot;Here is Slogan&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题 :"></a>问题 :</h2><blockquote><ol><li>键所对应的值都是写死的，只能手动更改</li><li>无法解决新增大数量（ 1000 条）的问题</li></ol></blockquote><h2 id="2-什么是参数化？"><a href="#2-什么是参数化？" class="headerlink" title="2. 什么是参数化？"></a>2. 什么是参数化？</h2><blockquote><p>概念：根据需求动态获取数据并进行赋值的过程</p></blockquote><h2 id="在-Jmeter-中参数化常用方式："><a href="#在-Jmeter-中参数化常用方式：" class="headerlink" title="在 Jmeter 中参数化常用方式："></a>在 Jmeter 中参数化常用方式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CSV Data Set Config</span><br><span class="line">用户参数</span><br><span class="line">用户定义的变量</span><br><span class="line">函数</span><br></pre></td></tr></table></figure><h2 id="1-CSV-Data-Set-Config-（数据集配置）"><a href="#1-CSV-Data-Set-Config-（数据集配置）" class="headerlink" title="1. CSV Data Set Config （数据集配置）"></a>1. CSV Data Set Config （数据集配置）</h2><blockquote><p>概念：一种从外部读取数据功能的组件</p></blockquote><h3 id="1-1-实施方案分析"><a href="#1-1-实施方案分析" class="headerlink" title="1.1 实施方案分析"></a>1.1 实施方案分析</h3><h6 id="1-基于测试计划-gt-线程组"><a href="#1-基于测试计划-gt-线程组" class="headerlink" title="1. 基于测试计划-&gt;线程组"></a>1. 基于测试计划-&gt;线程组</h6><ol><li>基于线程组-&gt;配置元件-&gt;CSV Data Set Config</li><li>基于线程组-&gt;Sampler-&gt;HTTP请求</li><li>基于测试计划-&gt;HTTP信息头管理器</li><li>基于测试计划-&gt;监听器-&gt;察看结果树</li></ol><h3 id="1-2-组件要点分析"><a href="#1-2-组件要点分析" class="headerlink" title="1.2 组件要点分析"></a>1.2 组件要点分析</h3><h6 id="1-线程组-循环次数-10"><a href="#1-线程组-循环次数-10" class="headerlink" title="1. 线程组:循环次数 10"></a>1. 线程组:循环次数 10</h6><ol><li>CSV Data Set Config 读取变量配置</li><li>HTTP请求：Body Data填写(JSON报文) 方法(POST)</li><li>参数化引用格式：${参数名} 如：${dep_id}</li><li>HTTP信息头管理器：Content-Type:application/json;charset=utf-8</li></ol><h3 id="1-3-CSV-Data-Set-Config-参数配置图"><a href="#1-3-CSV-Data-Set-Config-参数配置图" class="headerlink" title="1.3 CSV Data Set Config 参数配置图"></a>1.3 CSV Data Set Config 参数配置图</h3><p>#####<img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/32.jpg" alt="32"></p><ol><li>Filename:文件路径+文件名+后缀名 如：d:/a.txt;</li><li>File Encoding:文件编译字符编码，一般设置utf-8;</li><li>Vaiable Names:读取参数后保存的变量名称;</li><li>Delimiter:如文件中使用的是逗号分隔，则填写逗号；如使用的是TAB，则填写\t;</li></ol><h3 id="1-4-HTTP-信息头管理器-参数配置图"><a href="#1-4-HTTP-信息头管理器-参数配置图" class="headerlink" title="1.4 HTTP 信息头管理器 参数配置图"></a>1.4 HTTP 信息头管理器 参数配置图</h3><blockquote><p>作用：告诉服务器请求的数据格式</p></blockquote><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/33.jpg" alt="33"></p><ol><li>Content-Type:指定请求信息格式-类型名称</li><li>application/json:指定请求信息为-JSON格式</li><li>charset=utf-8:字符编码</li></ol><h3 id="1-5-CSV-Data-Set-Config-总结："><a href="#1-5-CSV-Data-Set-Config-总结：" class="headerlink" title="1.5 CSV Data Set Config- 总结："></a>1.5 CSV Data Set Config- 总结：</h3><h6 id="1-参数化概念"><a href="#1-参数化概念" class="headerlink" title="1. 参数化概念"></a>1. 参数化概念</h6><ol><li>CSV Data Set Config 配置参数设置</li><li>参数化引用格式</li><li>HTTP请求</li><li>HTTP信息头管理器作用与设置</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-01-安装docker</title>
      <link href="/2020/08/16/docker-01-%E5%AE%89%E8%A3%85docker/"/>
      <url>/2020/08/16/docker-01-%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、yum 包更新到最新 </span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、 安装docker，出现输入的界面都按 y </span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="二、其他安装方式-推荐"><a href="#二、其他安装方式-推荐" class="headerlink" title="二、其他安装方式(推荐)"></a>二、其他安装方式(推荐)</h3><p>教程链接：<a href="https://www.jianshu.com/p/1e5c86accacb">https://www.jianshu.com/p/1e5c86accacb</a></p><p>删除<br><a href="https://blog.csdn.net/weixin_40461281/article/details/92617826">https://blog.csdn.net/weixin_40461281/article/details/92617826</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-04-docker-compose</title>
      <link href="/2020/08/16/docker-04-docker-compose/"/>
      <url>/2020/08/16/docker-04-docker-compose/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h3 id="一、安装Docker-Compose"><a href="#一、安装Docker-Compose" class="headerlink" title="一、安装Docker Compose"></a>一、安装Docker Compose</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。 </span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置文件可执行权限 </span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本信息 </span></span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><h3 id="二、卸载Docker-Compose"><a href="#二、卸载Docker-Compose" class="headerlink" title="二、卸载Docker Compose"></a>二、卸载Docker Compose</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="三、-使用docker-compose编排nginx-springboot项目"><a href="#三、-使用docker-compose编排nginx-springboot项目" class="headerlink" title="三、 使用docker compose编排nginx+springboot项目"></a>三、 使用docker compose编排nginx+springboot项目</h3><ol><li>创建docker-compose目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/docker-compose</span><br><span class="line">cd ~/docker-compose</span><br></pre></td></tr></table></figure><ol start="2"><li>编写 docker-compose.yml 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">   image: nginx</span><br><span class="line">   ports:</span><br><span class="line">    - 80:80</span><br><span class="line">   links:</span><br><span class="line">    - app</span><br><span class="line">   volumes:</span><br><span class="line">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">  app:</span><br><span class="line">    image: app</span><br><span class="line">    expose:</span><br><span class="line">      - &quot;8080&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建./nginx/conf.d目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure><ol start="4"><li>在./nginx/conf.d目录下 编写itheima.conf文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://app:8080;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在~/docker-compose 目录下 使用docker-compose 启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><ol start="6"><li>测试访问</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.149.135/hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-02-docker应用部署</title>
      <link href="/2020/08/16/docker-02-docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/08/16/docker-02-docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Docker-应用部署"><a href="#Docker-应用部署" class="headerlink" title="Docker 应用部署"></a>Docker 应用部署</h2><h3 id="一、部署MySQL"><a href="#一、部署MySQL" class="headerlink" title="一、部署MySQL"></a>一、部署MySQL</h3><ol><li>搜索mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure><ol start="5"><li>使用外部机器连接容器中的mysql</li></ol><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1573636765632.png"></p><h3 id="二、部署Tomcat"><a href="#二、部署Tomcat" class="headerlink" title="二、部署Tomcat"></a>二、部署Tomcat</h3><ol><li>搜索tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录挂载到容器的webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问tomcat</li></ol><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1573649804623.png"></p><h3 id="三、部署Nginx"><a href="#三、部署Nginx" class="headerlink" title="三、部署Nginx"></a>三、部署Nginx</h3><ol><li>搜索nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问nginx</li></ol><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1573652396669.png"></p><h3 id="四、部署Redis"><a href="#四、部署Redis" class="headerlink" title="四、部署Redis"></a>四、部署Redis</h3><ol><li>搜索redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-05-docker 私有仓库</title>
      <link href="/2020/08/16/docker-05-docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
      <url>/2020/08/16/docker-05-docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Docker-私有仓库"><a href="#Docker-私有仓库" class="headerlink" title="Docker 私有仓库"></a>Docker 私有仓库</h2><h3 id="一、私有仓库搭建"><a href="#一、私有仓库搭建" class="headerlink" title="一、私有仓库搭建"></a>一、私有仓库搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、拉取私有仓库镜像 </span></span><br><span class="line">docker pull registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、启动私有仓库容器 </span></span><br><span class="line">docker run -id --name=registry -p 5000:5000 registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125; 表示私有仓库 搭建成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、修改daemon.json   </span></span><br><span class="line">vim /etc/docker/daemon.json    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </span></span><br><span class="line">&#123;&quot;insecure-registries&quot;:[&quot;私有仓库服务器ip:5000&quot;]&#125; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、重启docker 服务 </span></span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、将镜像上传至私有仓库"><a href="#二、将镜像上传至私有仓库" class="headerlink" title="二、将镜像上传至私有仓库"></a>二、将镜像上传至私有仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、标记镜像为私有仓库的镜像     </span></span><br><span class="line">docker tag centos:7 私有仓库服务器IP:5000/centos:7</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、上传标记的镜像     </span></span><br><span class="line">docker push 私有仓库服务器IP:5000/centos:7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、-从私有仓库拉取镜像"><a href="#三、-从私有仓库拉取镜像" class="headerlink" title="三、 从私有仓库拉取镜像"></a>三、 从私有仓库拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像 </span></span><br><span class="line">docker pull 私有仓库服务器ip:5000/centos:7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-03-dockerfile</title>
      <link href="/2020/08/16/docker-03-dockerfile/"/>
      <url>/2020/08/16/docker-03-dockerfile/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-06-docker部署Springboot</title>
      <link href="/2020/08/16/docker-06-docker%E9%83%A8%E7%BD%B2Springboot/"/>
      <url>/2020/08/16/docker-06-docker%E9%83%A8%E7%BD%B2Springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署SpringBoot"><a href="#Docker部署SpringBoot" class="headerlink" title="Docker部署SpringBoot"></a>Docker部署SpringBoot</h1><a id="more"></a><p>docker的安装方式，来安装一下我们的项目，实验环境是centos 7系统上，实验适用部署大部分Springboot项目。</p><p>eblog项目地址：</p><p><a href="https://github.com/MarkerHub/eblog">github.com/MarkerHub/e…</a></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">yum install docker</span><br><span class="line"></span><br><span class="line">#检验安装是否成功</span><br><span class="line">[root@localhost opt]# docker --version</span><br><span class="line">Docker version 1.13.1, build 7f2769b&#x2F;1.13.1</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">#换镜像源</span><br><span class="line">sudo vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">内容如下：</span><br><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;m9r2r2uj.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">----------------------------</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;2be16b36.m.daocloud.io&quot;],</span><br><span class="line">&quot;insecure-registries&quot; : [&quot;122.51.23.194&quot;]</span><br><span class="line">&#125;</span><br><span class="line"># 将之前的备份</span><br><span class="line">-----------------------------</span><br><span class="line">保存退出，重启docker</span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line">systemctl restart docker</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><p>首先上dockerHub搜索redis，点击进入详情页之后，拉到下面就可以看到how to use，如果需要选择特定的版本，有Supported tags给我们选择，然后如果拉取最新的版本的话，拉倒下面就教程。</p><ul><li><a href="https://hub.docker.com/_/redis">hub.docker.com/_/redis</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#拉取redis的镜像</span><br><span class="line">docker pull redis</span><br><span class="line">#查看本地redis镜像</span><br><span class="line">docker images</span><br><span class="line">#运行redis</span><br><span class="line">docker run --name myredis -p 6379:6379 -d redis redis-server --appendonly yes</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>docker run表示运行的意思</li><li>–name myredis 表示起个名字叫myredis</li><li>-p 6379:6379表示把服务器的6379映射到docker的6379端口，这样就可以通过服务器的端口访问docker的端口</li><li>-d 表示以后台服务形式运行redis</li><li>redis redis-server –appendonly yes表示开启持久化缓存模式，可以存到硬盘</li></ul><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><ul><li><a href="https://hub.docker.com/_/mysql">hub.docker.com/_/mysql</a></li></ul><p>MYSQL_ROOT_PASSWORD=admin表示root的初始密码</p><p>mysql:5.7.27表示操作的是mysql的5.7.27版本，没有后面的版本号的话，默认是拉取最新版本的mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.27</span><br><span class="line">docker run --name mymysql -e MYSQL_ROOT_PASSWORD&#x3D;admin -d -p 3306:3306  mysql:5.7.27 </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>连上mysql，创建数据库eblog，然后把数据库脚本导入进去。 脚本位置：<a href="https://github.com/MarkerHub/eblog/blob/master/eblog.sql">github.com/MarkerHub/e…</a></p><h3 id="安装RabbitMq"><a href="#安装RabbitMq" class="headerlink" title="安装RabbitMq"></a>安装RabbitMq</h3><p>一行命令搞定，注意RABBITMQ_DEFAULT_PASS=password是设置密码的意思哈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname my-rabbit --name myrabbit -e RABBITMQ_DEFAULT_USER&#x3D;root -e RABBITMQ_DEFAULT_PASS&#x3D;admin -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h3><p>docker 安装 Elasticsearch6.4.3版本 及中文插件安装。</p><p>系统配置</p><p>不配置的话，可能会启动失败</p><p>具体报错：max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]。</p><p>解决：</p><ul><li>sudo sysctl -w vm.max_map_count=262144</li></ul><p>启动 ES</p><ul><li>docker run -p 9200:9200 -p 9300:9300 -d –name es_643 elasticsearch:6.4.3</li></ul><p>进入镜像</p><ul><li>docker exec -it es_643 /bin/bash</li></ul><p>es配置文件位置： /usr/share/elasticsearch/config/elasticsearch.yml</p><p>安装中文分词插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.4.3/elasticsearch-analysis-ik-6.4.3.zip</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>退出并重启镜像</p><ul><li>exit</li><li>docker restart es_643</li></ul><h3 id="构建eblog的docker镜像"><a href="#构建eblog的docker镜像" class="headerlink" title="构建eblog的docker镜像"></a>构建eblog的docker镜像</h3><p>接下来，我们需要先去clone eblog博客项目，对项目进行打包成jar包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clone</span> https://github.com/MarkerHub/eblog.git</span><br><span class="line"><span class="built_in">cd</span> eblog</span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>然后把项目 eblog-0.0.1-SNAPSHOT.jar 包上传到服务器中 同eblog-0.0.1-SNAPSHOT.jar的目录，创建一个名称为Dockerfile文件。</p><p>内容如下：</p><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -sf /usr/share/zoneinfo/&#123;TZ&#125; /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;&#123;TZ&#125;&quot;</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> eblog-0.0.1-SNAPSHOT.jar  /app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>FROM java:8 表示基于jdk8环境</li><li>EXPOSE 8080 表示对外暴露的端口是8080</li><li><ul><li>VOLUME /tmp 表示挂载到/tmp目录</li></ul></li><li>ADD eblog-0.0.1-SNAPSHOT.jar /app.jar 表示把jar包复制到镜像服务里面的根目录，并改名称app.jar</li><li>RUN bash -c ‘touch /app.jar’ 表示执行创建app.jar</li><li>ENTRYPOINT [“java”,”-jar”,”/app.jar”] 表示执行启动命令java -jar</li></ul><p>接下来，我们安装Dockrfile的命令，把eblog-0.0.1-SNAPSHOT.jar构建成docker的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建镜像，注意后面有个点哈。</span></span><br><span class="line">docker build -t eblog .</span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">docker images</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这步骤完成之后，我们就可以在准备工作就已经完成啦，接下来，我们就直接启动我们的项目哈。</p><h3 id="启动eblog项目"><a href="#启动eblog项目" class="headerlink" title="启动eblog项目"></a>启动eblog项目</h3><p>启动命令如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 8080:8080 -p 9326:9326 --name eblog --link es_643:ees --link myrabbit:erabbit --link mymysql:emysql --link myredis:eredis -d eblog</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>-p 8080:8080 -p 9326:9326 ：9326是因为即时聊天需要用到的ws端口 –link es:ees 表示关联容器，把容器es起别名为ees</p><p>查看eblog打印日志</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f eblog</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这时候我们查看就可以通过8080端口访问我们的项目了！！！</p><p>到此项目运行成功！！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用docker compose编排形式会更简单！</p><h3 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h3><p>链接：<a href="https://www.bilibili.com/video/BV1dk4y1r7pi">www.bilibili.com/video/BV1dk…</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-08-编写dockerCompose</title>
      <link href="/2020/08/11/docker-08-%E7%BC%96%E5%86%99dockerCompose/"/>
      <url>/2020/08/11/docker-08-%E7%BC%96%E5%86%99dockerCompose/</url>
      
        <content type="html"><![CDATA[<h2 id="cloud-04-docker-compose部署SpringCloud"><a href="#cloud-04-docker-compose部署SpringCloud" class="headerlink" title="cloud-04-docker-compose部署SpringCloud"></a>cloud-04-docker-compose部署SpringCloud</h2><a id="more"></a><p>1，准备docker-compose</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.png"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改文件名</span></span><br><span class="line">[root@zsh ~]<span class="comment"># mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line">[root@zsh ~]<span class="comment"># chmod +x //usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zsh ~]<span class="comment"># docker-compose version</span></span><br><span class="line">docker-compose version <span class="number">1.25</span>.<span class="number">0</span>, build <span class="number">0</span>a186604</span><br><span class="line">docker-py version: <span class="number">4.1</span>.<span class="number">0</span></span><br><span class="line">CPython version: <span class="number">3.7</span>.<span class="number">4</span></span><br><span class="line">OpenSSL version: OpenSSL <span class="number">1.1</span>.<span class="number">0</span>l  <span class="number">10</span> Sep <span class="number">2019</span></span><br><span class="line">[root@zsh ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/2.png"></p><h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装相关软件</span></span><br><span class="line">yum install -y git java  maven</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># clone 源码</span></span><br><span class="line">git clone https://gitee.com/log4j/pig.git</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编译源码</span></span><br><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker-compose build</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">docker-compose down --rmi all -v</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line"> pig-redis:</span><br><span class="line">    image: redis:<span class="number">5.0</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">6379</span>:<span class="number">6379</span></span><br><span class="line">    restart: always</span><br><span class="line">    container_name: pig-redis</span><br><span class="line">    hostname: pig-redis</span><br><span class="line"> </span><br><span class="line">  pig-gateway:</span><br><span class="line">    build:</span><br><span class="line">      context: ./</span><br><span class="line">      dockerfile: ./pig-gateway/Dockerfile</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">9999</span>:<span class="number">9999</span></span><br><span class="line">    container_name: pig-gateway</span><br><span class="line">    hostname: pig-gateway</span><br><span class="line">    image: pig-gateway</span><br><span class="line"> </span><br><span class="line">  pig-upms:</span><br><span class="line">    build:</span><br><span class="line">      context: ./</span><br><span class="line">      dockerfile: ./pig-upms/pig-upms-biz/Dockerfile</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: pig-upms</span><br><span class="line">    hostname: pig-upms</span><br><span class="line">    image: pig-upms</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶04-索引的使用</title>
      <link href="/2020/07/14/MySQL%E8%BF%9B%E9%98%B604-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/14/MySQL%E8%BF%9B%E9%98%B604-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h3><blockquote><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p></blockquote><h4 id="4-1-验证索引提升查询效率"><a href="#4-1-验证索引提升查询效率" class="headerlink" title="4.1 验证索引提升查询效率"></a>4.1 验证索引提升查询效率</h4><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p><p>A. 根据ID查询 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_item where id &#x3D; 1999\G;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1553261992653.png" alt="1553261992653"></p><p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1553262044466.png" alt="1553262044466"></p><p>2). 根据 title 进行精确查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title = <span class="string">&#x27;iphoneX 移动3G 32G941&#x27;</span>\G; </span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1553262215900.png" alt="1553262215900"></p><p>查看SQL语句的执行计划 ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1553262469785.png" alt="1553262469785"></p><p>处理方案 ， 针对title字段， 创建索引 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(title);</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1553263229523.png" alt="1553263229523"></p><p>索引创建完成之后，再次进行查询 ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1553263302706.png" alt="1553263302706"></p><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1553263355262.png" alt="1553263355262"></p><h4 id="4-2-索引的使用"><a href="#4-2-索引的使用" class="headerlink" title="4.2 索引的使用"></a>4.2 索引的使用</h4><h5 id="4-2-1-准备环境"><a href="#4-2-1-准备环境" class="headerlink" title="4.2.1 准备环境"></a>4.2.1 准备环境</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`tb_seller`</span> (</span><br><span class="line"><span class="string">`sellerid`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`nickname`</span> <span class="built_in">varchar</span> (<span class="number">50</span>),</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">varchar</span> (<span class="number">60</span>),</span><br><span class="line"><span class="string">`status`</span> <span class="built_in">varchar</span> (<span class="number">1</span>),</span><br><span class="line"><span class="string">`address`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`createtime`</span> datetime,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">`sellerid`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;alibaba&#x27;</span>,<span class="string">&#x27;阿里巴巴&#x27;</span>,<span class="string">&#x27;阿里小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;百度科技有限公司&#x27;</span>,<span class="string">&#x27;百度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;huawei&#x27;</span>,<span class="string">&#x27;华为科技有限公司&#x27;</span>,<span class="string">&#x27;华为小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;传智播客教育科技有限公司&#x27;</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;itheima&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;luoji&#x27;</span>,<span class="string">&#x27;罗技科技有限公司&#x27;</span>,<span class="string">&#x27;罗技小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;oppo&#x27;</span>,<span class="string">&#x27;OPPO科技有限公司&#x27;</span>,<span class="string">&#x27;OPPO官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;ourpalm&#x27;</span>,<span class="string">&#x27;掌趣科技股份有限公司&#x27;</span>,<span class="string">&#x27;掌趣小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;qiandu&#x27;</span>,<span class="string">&#x27;千度科技&#x27;</span>,<span class="string">&#x27;千度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;sina&#x27;</span>,<span class="string">&#x27;新浪科技有限公司&#x27;</span>,<span class="string">&#x27;新浪官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;xiaomi&#x27;</span>,<span class="string">&#x27;小米科技&#x27;</span>,<span class="string">&#x27;小米官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;西安市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;yijia&#x27;</span>,<span class="string">&#x27;宜家家居&#x27;</span>,<span class="string">&#x27;宜家家居旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><h5 id="4-2-2-避免索引失效"><a href="#4-2-2-避免索引失效" class="headerlink" title="4.2.2 避免索引失效"></a>4.2.2 避免索引失效</h5><p>1).  全值匹配 ，对索引中所有列都指定具体值。</p><p>改情况下，索引生效，执行效率高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;小米科技&#x27;</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> address=<span class="string">&#x27;北京市&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556170997921.png" alt="1556170997921"> </p><p>2). 最左前缀法则</p><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>匹配最左前缀法则，走索引：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171348995.png" alt="1556171348995">  </p><p>违法最左前缀法则 ， 索引失效：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171428140.png" alt="1556171428140"> </p><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171662203.png" alt="1556171662203"> </p><p>3). 范围查询右边的列，不能使用索引 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172256791.png" alt="1556172256791"> </p><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><p>4). 不要在索引列上进行运算操作， 索引将失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172813715.png" alt="1556172813715"> </p><p>5). 字符串不加单引号，造成索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172967493.png" alt="1556172967493"> </p><p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><p>6). 尽量使用覆盖索引，避免select *</p><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556173928299.png" alt="1556173928299"> </p><p>如果查询列，超出索引列，也会降低性能。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556173986068.png" alt="1556173986068"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIP : </span><br><span class="line"></span><br><span class="line">    using index ：使用覆盖索引的时候就会出现</span><br><span class="line"></span><br><span class="line">    using where：在查找使用索引的情况下，需要回表去查询所需的数据</span><br><span class="line"></span><br><span class="line">    using index condition：查找使用了索引，但是需要回表查询数据</span><br><span class="line"></span><br><span class="line">    using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</span><br></pre></td></tr></table></figure><p>7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;黑马程序员&#x27;</span> <span class="keyword">or</span> createtime = <span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556174994440.png" alt="1556174994440"> </p><p>8).  以%开头的Like模糊查询，索引失效。</p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556175114369.png" alt="1556175114369"> </p><p>解决方案 ： </p><p>通过覆盖索引来解决 </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556247686483.png" alt="1556247686483"> </p><p>9). 如果MySQL评估使用索引比全表更慢，则不使用索引。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556175445210.png" alt="1556175445210"> </p><p>10). is  NULL ， is NOT NULL  <font color='red'>有时</font>索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556180634889.png" alt="1556180634889">  </p><p>11). in 走索引， not in 索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556249602732.png" alt="1556249602732">  </p><p>12). 单列索引和复合索引。</p><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create index idx_name_sta_address on tb_seller(name, status, address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">name</span><br><span class="line">name + status</span><br><span class="line">name + status + address</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建单列索引 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p><h4 id="4-3-查看索引使用情况"><a href="#4-3-查看索引使用情况" class="headerlink" title="4.3 查看索引使用情况"></a>4.3 查看索引使用情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552885364563.png" alt="1552885364563"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</span><br><span class="line"></span><br><span class="line">Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始Mockito</title>
      <link href="/2020/07/12/powermock%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
      <url>/2020/07/12/powermock%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Mockito"><a href="#初识Mockito" class="headerlink" title="初识Mockito"></a>初识Mockito</h1><blockquote><p>Mockito是一个针对Java的mocking框架。将模拟对象来代替真实对象。</p></blockquote><ol><li>模拟任何外部依赖并将这些模拟对象插入测试代码中</li><li>执行测试中的代码</li><li>验证代码是否按照预期执行</li></ol><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>打开IDEA，new–&gt; project –&gt; Spring Initializr–&gt; ..–&gt;添加Spring Web…–&gt;新建项目。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="项目结构"></p><h2 id="创建Student"><a href="#创建Student" class="headerlink" title="创建Student"></a>创建Student</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.domain;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author TongJie Shao</span></span><br><span class="line"><span class="comment"> * Created by @Author  on 2020/7/11 23:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建StudentDao"><a href="#创建StudentDao" class="headerlink" title="创建StudentDao"></a>创建StudentDao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> TongJie Shao</span></span><br><span class="line"><span class="comment"> * Created by <span class="doctag">@Author</span>  on 2020/7/11 23:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="number">10</span>,<span class="string">&quot;nateshao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建StudentService"><a href="#创建StudentService" class="headerlink" title="创建StudentService"></a>创建StudentService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.nateshao.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> TongJie Shao</span></span><br><span class="line"><span class="comment"> * Created by <span class="doctag">@Author</span>  on 2020/7/11 23:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.getStudentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新建测试类StudentServiceTest"><a href="#新建测试类StudentServiceTest" class="headerlink" title="新建测试类StudentServiceTest"></a>新建测试类StudentServiceTest</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nateshao.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nateshao.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.nateshao.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.mock.mockito.MockBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> TongJie Shao</span></span><br><span class="line"><span class="comment"> * Created by <span class="doctag">@Author</span>  on 2020/7/11 23:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line">    <span class="meta">@MockBean</span><span class="comment">// 不走数据库</span></span><br><span class="line">    StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mockito.when(studentDao.getStudentById(<span class="number">1</span>)).thenReturn(<span class="keyword">new</span> Student(<span class="number">1</span>,<span class="number">10</span>,<span class="string">&quot;nateshao&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getStudentById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student student = studentService.getStudentById(<span class="number">1</span>);</span><br><span class="line">        assertNotNull(student);</span><br><span class="line">        assertEquals(student.getId(),<span class="number">1</span>);</span><br><span class="line">        assertEquals(student.getAge(),<span class="number">10</span>);</span><br><span class="line">        assertEquals(student.getName(),<span class="string">&quot;nateshao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2020/07/06/JDBC/"/>
      <url>/2020/07/06/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>JAVA Database Connectivity java 数据库连接</p></blockquote><ul><li>为什么会出现JDBC</li></ul><blockquote><p>SUN公司提供的一种数据库访问规则、规范, 由于数据库种类较多，并且java语言使用比较广泛，sun公司就提供了一种规范，让其他的数据库提供商去实现底层的访问规则。 我们的java程序只要使用sun公司提供的jdbc驱动即可。</p></blockquote><h3 id="使用JDBC的基本步骤"><a href="#使用JDBC的基本步骤" class="headerlink" title="使用JDBC的基本步骤"></a>使用JDBC的基本步骤</h3><ol><li><p>注册驱动</p><p>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</p></li><li><p>建立连接</p><p>//DriverManager.getConnection(“jdbc:mysql://localhost/test?user=monty&amp;password=greatsqldb”);</p><pre><code>       //2. 建立连接 参数一： 协议 + 访问的数据库 ， 参数二： 用户名 ， 参数三： 密码。       conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost/student&quot;, &quot;root&quot;, &quot;root&quot;);</code></pre></li><li><p>创建statement</p><p>//3. 创建statement ， 跟数据库打交道，一定需要这个对象</p><pre><code>   st = conn.createStatement();</code></pre></li><li><p>执行sql ，得到ResultSet</p><p>//4. 执行查询 ， 得到结果集</p><pre><code>       String sql = &quot;select * from t_stu&quot;;       rs = st.executeQuery(sql);</code></pre></li><li><p>遍历结果集</p><p>//5. 遍历查询每一条记录</p><pre><code>       while(rs.next())&#123;           int id = rs.getInt(&quot;id&quot;);           String name = rs.getString(&quot;name&quot;);           int age = rs.getInt(&quot;age&quot;);           System.out.println(&quot;id=&quot;+id + &quot;===name=&quot;+name+&quot;==age=&quot;+age);       &#125;</code></pre></li><li><p>释放资源</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (rs != null) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           rs.close();</span><br><span class="line">       &#125; catch (SQLException sqlEx) &#123; &#125; // ignore </span><br><span class="line">       rs = null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="JDBC-工具类构建"><a href="#JDBC-工具类构建" class="headerlink" title="JDBC 工具类构建"></a>JDBC 工具类构建</h3><ol><li>资源释放工作的整合</li></ol><ol start="2"><li>驱动防二次注册</li></ol><pre><code>   DriverManager.registerDriver(new com.mysql.jdbc.Driver());   Driver 这个类里面有静态代码块，一上来就执行了，所以等同于我们注册了两次驱动。 其实没这个必要的。   //静态代码块 ---&gt; 类加载了，就执行。 java.sql.DriverManager.registerDriver(new Driver());</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最后形成以下代码即可。</span><br><span class="line"></span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用properties配置文件</p><ol><li><p>在src底下声明一个文件 xxx.properties ，里面的内容吐下：</p><p>driverClass=com.mysql.jdbc.Driver</p><pre><code>   url=jdbc:mysql://localhost/student   name=root   password=123456</code></pre></li><li><p>在工具类里面，使用静态代码块，读取属性</p></li></ol></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static&#123;</span><br><span class="line">try &#123;</span><br><span class="line">//1. 创建一个属性配置对象</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">InputStream is = new FileInputStream(&quot;jdbc.properties&quot;); //对应文件位于工程根目录</span><br><span class="line"> </span><br><span class="line">//使用类加载器，去读取src底下的资源文件。 后面在servlet  //对应文件位于src目录底下</span><br><span class="line">//InputStream is = JDBCUtil.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">//导入输入流。</span><br><span class="line">properties.load(is);</span><br><span class="line"></span><br><span class="line">//读取属性</span><br><span class="line">driverClass = properties.getProperty(&quot;driverClass&quot;);</span><br><span class="line">url = properties.getProperty(&quot;url&quot;);</span><br><span class="line">name = properties.getProperty(&quot;name&quot;);</span><br><span class="line">password = properties.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="数据库的CRUD-sql"><a href="#数据库的CRUD-sql" class="headerlink" title="数据库的CRUD sql"></a>数据库的CRUD sql</h3><ul><li><p>insert</p><p>INSERT INTO t_stu (NAME , age) VALUES (‘wangqiang’,28)</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_stu <span class="keyword">VALUES</span> (<span class="literal">NULL</span>,<span class="string">&#x27;wangqiang2&#x27;</span>,<span class="number">28</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1. 获取连接对象</span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line">// 2. 根据连接对象，得到statement</span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">//3. 执行添加</span><br><span class="line">String sql = &quot;<span class="keyword">insert</span> <span class="keyword">into</span> t_stu <span class="keyword">values</span>(<span class="literal">null</span> , <span class="string">&#x27;aobama&#x27;</span> , <span class="number">59</span>)<span class="string">&quot;;</span></span><br><span class="line"><span class="string">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="string">int result = st.executeUpdate(sql);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(result &gt;0 )&#123;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>添加成功<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>添加失败<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>delete</p><p>DELETE FROM t_stu WHERE id = 6</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1. 获取连接对象</span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line">// 2. 根据连接对象，得到statement</span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">//3. 执行添加</span><br><span class="line">String sql = &quot;<span class="keyword">delete</span> <span class="keyword">from</span> t_stu <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;aobama&#x27;</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="string">int result = st.executeUpdate(sql);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(result &gt;0 )&#123;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>删除成功<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>删除失败<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>query</p><p>SELECT * FROM t_stu</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 1. 获取连接对象</span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line">// 2. 根据连接对象，得到statement</span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">// 3. 执行sql语句，返回ResultSet</span><br><span class="line">String sql = &quot;<span class="keyword">select</span> * <span class="keyword">from</span> t_stu<span class="string">&quot;;</span></span><br><span class="line"><span class="string">rs = st.executeQuery(sql);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 4. 遍历结果集</span></span><br><span class="line"><span class="string">while (rs.next()) &#123;</span></span><br><span class="line"><span class="string">String name = rs.getString(&quot;</span><span class="keyword">name</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">int age = rs.getInt(&quot;</span>age<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">System.out.println(name + &quot;</span>   <span class="string">&quot; + age);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>update</p><p>UPDATE t_stu SET age = 38 WHERE id = 1;</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1. 获取连接对象</span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line">// 2. 根据连接对象，得到statement</span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">//3. 执行添加</span><br><span class="line">String sql = &quot;<span class="keyword">update</span> t_stu <span class="keyword">set</span> age = <span class="number">26</span> <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">&#x27;qyq&#x27;</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="string">int result = st.executeUpdate(sql);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(result &gt;0 )&#123;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>更新成功<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>更新失败<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用单元测试，测试代码"><a href="#使用单元测试，测试代码" class="headerlink" title="使用单元测试，测试代码"></a>使用单元测试，测试代码</h3><ol><li><p>定义一个类， TestXXX , 里面定义方法 testXXX.</p></li><li><p>添加junit的支持。 </p><p>右键工程 — add Library — Junit — Junit4</p></li><li><p>在方法的上面加上注解 ， 其实就是一个标记。</p><p>@Test</p><pre><code>   public void testQuery() &#123;       ...   &#125;</code></pre></li><li><p>光标选中方法名字，然后右键执行单元测试。  或者是打开outline视图， 然后选择方法右键执行。</p></li></ol><h3 id="Dao模式"><a href="#Dao模式" class="headerlink" title="Dao模式"></a>Dao模式</h3><blockquote><p>Data Access Object 数据访问对象</p></blockquote><ol><li>新建一个dao的接口， 里面声明数据库访问规则</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义操作数据库的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>新建一个dao的实现类，具体实现早前定义的规则</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void findAll() &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">Statement st = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">try &#123;</span><br><span class="line">//1. 获取连接对象</span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line">//2. 创建statement对象</span><br><span class="line">st = conn.createStatement();</span><br><span class="line">String sql = &quot;<span class="keyword">select</span> * <span class="keyword">from</span> t_user<span class="string">&quot;;</span></span><br><span class="line"><span class="string">rs = st.executeQuery(sql);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while(rs.next())&#123;</span></span><br><span class="line"><span class="string">String userName = rs.getString(&quot;</span>username<span class="string">&quot;);</span></span><br><span class="line"><span class="string">String password = rs.getString(&quot;</span><span class="keyword">password</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">System.out.println(userName+&quot;</span>=<span class="string">&quot;+password);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="string">e.printStackTrace();</span></span><br><span class="line"><span class="string">&#125;finally &#123;</span></span><br><span class="line"><span class="string">JDBCUtil.release(conn, st, rs);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>直接使用实现</p><p>@Test</p><pre><code>   public void testFindAll()&#123;       UserDao dao = new UserDaoImpl();       dao.findAll();   &#125;</code></pre></li></ol><h2 id="Statement安全问题"><a href="#Statement安全问题" class="headerlink" title="Statement安全问题"></a>Statement安全问题</h2><ol><li>Statement执行 ，其实是拼接sql语句的。  先拼接sql语句，然后在一起执行。 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> username=<span class="string">&#x27;&quot;+ username  +&quot;&#x27;</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">&#x27;&quot;+ password +&quot;&#x27;</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">UserDao dao = new UserDaoImpl();</span></span><br><span class="line"><span class="string">dao.login(&quot;</span><span class="keyword">admin</span><span class="string">&quot;, &quot;</span><span class="number">100234</span>khsdf88<span class="string">&#x27; or &#x27;</span><span class="number">1</span>=<span class="number">1</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SELECT * FROM t_user WHERE username=&#x27;admin&#x27; AND PASSWORD=&#x27;100234khsdf88&#x27; or &#x27;1=1&#x27; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前面先拼接sql语句， 如果变量里面带有了 数据库的关键字，那么一并认为是关键字。 不认为是普通的字符串。 </span></span><br><span class="line"><span class="string">rs = st.executeQuery(sql);</span></span><br></pre></td></tr></table></figure><h2 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h2><blockquote><p>该对象就是替换前面的statement对象。</p></blockquote><ol><li>相比较以前的statement， 预先处理给定的sql语句，对其执行语法检查。 在sql语句里面使用 ? 占位符来替代后续要传递进来的变量。 后面进来的变量值，将会被看成是字符串，不会产生任何的关键字。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="literal">null</span> , ? , ?)<span class="string">&quot;;</span></span><br><span class="line"><span class="string"> ps = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> //给占位符赋值 从左到右数过来，1 代表第一个问号， 永远你是1开始。</span></span><br><span class="line"><span class="string"> ps.setString(1, userName);</span></span><br><span class="line"><span class="string"> ps.setString(2, password);</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>JDBC入门</p></li><li><p>抽取工具类  ###</p></li><li><p>Statement CRUD ###</p><p>演练crud</p></li><li><p>Dao模式  ###</p><p>声明与实现分开</p></li><li><p>PrepareStament CRUD ###</p><p>预处理sql语句，解决上面statement出现的问题</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶03-MySQL优化</title>
      <link href="/2020/07/06/MySQL%E8%BF%9B%E9%98%B603-MySQL%E4%BC%98%E5%8C%96/"/>
      <url>/2020/07/06/MySQL%E8%BF%9B%E9%98%B603-MySQL%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-优化SQL步骤"><a href="#1-优化SQL步骤" class="headerlink" title="1. 优化SQL步骤"></a>1. 优化SQL步骤</h2><p>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。</p><p>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</p><h3 id="1-1-查看SQL执行频率"><a href="#1-1-查看SQL执行频率" class="headerlink" title="1.1 查看SQL执行频率"></a>1.1 查看SQL执行频率</h3><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</p><p>下面的命令显示了当前 session 中所有统计参数的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &#x27;Com_______&#x27;;</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Com_binlog    | 0     |</span><br><span class="line">| Com_commit    | 0     |</span><br><span class="line">| Com_delete    | 0     |</span><br><span class="line">| Com_insert    | 0     |</span><br><span class="line">| Com_repair    | 0     |</span><br><span class="line">| Com_revoke    | 0     |</span><br><span class="line">| Com_select    | 1     |</span><br><span class="line">| Com_signal    | 0     |</span><br><span class="line">| Com_update    | 0     |</span><br><span class="line">| Com_xa_end    | 0     |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>  查询全局—&gt;以查询为主。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;Com_______&#x27;;</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Com_binlog    | 0     |</span><br><span class="line">| Com_commit    | 61    |</span><br><span class="line">| Com_delete    | 12    |</span><br><span class="line">| Com_insert    | 746   |</span><br><span class="line">| Com_repair    | 0     |</span><br><span class="line">| Com_revoke    | 0     |</span><br><span class="line">| Com_select    | 18598 |</span><br><span class="line">| Com_signal    | 0     |</span><br><span class="line">| Com_update    | 230   |</span><br><span class="line">| Com_xa_end    | 0     |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &#x27;Innodb_rows_%&#x27;;  // 查询Innodb的次数</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">| Variable_name        | Value  |</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">| Innodb_rows_deleted  | 19     |// 删除次数</span><br><span class="line">| Innodb_rows_inserted | 4597   |// 插入次数</span><br><span class="line">| Innodb_rows_read     | 239831 |// 读取次数</span><br><span class="line">| Innodb_rows_updated  | 231    |</span><br><span class="line">+<span class="comment">----------------------+--------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>Com_xxx 表示每个 xxx 语句执行的次数，我们通常比较关心的是以下几个统计参数。</p><table><thead><tr><th align="left">参数</th><th>含义</th></tr></thead><tbody><tr><td align="left">Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td align="left">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td></tr><tr><td align="left">Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td align="left">Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td align="left">Innodb_rows_read</td><td>select 查询返回的行数。</td></tr><tr><td align="left">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td align="left">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td align="left">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr><tr><td align="left">Connections</td><td>试图连接 MySQL 服务器的次数。</td></tr><tr><td align="left">Uptime</td><td>服务器工作时间。</td></tr><tr><td align="left">Slow_queries</td><td>慢查询的次数。</td></tr></tbody></table><p>Com_***      :  这些参数对于所有存储引擎的表操作都会进行累计。</p><p>Innodb_*** :  这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。</p><h3 id="3-2-定位低效率执行SQL"><a href="#3-2-定位低效率执行SQL" class="headerlink" title="3.2 定位低效率执行SQL"></a>3.2 定位低效率执行SQL</h3><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p><ul><li><p>慢查询日志 : <strong>通过慢查询日志定位那些执行效率较低的 SQL 语句</strong>，用–log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。</p></li><li><p>show processlist  : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用<code>show processlist</code>命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1111.png" alt="慢查询"></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1） id列，用户登录mysql时，系统分配的&quot;connection_id&quot;，可以使用函数connection_id()查看</span><br><span class="line"></span><br><span class="line">2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</span><br><span class="line"></span><br><span class="line">3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</span><br><span class="line"></span><br><span class="line">4） db列，显示这个进程目前连接的是哪个数据库</span><br><span class="line"></span><br><span class="line">5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</span><br><span class="line"></span><br><span class="line">6） time列，显示这个状态持续的时间，单位是秒</span><br><span class="line"></span><br><span class="line">7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</span><br><span class="line">8） info列，显示这个sql语句，是判断问题语句的一个重要依据</span><br></pre></td></tr></table></figure><h4 id="3-3-explain分析执行计划"><a href="#3-3-explain分析执行计划" class="headerlink" title="3.3 explain分析执行计划"></a>3.3 explain分析执行计划</h4><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552487489859.png" alt="1552487489859"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title = <span class="string">&#x27;阿尔卡特 (OT-979) 冰川白 联通3G手机3&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552487526919.png" alt="1552487526919">  </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>type</td><td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>rows</td><td>扫描行的数量</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h5 id="3-3-1-环境准备"><a href="#3-3-1-环境准备" class="headerlink" title="3.3.1 环境准备"></a>3.3.1 环境准备</h5><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556122799330.png" alt="1556122799330"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_code`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_role_name`</span> (<span class="string">`role_name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_ur_user_id`</span> (<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_ur_role_id`</span> (<span class="string">`role_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_ur_role_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_ur_user_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;系统管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui&#x27;</span>,<span class="string">&#x27;test02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;stu1&#x27;</span>,<span class="string">&#x27;$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK/y/spH5rftCpUMZa&#x27;</span>,<span class="string">&#x27;学生1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;stu2&#x27;</span>,<span class="string">&#x27;$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr/p1FR6ZKgc18u.Tvqm&#x27;</span>,<span class="string">&#x27;学生2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;t1&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;老师1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>,<span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>,<span class="string">&#x27;teachmanager&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_role(<span class="keyword">id</span>,user_id,role_id) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;9&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;10&#x27;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-3-2-explain-之-id"><a href="#3-3-2-explain-之-id" class="headerlink" title="3.3.2 explain 之 id"></a>3.3.2 explain 之 id</h5><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： </p><p>1） id 相同表示加载表的顺序是从上到下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_role r, t_user u, user_role ur <span class="keyword">where</span> r.id = ur.role_id <span class="keyword">and</span> u.id = ur.user_id ;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556102471304.png"></p><p>2） id 不同id值越大，优先级越高，越先被执行。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span> = (<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id = (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username = <span class="string">&#x27;stu1&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556103009534.png"></p><p>3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r , (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">`user_id`</span> = <span class="string">&#x27;2&#x27;</span>) a <span class="keyword">WHERE</span> r.id = a.role_id ; </span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556103294182.png"></p><h5 id="3-3-3-explain-之-select-type"><a href="#3-3-3-explain-之-select-type" class="headerlink" title="3.3.3 explain 之 select_type"></a>3.3.3 explain 之 select_type</h5><p> 表示 SELECT 的类型，常见的取值，如下表所示：</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层查询标记为该标识</td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><h5 id="3-3-4-explain-之-table"><a href="#3-3-4-explain-之-table" class="headerlink" title="3.3.4 explain 之 table"></a>3.3.4 explain 之 table</h5><p>展示这一行的数据是关于哪一张表的 </p><h5 id="3-3-5-explain-之-type"><a href="#3-3-5-explain-之-type" class="headerlink" title="3.3.5 explain 之 type"></a>3.3.5 explain 之 type</h5><p>type 显示的是访问类型，是较为重要的一个指标，可取值为： </p><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td>const</td><td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td>eq_ref</td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><p>结果值从最好到最坏以此是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>==一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。==</p><h5 id="3-3-6-explain-之-key"><a href="#3-3-6-explain-之-key" class="headerlink" title="3.3.6 explain 之  key"></a>3.3.6 explain 之  key</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </span><br><span class="line"></span><br><span class="line">key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</span><br><span class="line"></span><br><span class="line">key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</span><br></pre></td></tr></table></figure><h5 id="3-3-7-explain-之-rows"><a href="#3-3-7-explain-之-rows" class="headerlink" title="3.3.7 explain 之 rows"></a>3.3.7 explain 之 rows</h5><p>扫描行的数量。</p><h5 id="3-3-8-explain-之-extra"><a href="#3-3-8-explain-之-extra" class="headerlink" title="3.3.8 explain 之 extra"></a>3.3.8 explain 之 extra</h5><p>其他的额外的执行计划信息，在该列展示 。</p><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using  filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td></tr><tr><td>using  temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td>using  index</td><td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</td></tr></tbody></table><h4 id="3-4-show-profile分析SQL"><a href="#3-4-show-profile分析SQL" class="headerlink" title="3.4 show profile分析SQL"></a>3.4 show profile分析SQL</h4><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p><p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@have_profiling;</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| @@have_profiling |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| YES              |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@profiling;</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| @@profiling |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">|           0 |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling=<span class="number">1</span>; //开启profiling 开关；</span><br></pre></td></tr></table></figure><p>通过profile，我们能够更清楚地了解SQL执行的过程。</p><p>首先，我们可以执行一系列的操作，如下图所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure><p>执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552489017940.png" alt="1552489017940">  </p><p>通过show  profile for  query  query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552489053763.png" alt="1552489053763"> </p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIP ：</span><br><span class="line">Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</span><br></pre></td></tr></table></figure><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间  ：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552489671119.png" alt="1552489671119"> </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h4 id="3-5-trace分析优化器执行计划"><a href="#3-5-trace分析优化器执行计划" class="headerlink" title="3.5 trace分析优化器执行计划"></a>3.5 trace分析优化器执行计划</h4><p>MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p><p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace=<span class="string">&quot;enabled=on&quot;</span>,end_markers_in_json=<span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size=<span class="number">1000000</span>;</span><br></pre></td></tr></table></figure><p>执行SQL语句 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">QUERY: select * from tb_item where id &lt; 4</span><br><span class="line">TRACE: &#123;</span><br><span class="line">  &quot;steps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_preparation&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;expanded_query&quot;</span>: <span class="string">&quot;/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_preparation */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_optimization&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;condition_processing&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;condition&quot;</span>: <span class="string">&quot;WHERE&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;equality_propagation&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;constant_propagation&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;trivial_condition_removal&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* steps */</span></span><br><span class="line">            &#125; <span class="comment">/* condition_processing */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;table_dependencies&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;row_may_be_null&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;map_bit&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;depends_on_map_bits&quot;</span>: [</span><br><span class="line">                ] <span class="comment">/* depends_on_map_bits */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* table_dependencies */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;ref_optimizer_key_uses&quot;</span>: [</span><br><span class="line">            ] <span class="comment">/* ref_optimizer_key_uses */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;rows_estimation&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;range_analysis&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;table_scan&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;rows&quot;</span>: <span class="number">9816098</span>,</span><br><span class="line">                    <span class="attr">&quot;cost&quot;</span>: <span class="number">2.04e6</span></span><br><span class="line">                  &#125; <span class="comment">/* table_scan */</span>,</span><br><span class="line">                  <span class="attr">&quot;potential_range_indices&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">&quot;key_parts&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;id&quot;</span></span><br><span class="line">                      ] <span class="comment">/* key_parts */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* potential_range_indices */</span>,</span><br><span class="line">                  <span class="attr">&quot;setup_range_conditions&quot;</span>: [</span><br><span class="line">                  ] <span class="comment">/* setup_range_conditions */</span>,</span><br><span class="line">                  <span class="attr">&quot;group_index_range&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;cause&quot;</span>: <span class="string">&quot;not_group_by_or_distinct&quot;</span></span><br><span class="line">                  &#125; <span class="comment">/* group_index_range */</span>,</span><br><span class="line">                  <span class="attr">&quot;analyzing_range_alternatives&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;range_scan_alternatives&quot;</span>: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">                          <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                        ] <span class="comment">/* ranges */</span>,</span><br><span class="line">                        <span class="attr">&quot;index_dives_for_eq_ranges&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">&quot;rowid_ordered&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">&quot;using_mrr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">&quot;index_only&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="attr">&quot;cost&quot;</span>: <span class="number">1.6154</span>,</span><br><span class="line">                        <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    ] <span class="comment">/* range_scan_alternatives */</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzing_roworder_intersect&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                      <span class="attr">&quot;cause&quot;</span>: <span class="string">&quot;too_few_roworder_scans&quot;</span></span><br><span class="line">                    &#125; <span class="comment">/* analyzing_roworder_intersect */</span></span><br><span class="line">                  &#125; <span class="comment">/* analyzing_range_alternatives */</span>,</span><br><span class="line">                  <span class="attr">&quot;chosen_range_access_summary&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;range_access_plan&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;range_scan&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                      ] <span class="comment">/* ranges */</span></span><br><span class="line">                    &#125; <span class="comment">/* range_access_plan */</span>,</span><br><span class="line">                    <span class="attr">&quot;rows_for_plan&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">&quot;cost_for_plan&quot;</span>: <span class="number">1.6154</span>,</span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                  &#125; <span class="comment">/* chosen_range_access_summary */</span></span><br><span class="line">                &#125; <span class="comment">/* range_analysis */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* rows_estimation */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;considered_execution_plans&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;plan_prefix&quot;</span>: [</span><br><span class="line">                ] <span class="comment">/* plan_prefix */</span>,</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;best_access_path&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;considered_access_paths&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">&quot;access_type&quot;</span>: <span class="string">&quot;range&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">&quot;cost&quot;</span>: <span class="number">2.2154</span>,</span><br><span class="line">                      <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* considered_access_paths */</span></span><br><span class="line">                &#125; <span class="comment">/* best_access_path */</span>,</span><br><span class="line">                <span class="attr">&quot;cost_for_plan&quot;</span>: <span class="number">2.2154</span>,</span><br><span class="line">                <span class="attr">&quot;rows_for_plan&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* considered_execution_plans */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;attaching_conditions_to_tables&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;attached_conditions_computation&quot;</span>: [</span><br><span class="line">              ] <span class="comment">/* attached_conditions_computation */</span>,</span><br><span class="line">              <span class="attr">&quot;attached_conditions_summary&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;attached&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* attached_conditions_summary */</span></span><br><span class="line">            &#125; <span class="comment">/* attaching_conditions_to_tables */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;refine_plan&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;access_type&quot;</span>: <span class="string">&quot;range&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* refine_plan */</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_optimization */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_execution&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_execution */</span></span><br><span class="line">    &#125;</span><br><span class="line">  ] /* steps */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h3><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p><h4 id="4-1-验证索引提升查询效率"><a href="#4-1-验证索引提升查询效率" class="headerlink" title="4.1 验证索引提升查询效率"></a>4.1 验证索引提升查询效率</h4><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p><p>A. 根据ID查询 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_item where id &#x3D; 1999\G;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553261992653.png" alt="1553261992653"> </p><p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p><p><img src="C:\Users\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553262044466.png" alt="1553262044466"> </p><p>2). 根据 title 进行精确查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title = <span class="string">&#x27;iphoneX 移动3G 32G941&#x27;</span>\G; </span><br></pre></td></tr></table></figure><p><img src="C:\Users\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553262215900.png" alt="1553262215900"> </p><p>查看SQL语句的执行计划 ： </p><p><img src="C:\Users\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553262469785.png" alt="1553262469785"> </p><p>处理方案 ， 针对title字段， 创建索引 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(title);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553263229523.png" alt="1553263229523"> </p><p>索引创建完成之后，再次进行查询 ： </p><p><img src="C:\Users\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553263302706.png" alt="1553263302706"> </p><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p><p><img src="C:\Users\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553263355262.png" alt="1553263355262"> </p><h4 id="4-2-索引的使用"><a href="#4-2-索引的使用" class="headerlink" title="4.2 索引的使用"></a>4.2 索引的使用</h4><h5 id="4-2-1-准备环境"><a href="#4-2-1-准备环境" class="headerlink" title="4.2.1 准备环境"></a>4.2.1 准备环境</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`tb_seller`</span> (</span><br><span class="line"><span class="string">`sellerid`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`nickname`</span> <span class="built_in">varchar</span> (<span class="number">50</span>),</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">varchar</span> (<span class="number">60</span>),</span><br><span class="line"><span class="string">`status`</span> <span class="built_in">varchar</span> (<span class="number">1</span>),</span><br><span class="line"><span class="string">`address`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`createtime`</span> datetime,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">`sellerid`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;alibaba&#x27;</span>,<span class="string">&#x27;阿里巴巴&#x27;</span>,<span class="string">&#x27;阿里小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;百度科技有限公司&#x27;</span>,<span class="string">&#x27;百度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;huawei&#x27;</span>,<span class="string">&#x27;华为科技有限公司&#x27;</span>,<span class="string">&#x27;华为小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;传智播客教育科技有限公司&#x27;</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;itheima&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;luoji&#x27;</span>,<span class="string">&#x27;罗技科技有限公司&#x27;</span>,<span class="string">&#x27;罗技小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;oppo&#x27;</span>,<span class="string">&#x27;OPPO科技有限公司&#x27;</span>,<span class="string">&#x27;OPPO官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;ourpalm&#x27;</span>,<span class="string">&#x27;掌趣科技股份有限公司&#x27;</span>,<span class="string">&#x27;掌趣小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;qiandu&#x27;</span>,<span class="string">&#x27;千度科技&#x27;</span>,<span class="string">&#x27;千度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;sina&#x27;</span>,<span class="string">&#x27;新浪科技有限公司&#x27;</span>,<span class="string">&#x27;新浪官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;xiaomi&#x27;</span>,<span class="string">&#x27;小米科技&#x27;</span>,<span class="string">&#x27;小米官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;西安市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;yijia&#x27;</span>,<span class="string">&#x27;宜家家居&#x27;</span>,<span class="string">&#x27;宜家家居旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><h5 id="4-2-2-避免索引失效"><a href="#4-2-2-避免索引失效" class="headerlink" title="4.2.2 避免索引失效"></a>4.2.2 避免索引失效</h5><p>1).  全值匹配 ，对索引中所有列都指定具体值。</p><p>改情况下，索引生效，执行效率高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;小米科技&#x27;</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> address=<span class="string">&#x27;北京市&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556170997921.png" alt="1556170997921"> </p><p>2). 最左前缀法则</p><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>匹配最左前缀法则，走索引：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171348995.png" alt="1556171348995">  </p><p>违法最左前缀法则 ， 索引失效：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171428140.png" alt="1556171428140"> </p><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171662203.png" alt="1556171662203"> </p><p>3). 范围查询右边的列，不能使用索引 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172256791.png" alt="1556172256791"> </p><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><p>4). 不要在索引列上进行运算操作， 索引将失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172813715.png" alt="1556172813715"> </p><p>5). 字符串不加单引号，造成索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172967493.png" alt="1556172967493"> </p><p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><p>6). 尽量使用覆盖索引，避免select *</p><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556173928299.png" alt="1556173928299"> </p><p>如果查询列，超出索引列，也会降低性能。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556173986068.png" alt="1556173986068"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIP : </span><br><span class="line"></span><br><span class="line">    using index ：使用覆盖索引的时候就会出现</span><br><span class="line"></span><br><span class="line">    using where：在查找使用索引的情况下，需要回表去查询所需的数据</span><br><span class="line"></span><br><span class="line">    using index condition：查找使用了索引，但是需要回表查询数据</span><br><span class="line"></span><br><span class="line">    using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</span><br></pre></td></tr></table></figure><p>7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;黑马程序员&#x27;</span> <span class="keyword">or</span> createtime = <span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556174994440.png" alt="1556174994440"> </p><p>8).  以%开头的Like模糊查询，索引失效。</p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556175114369.png" alt="1556175114369"> </p><p>解决方案 ： </p><p>通过覆盖索引来解决 </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556247686483.png" alt="1556247686483"> </p><p>9). 如果MySQL评估使用索引比全表更慢，则不使用索引。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556175445210.png" alt="1556175445210"> </p><p>10). is  NULL ， is NOT NULL  <font color='red'>有时</font>索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556180634889.png" alt="1556180634889">  </p><p>11). in 走索引， not in 索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556249602732.png" alt="1556249602732">  </p><p>12). 单列索引和复合索引。</p><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create index idx_name_sta_address on tb_seller(name, status, address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">name</span><br><span class="line">name + status</span><br><span class="line">name + status + address</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建单列索引 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p><h4 id="4-3-查看索引使用情况"><a href="#4-3-查看索引使用情况" class="headerlink" title="4.3 查看索引使用情况"></a>4.3 查看索引使用情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552885364563.png" alt="1552885364563"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</span><br><span class="line"></span><br><span class="line">Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</span><br></pre></td></tr></table></figure><h3 id="5-SQL优化"><a href="#5-SQL优化" class="headerlink" title="5. SQL优化"></a>5. SQL优化</h3><h4 id="5-1-大批量插入数据"><a href="#5-1-大批量插入数据" class="headerlink" title="5.1 大批量插入数据"></a>5.1 大批量插入数据</h4><p>环境准备 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user_2`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户状态&#x27;</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br></pre></td></tr></table></figure><p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556269346488.png" alt="1556269346488"> </p><p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p><p>1） 主键顺序插入</p><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脚本文件介绍 :</span><br><span class="line">sql1.log  ----&gt; 主键有序</span><br><span class="line">sql2.log  ----&gt; 主键无序</span><br></pre></td></tr></table></figure><p>插入ID顺序排列数据：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555771750567.png" alt="1555771750567"></p><p>插入ID无序排列数据：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555771959734.png" alt="1555771959734"> </p><p>2） 关闭唯一性校验</p><p>在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555772132736.png" alt="1555772132736"> </p><p>3） 手动提交事务</p><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555772351208.png" alt="1555772351208"></p><h4 id="5-2-优化insert语句"><a href="#5-2-优化insert语句" class="headerlink" title="5.2 优化insert语句"></a>5.2 优化insert语句</h4><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><p>示例， 原始方式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure><p>优化后的方案为 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>)，(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在事务中进行数据插入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>数据有序插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure><p>优化后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-优化order-by语句"><a href="#5-3-优化order-by语句" class="headerlink" title="5.3 优化order by语句"></a>5.3 优化order by语句</h4><h5 id="5-3-1-环境准备"><a href="#5-3-1-环境准备" class="headerlink" title="5.3.1 环境准备"></a>5.3.1 环境准备</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`emp`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;Luci&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2800&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Jay&#x27;</span>,<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;Tom2&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;2200&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;Jerry2&#x27;</span>,<span class="string">&#x27;31&#x27;</span>,<span class="string">&#x27;3300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;Luci2&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2700&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;Jay2&#x27;</span>,<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;Tom3&#x27;</span>,<span class="string">&#x27;23&#x27;</span>,<span class="string">&#x27;2400&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;Jerry3&#x27;</span>,<span class="string">&#x27;32&#x27;</span>,<span class="string">&#x27;3100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;Luci3&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2900&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;Jay3&#x27;</span>,<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;4500&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);</span><br></pre></td></tr></table></figure><h5 id="5-3-2-两种排序方式"><a href="#5-3-2-两种排序方式" class="headerlink" title="5.3.2 两种排序方式"></a>5.3.2 两种排序方式</h5><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556335817763.png" alt="1556335817763"> </p><p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556335866539.png" alt="1556335866539"> </p><p>多字段排序</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556336352061.png" alt="1556336352061"> </p><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p><h5 id="5-3-3-Filesort-的优化"><a href="#5-3-3-Filesort-的优化" class="headerlink" title="5.3.3 Filesort 的优化"></a>5.3.3 Filesort 的优化</h5><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><p>1） 两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p><p>2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556338367593.png" alt="1556338367593"> </p><h4 id="5-4-优化group-by-语句"><a href="#5-4-优化group-by-语句" class="headerlink" title="5.4 优化group by 语句"></a>5.4 优化group by 语句</h4><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556339573979.png" alt="1556339573979">  </p><p>优化后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556339633161.png" alt="1556339633161">  </p><p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order  by  null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary)；</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556339688158.png" alt="1556339688158"> </p><h4 id="5-5-优化嵌套查询"><a href="#5-5-优化嵌套查询" class="headerlink" title="5.5 优化嵌套查询"></a>5.5 优化嵌套查询</h4><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>示例 ，查找有角色的所有的用户信息 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role );</span><br></pre></td></tr></table></figure><p>执行计划为 : </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556359399199.png" alt="1556359399199">   </p><p>优化后 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u , user_role ur <span class="keyword">where</span> u.id = ur.user_id;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556359482142.png" alt="1556359482142">   </p><p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p><h4 id="5-6-优化OR条件"><a href="#5-6-优化OR条件" class="headerlink" title="5.6 优化OR条件"></a>5.6 优化OR条件</h4><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p><p>获取 emp 表中的所有的索引 ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556354464657.png" alt="1556354464657">  </p><p>示例 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">or</span> age = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556354887509.png" alt="1556354887509"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556354920964.png" alt="1556354920964">  </p><p>建议使用 union 替换 or ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556355027728.png" alt="1556355027728"> </p><p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p><p>type 显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距</p><p>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</p><p>这两项的差距就说明了 UNION 要优于 OR 。</p><h4 id="5-7-优化分页查询"><a href="#5-7-优化分页查询" class="headerlink" title="5.7 优化分页查询"></a>5.7 优化分页查询</h4><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556361314783.png" alt="1556361314783"> </p><h5 id="5-7-1-优化思路一"><a href="#5-7-1-优化思路一" class="headerlink" title="5.7.1 优化思路一"></a>5.7.1 优化思路一</h5><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556416102800.png" alt="1556416102800"> </p><h5 id="5-7-2-优化思路二"><a href="#5-7-2-优化思路二" class="headerlink" title="5.7.2 优化思路二"></a>5.7.2 优化思路二</h5><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556363928151.png" alt="1556363928151"> </p><h4 id="5-8-使用SQL提示"><a href="#5-8-使用SQL提示" class="headerlink" title="5.8 使用SQL提示"></a>5.8 使用SQL提示</h4><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><h5 id="5-8-1-USE-INDEX"><a href="#5-8-1-USE-INDEX" class="headerlink" title="5.8.1 USE INDEX"></a>5.8.1 USE INDEX</h5><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556370971576.png" alt="1556370971576"> </p><h5 id="5-8-2-IGNORE-INDEX"><a href="#5-8-2-IGNORE-INDEX" class="headerlink" title="5.8.2 IGNORE INDEX"></a>5.8.2 IGNORE INDEX</h5><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller ignore index(idx_seller_name) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556371004594.png" alt="1556371004594"> </p><h5 id="5-8-3-FORCE-INDEX"><a href="#5-8-3-FORCE-INDEX" class="headerlink" title="5.8.3 FORCE INDEX"></a>5.8.3 FORCE INDEX</h5><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556371355788.png" alt="1556371355788"> </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶02(存储引擎)</title>
      <link href="/2020/07/04/MySQL%E8%BF%9B%E9%98%B602-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2020/07/04/MySQL%E8%BF%9B%E9%98%B602-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Mysql的体系结构概览"><a href="#1-Mysql的体系结构概览" class="headerlink" title="1. Mysql的体系结构概览"></a>1. Mysql的体系结构概览</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/000001.jpg"> </p><p>整个MySQL Server由以下组成</p><ul><li>Connection Pool : 连接池组件</li><li>Management Services &amp; Utilities : 管理服务和工具组件</li><li>SQL Interface : SQL接口组件</li><li>Parser : 查询分析器组件</li><li>Optimizer : 优化器组件</li><li>Caches &amp; Buffers : 缓冲池组件</li><li>Pluggable Storage Engines : 存储引擎</li><li>File System : 文件系统</li></ul><p><strong>1） 连接层</strong></p><p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p><p><strong>2） 服务层</strong></p><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><p><strong>3） 引擎层</strong></p><p>存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p><p><strong>4）存储层</strong></p><p>数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p><p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><h2 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h2><h4 id="2-1-存储引擎概述"><a href="#2-1-存储引擎概述" class="headerlink" title="2.1 存储引擎概述"></a>2.1 存储引擎概述</h4><p>​    和大多数的数据库不同, MySQL中有一个存储引擎的概念, 针对不同的存储需求可以选择最优的存储引擎。</p><p>​    存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型。</p><p>​    Oracle，SqlServer等数据库只有一种存储引擎。MySQL提供了插件式的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。</p><p>​    MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。</p><p>可以通过指定 show engines ， 来查询当前数据库支持的存储引擎 ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1.png"></p><p>创建新表时如果不指定存储引擎，那么系统就会使用默认的存储引擎，MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</p><p>查看Mysql数据库默认的存储引擎 ， 指令 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show variables like &#x27;%storage_engine%&#x27; ;</span><br><span class="line">+<span class="comment">----------------------------------+--------+</span></span><br><span class="line">| Variable_name                    | Value  |</span><br><span class="line">+<span class="comment">----------------------------------+--------+</span></span><br><span class="line">| default_storage_engine           | InnoDB |</span><br><span class="line">| default_tmp_storage_engine       | InnoDB |</span><br><span class="line">| disabled_storage_engines         |        |</span><br><span class="line">| internal_tmp_disk_storage_engine | InnoDB |</span><br><span class="line">+<span class="comment">----------------------------------+--------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-各种存储引擎特性"><a href="#2-2-各种存储引擎特性" class="headerlink" title="2.2 各种存储引擎特性"></a>2.2 各种存储引擎特性</h4><p>下面重点介绍几种常用的存储引擎， 并对比各个存储引擎之间的区别， 如下表所示 ： </p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td>==支持==</td><td></td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>==行锁(适合高并发)==</td><td>==表锁==</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>==支持==</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面我们将重点介绍最长使用的两种存储引擎： <strong>InnoDB</strong>、<strong>MyISAM</strong> ， 另外两种 MEMORY、MERGE ， 了解即可。</p><h5 id="2-2-1-InnoDB"><a href="#2-2-1-InnoDB" class="headerlink" title="2.2.1 InnoDB"></a>2.2.1 InnoDB</h5><p>​    <strong>InnoDB存储引擎是Mysql的默认存储引擎</strong>。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p><p>InnoDB存储引擎不同于其他存储引擎的特点 ： </p><p><strong>事务控制</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_innodb(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">innodb</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into goods_innodb(id,name)values(null,&#x27;Meta20&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>测试，发现在InnoDB中是存在事务的 ；</p><p><strong>外键约束</strong></p><p>​    MySQL支持外键的存储引擎只有InnoDB ， 在创建外键的时候， 要求父表必须有对应的索引 ， 子表在创建外键的时候， 也会自动的创建对应的索引。</p><p>​    下面两张表中 ， country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主键country_id 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">country_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    country_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(country_id)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">city_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    city_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    country_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(city_id),</span><br><span class="line">    <span class="keyword">key</span> idx_fk_country_id(country_id),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`fk_city_country`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(country_id) <span class="keyword">REFERENCES</span> country_innodb(country_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&#x27;China&#x27;</span>),(<span class="literal">null</span>,<span class="string">&#x27;America&#x27;</span>),(<span class="literal">null</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&#x27;Xian&#x27;</span>,<span class="number">1</span>),(<span class="literal">null</span>,<span class="string">&#x27;NewYork&#x27;</span>,<span class="number">2</span>),(<span class="literal">null</span>,<span class="string">&#x27;BeiJing&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在创建索引时， 可以指定在删除、更新父表时，对子表进行的相应操作，包括 RESTRICT、CASCADE、SET NULL 和 NO ACTION。</p><p>RESTRICT和NO ACTION相同， 是指限制在子表有关联记录的情况下， 父表不能更新；</p><p>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；</p><p>SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被SET NULL 。</p><p>针对上面创建的两个表， 子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</p><p>表中数据如下图所示 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from country_innodb;</span><br><span class="line">+<span class="comment">------------+--------------+</span></span><br><span class="line">| country_id | country_name |</span><br><span class="line">+<span class="comment">------------+--------------+</span></span><br><span class="line">|          1 | China        |</span><br><span class="line">|          2 | America      |</span><br><span class="line">|          3 | Japan        |</span><br><span class="line">+<span class="comment">------------+--------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;</span><br><span class="line">+<span class="comment">---------+-----------+------------+</span></span><br><span class="line">| city_id | city_name | country_id |</span><br><span class="line">+<span class="comment">---------+-----------+------------+</span></span><br><span class="line">|       1 | Xian      |          1 |</span><br><span class="line">|       2 | NewYork   |          2 |</span><br><span class="line">|       3 | BeiJing   |          1 |</span><br><span class="line">+<span class="comment">---------+-----------+------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>外键信息可以使用如下两种方式查看 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table city_innodb ;</span><br><span class="line">+<span class="comment">-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table       | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                                                                                                     |</span><br><span class="line">+<span class="comment">-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| city_innodb | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`city_innodb`</span> (</span><br><span class="line">  <span class="string">`city_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`city_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`city_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_fk_country_id`</span> (<span class="string">`country_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_city_country`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`country_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`country_innodb`</span> (<span class="string">`country_id`</span>) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>删除country_id为1 的country数据： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> country_innodb <span class="keyword">where</span> country_id = <span class="number">1</span>;      </span><br></pre></td></tr></table></figure><p>更新主表country表的字段 country_id : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update country_innodb set country_id = 100 where country_id = 1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><p>更新后， 子表的数据信息为 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from city_innodb;</span><br><span class="line">+<span class="comment">---------+-----------+------------+</span></span><br><span class="line">| city_id | city_name | country_id |</span><br><span class="line">+<span class="comment">---------+-----------+------------+</span></span><br><span class="line">|       1 | Xian      |        100 |</span><br><span class="line">|       2 | NewYork   |          2 |</span><br><span class="line">|       3 | BeiJing   |        100 |</span><br><span class="line">+<span class="comment">---------+-----------+------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>存储方式</strong>    </p><p>InnoDB 存储表和索引有以下两种方式 ： </p><p>①. 使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</p><p>②. 使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在 .ibd 中。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556075336630.png" alt="1556075336630"> </p><h5 id="2-2-2-MyISAM"><a href="#2-2-2-MyISAM" class="headerlink" title="2.2.2 MyISAM"></a>2.2.2 MyISAM</h5><p>​    MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 。有以下两个比较重要的特点： </p><p><strong>不支持事务</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_myisam(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=myisam <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1551347590309.png" alt="1551347590309"> </p><p>通过测试，我们发现，在MyISAM存储引擎中，是没有事务控制的 ；</p><p><strong>文件存储方式</strong></p><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是 ： </p><p>.frm (存储表定义)；</p><p>.MYD(MYData , 存储数据)；</p><p>.MYI(MYIndex , 存储索引)；</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556075073836.png" alt="1556075073836"> </p><h5 id="2-2-3-MEMORY"><a href="#2-2-3-MEMORY" class="headerlink" title="2.2.3 MEMORY"></a>2.2.3 MEMORY</h5><p>​    Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用HASH索引 ， 但是服务一旦关闭，表中的数据就会丢失。</p><h5 id="2-2-4-MERGE"><a href="#2-2-4-MERGE" class="headerlink" title="2.2.4 MERGE"></a>2.2.4 MERGE</h5><p>​    MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的。</p><p>​    对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST 或 LAST 值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</p><p>​    可以对MERGE表进行DROP操作，但是这个操作只是删除MERGE表的定义，对内部的表是没有任何影响的。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556076359503.png" alt="1556076359503"> </p><p>下面是一个创建和使用MERGE表的示例 ： </p><p>1）. 创建3个测试表 order_1990, order_1991, order_all , 其中order_all是前两个表的MERGE表 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1990(</span><br><span class="line">order_id <span class="built_in">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">primary <span class="keyword">key</span> (order_id)</span><br><span class="line">)<span class="keyword">engine</span> = myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1991(</span><br><span class="line">order_id <span class="built_in">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">primary <span class="keyword">key</span> (order_id)</span><br><span class="line">)<span class="keyword">engine</span> = myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_all(</span><br><span class="line">order_id <span class="built_in">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">primary <span class="keyword">key</span> (order_id)</span><br><span class="line">)<span class="keyword">engine</span> = <span class="keyword">merge</span> <span class="keyword">union</span> = (order_1990,order_1991) INSERT_METHOD=<span class="keyword">LAST</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）. 分别向两张表中插入记录 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100.0</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">100.0</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">200.0</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">200.0</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure><p>3）. 查询3张表中的数据。</p><p>order_1990中的数据 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from order_1990;</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">| order_id | order_money | order_address |</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">|        1 |      100.00 | 北京          |</span><br><span class="line">|        2 |      100.00 | 上海          |</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>order_1991中的数据 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from order_1991;</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">| order_id | order_money | order_address |</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">|       10 |      200.00 | 北京          |</span><br><span class="line">|       11 |      200.00 | 上海          |</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>order_all中的数据 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from order_all;</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">| order_id | order_money | order_address |</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">|        1 |      100.00 | 北京          |</span><br><span class="line">|        2 |      100.00 | 上海          |</span><br><span class="line">|       10 |      200.00 | 北京          |</span><br><span class="line">|       11 |      200.00 | 上海          |</span><br><span class="line">+<span class="comment">----------+-------------+---------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>4）. 往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是LAST，那么插入的数据会想最后一张表中插入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_all <span class="keyword">values</span>(<span class="number">100</span>,<span class="number">10000.0</span>,<span class="string">&#x27;西安&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-3-存储引擎的选择"><a href="#2-3-存储引擎的选择" class="headerlink" title="2.3 存储引擎的选择"></a>2.3 存储引擎的选择</h4><p>​    在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。以下是几种常用的存储引擎的使用环境。</p><ul><li>InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询意外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。</li><li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率。这对于存储诸如数据仓储等VLDB环境十分合适。</li></ul><h3 id="3-优化SQL步骤"><a href="#3-优化SQL步骤" class="headerlink" title="3. 优化SQL步骤"></a>3. 优化SQL步骤</h3><p>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。</p><p>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</p><h4 id="3-1-查看SQL执行频率"><a href="#3-1-查看SQL执行频率" class="headerlink" title="3.1 查看SQL执行频率"></a>3.1 查看SQL执行频率</h4><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</p><p>下面的命令显示了当前 session 中所有统计参数的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Com_______&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552487172501.png" alt="1552487172501">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Innodb_rows_%&#39;;</span><br></pre></td></tr></table></figure><p>![1552487245859](C:\Users\邵桐杰\Desktop\资料-MySQL高级教程\MySQL 高级 - day-02\文档\assets\1552487245859.png)</p><p>Com_xxx 表示每个 xxx 语句执行的次数，我们通常比较关心的是以下几个统计参数。</p><table><thead><tr><th align="left">参数</th><th>含义</th></tr></thead><tbody><tr><td align="left">Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td align="left">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td></tr><tr><td align="left">Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td align="left">Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td align="left">Innodb_rows_read</td><td>select 查询返回的行数。</td></tr><tr><td align="left">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td align="left">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td align="left">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr><tr><td align="left">Connections</td><td>试图连接 MySQL 服务器的次数。</td></tr><tr><td align="left">Uptime</td><td>服务器工作时间。</td></tr><tr><td align="left">Slow_queries</td><td>慢查询的次数。</td></tr></tbody></table><p>Com_***      :  这些参数对于所有存储引擎的表操作都会进行累计。</p><p>Innodb_*** :  这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。</p><h4 id="3-2-定位低效率执行SQL"><a href="#3-2-定位低效率执行SQL" class="headerlink" title="3.2 定位低效率执行SQL"></a>3.2 定位低效率执行SQL</h4><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p><ul><li>慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。具体可以查看本书第 26 章中日志管理的相关部分。</li><li>show processlist  : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li></ul><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556098544349.png" alt="1556098544349"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1） id列，用户登录mysql时，系统分配的&quot;connection_id&quot;，可以使用函数connection_id()查看</span><br><span class="line"></span><br><span class="line">2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</span><br><span class="line"></span><br><span class="line">3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</span><br><span class="line"></span><br><span class="line">4） db列，显示这个进程目前连接的是哪个数据库</span><br><span class="line"></span><br><span class="line">5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</span><br><span class="line"></span><br><span class="line">6） time列，显示这个状态持续的时间，单位是秒</span><br><span class="line"></span><br><span class="line">7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</span><br><span class="line"></span><br><span class="line">8） info列，显示这个sql语句，是判断问题语句的一个重要依据</span><br></pre></td></tr></table></figure><h4 id="3-3-explain分析执行计划"><a href="#3-3-explain分析执行计划" class="headerlink" title="3.3 explain分析执行计划"></a>3.3 explain分析执行计划</h4><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552487489859.png" alt="1552487489859"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title = <span class="string">&#x27;阿尔卡特 (OT-979) 冰川白 联通3G手机3&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552487526919.png" alt="1552487526919">  </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>type</td><td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>rows</td><td>扫描行的数量</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h5 id="3-3-1-环境准备"><a href="#3-3-1-环境准备" class="headerlink" title="3.3.1 环境准备"></a>3.3.1 环境准备</h5><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556122799330.png" alt="1556122799330"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_code`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_role_name`</span> (<span class="string">`role_name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_ur_user_id`</span> (<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_ur_role_id`</span> (<span class="string">`role_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_ur_role_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_ur_user_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;系统管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui&#x27;</span>,<span class="string">&#x27;test02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;stu1&#x27;</span>,<span class="string">&#x27;$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK/y/spH5rftCpUMZa&#x27;</span>,<span class="string">&#x27;学生1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;stu2&#x27;</span>,<span class="string">&#x27;$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr/p1FR6ZKgc18u.Tvqm&#x27;</span>,<span class="string">&#x27;学生2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;t1&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;老师1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>,<span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>,<span class="string">&#x27;teachmanager&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_role(<span class="keyword">id</span>,user_id,role_id) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;9&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="literal">NULL</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;10&#x27;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-3-2-explain-之-id"><a href="#3-3-2-explain-之-id" class="headerlink" title="3.3.2 explain 之 id"></a>3.3.2 explain 之 id</h5><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： </p><p>1） id 相同表示加载表的顺序是从上到下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_role r, t_user u, user_role ur where r.id &#x3D; ur.role_id and u.id &#x3D; ur.user_id ;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556102471304.png" alt="1556102471304"></p><p>2） id 不同id值越大，优先级越高，越先被执行。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span> = (<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id = (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username = <span class="string">&#x27;stu1&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556103009534.png" alt="1556103009534"> </p><p>3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r , (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">`user_id`</span> = <span class="string">&#x27;2&#x27;</span>) a <span class="keyword">WHERE</span> r.id = a.role_id ; </span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556103294182.png" alt="1556103294182"> </p><h5 id="3-3-3-explain-之-select-type"><a href="#3-3-3-explain-之-select-type" class="headerlink" title="3.3.3 explain 之 select_type"></a>3.3.3 explain 之 select_type</h5><p> 表示 SELECT 的类型，常见的取值，如下表所示：</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层查询标记为该标识</td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><h5 id="3-3-4-explain-之-table"><a href="#3-3-4-explain-之-table" class="headerlink" title="3.3.4 explain 之 table"></a>3.3.4 explain 之 table</h5><p>展示这一行的数据是关于哪一张表的 </p><h5 id="3-3-5-explain-之-type"><a href="#3-3-5-explain-之-type" class="headerlink" title="3.3.5 explain 之 type"></a>3.3.5 explain 之 type</h5><p>type 显示的是访问类型，是较为重要的一个指标，可取值为： </p><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td>const</td><td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td>eq_ref</td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><p>结果值从最好到最坏以此是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>==一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。==</p><h5 id="3-3-6-explain-之-key"><a href="#3-3-6-explain-之-key" class="headerlink" title="3.3.6 explain 之  key"></a>3.3.6 explain 之  key</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </span><br><span class="line"></span><br><span class="line">key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</span><br><span class="line"></span><br><span class="line">key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</span><br></pre></td></tr></table></figure><h5 id="3-3-7-explain-之-rows"><a href="#3-3-7-explain-之-rows" class="headerlink" title="3.3.7 explain 之 rows"></a>3.3.7 explain 之 rows</h5><p>扫描行的数量。</p><h5 id="3-3-8-explain-之-extra"><a href="#3-3-8-explain-之-extra" class="headerlink" title="3.3.8 explain 之 extra"></a>3.3.8 explain 之 extra</h5><p>其他的额外的执行计划信息，在该列展示 。</p><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using  filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td></tr><tr><td>using  temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td>using  index</td><td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</td></tr></tbody></table><h4 id="3-4-show-profile分析SQL"><a href="#3-4-show-profile分析SQL" class="headerlink" title="3.4 show profile分析SQL"></a>3.4 show profile分析SQL</h4><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p><p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile：</p><p>![1552488401999](C:\Users\邵桐杰\Desktop\资料-MySQL高级教程\MySQL 高级 - day-02\文档\assets\1552488401999.png) </p><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552488372405.png" alt="1552488372405"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling=<span class="number">1</span>; //开启profiling 开关；</span><br></pre></td></tr></table></figure><p>通过profile，我们能够更清楚地了解SQL执行的过程。</p><p>首先，我们可以执行一系列的操作，如下图所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure><p>执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552489017940.png" alt="1552489017940">  </p><p>通过show  profile for  query  query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552489053763.png" alt="1552489053763"> </p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIP ：</span><br><span class="line">Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</span><br></pre></td></tr></table></figure><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间  ：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552489671119.png" alt="1552489671119"> </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h4 id="3-5-trace分析优化器执行计划"><a href="#3-5-trace分析优化器执行计划" class="headerlink" title="3.5 trace分析优化器执行计划"></a>3.5 trace分析优化器执行计划</h4><p>MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p><p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace=<span class="string">&quot;enabled=on&quot;</span>,end_markers_in_json=<span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size=<span class="number">1000000</span>;</span><br></pre></td></tr></table></figure><p>执行SQL语句 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">QUERY: select * from tb_item where id &lt; 4</span><br><span class="line">TRACE: &#123;</span><br><span class="line">  &quot;steps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_preparation&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;expanded_query&quot;</span>: <span class="string">&quot;/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_preparation */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_optimization&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;condition_processing&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;condition&quot;</span>: <span class="string">&quot;WHERE&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;equality_propagation&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;constant_propagation&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span>: <span class="string">&quot;trivial_condition_removal&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* steps */</span></span><br><span class="line">            &#125; <span class="comment">/* condition_processing */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;table_dependencies&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;row_may_be_null&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;map_bit&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;depends_on_map_bits&quot;</span>: [</span><br><span class="line">                ] <span class="comment">/* depends_on_map_bits */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* table_dependencies */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;ref_optimizer_key_uses&quot;</span>: [</span><br><span class="line">            ] <span class="comment">/* ref_optimizer_key_uses */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;rows_estimation&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;range_analysis&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;table_scan&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;rows&quot;</span>: <span class="number">9816098</span>,</span><br><span class="line">                    <span class="attr">&quot;cost&quot;</span>: <span class="number">2.04e6</span></span><br><span class="line">                  &#125; <span class="comment">/* table_scan */</span>,</span><br><span class="line">                  <span class="attr">&quot;potential_range_indices&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">&quot;key_parts&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;id&quot;</span></span><br><span class="line">                      ] <span class="comment">/* key_parts */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* potential_range_indices */</span>,</span><br><span class="line">                  <span class="attr">&quot;setup_range_conditions&quot;</span>: [</span><br><span class="line">                  ] <span class="comment">/* setup_range_conditions */</span>,</span><br><span class="line">                  <span class="attr">&quot;group_index_range&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;cause&quot;</span>: <span class="string">&quot;not_group_by_or_distinct&quot;</span></span><br><span class="line">                  &#125; <span class="comment">/* group_index_range */</span>,</span><br><span class="line">                  <span class="attr">&quot;analyzing_range_alternatives&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;range_scan_alternatives&quot;</span>: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">                          <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                        ] <span class="comment">/* ranges */</span>,</span><br><span class="line">                        <span class="attr">&quot;index_dives_for_eq_ranges&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">&quot;rowid_ordered&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">&quot;using_mrr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">&quot;index_only&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="attr">&quot;cost&quot;</span>: <span class="number">1.6154</span>,</span><br><span class="line">                        <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    ] <span class="comment">/* range_scan_alternatives */</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzing_roworder_intersect&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                      <span class="attr">&quot;cause&quot;</span>: <span class="string">&quot;too_few_roworder_scans&quot;</span></span><br><span class="line">                    &#125; <span class="comment">/* analyzing_roworder_intersect */</span></span><br><span class="line">                  &#125; <span class="comment">/* analyzing_range_alternatives */</span>,</span><br><span class="line">                  <span class="attr">&quot;chosen_range_access_summary&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;range_access_plan&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;range_scan&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">&quot;ranges&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                      ] <span class="comment">/* ranges */</span></span><br><span class="line">                    &#125; <span class="comment">/* range_access_plan */</span>,</span><br><span class="line">                    <span class="attr">&quot;rows_for_plan&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">&quot;cost_for_plan&quot;</span>: <span class="number">1.6154</span>,</span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                  &#125; <span class="comment">/* chosen_range_access_summary */</span></span><br><span class="line">                &#125; <span class="comment">/* range_analysis */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* rows_estimation */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;considered_execution_plans&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;plan_prefix&quot;</span>: [</span><br><span class="line">                ] <span class="comment">/* plan_prefix */</span>,</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;best_access_path&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;considered_access_paths&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">&quot;access_type&quot;</span>: <span class="string">&quot;range&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">&quot;cost&quot;</span>: <span class="number">2.2154</span>,</span><br><span class="line">                      <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* considered_access_paths */</span></span><br><span class="line">                &#125; <span class="comment">/* best_access_path */</span>,</span><br><span class="line">                <span class="attr">&quot;cost_for_plan&quot;</span>: <span class="number">2.2154</span>,</span><br><span class="line">                <span class="attr">&quot;rows_for_plan&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;chosen&quot;</span>: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* considered_execution_plans */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;attaching_conditions_to_tables&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;attached_conditions_computation&quot;</span>: [</span><br><span class="line">              ] <span class="comment">/* attached_conditions_computation */</span>,</span><br><span class="line">              <span class="attr">&quot;attached_conditions_summary&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;attached&quot;</span>: <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* attached_conditions_summary */</span></span><br><span class="line">            &#125; <span class="comment">/* attaching_conditions_to_tables */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;refine_plan&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;`tb_item`&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;access_type&quot;</span>: <span class="string">&quot;range&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* refine_plan */</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_optimization */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;join_execution&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;select#&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;steps&quot;</span>: [</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_execution */</span></span><br><span class="line">    &#125;</span><br><span class="line">  ] /* steps */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h3><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p><h4 id="4-1-验证索引提升查询效率"><a href="#4-1-验证索引提升查询效率" class="headerlink" title="4.1 验证索引提升查询效率"></a>4.1 验证索引提升查询效率</h4><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p><p>A. 根据ID查询 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_item where id &#x3D; 1999\G;</span><br></pre></td></tr></table></figure><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553261992653.png" alt="1553261992653"> </p><p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553262044466.png" alt="1553262044466"> </p><p>2). 根据 title 进行精确查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title = <span class="string">&#x27;iphoneX 移动3G 32G941&#x27;</span>\G; </span><br></pre></td></tr></table></figure><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553262215900.png" alt="1553262215900"> </p><p>查看SQL语句的执行计划 ： </p><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553262469785.png" alt="1553262469785"> </p><p>处理方案 ， 针对title字段， 创建索引 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(title);</span><br></pre></td></tr></table></figure><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553263229523.png" alt="1553263229523"> </p><p>索引创建完成之后，再次进行查询 ： </p><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553263302706.png" alt="1553263302706"> </p><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-02\文档\assets\1553263355262.png" alt="1553263355262"> </p><h4 id="4-2-索引的使用"><a href="#4-2-索引的使用" class="headerlink" title="4.2 索引的使用"></a>4.2 索引的使用</h4><h5 id="4-2-1-准备环境"><a href="#4-2-1-准备环境" class="headerlink" title="4.2.1 准备环境"></a>4.2.1 准备环境</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`tb_seller`</span> (</span><br><span class="line"><span class="string">`sellerid`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`nickname`</span> <span class="built_in">varchar</span> (<span class="number">50</span>),</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">varchar</span> (<span class="number">60</span>),</span><br><span class="line"><span class="string">`status`</span> <span class="built_in">varchar</span> (<span class="number">1</span>),</span><br><span class="line"><span class="string">`address`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`createtime`</span> datetime,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">`sellerid`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;alibaba&#x27;</span>,<span class="string">&#x27;阿里巴巴&#x27;</span>,<span class="string">&#x27;阿里小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;百度科技有限公司&#x27;</span>,<span class="string">&#x27;百度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;huawei&#x27;</span>,<span class="string">&#x27;华为科技有限公司&#x27;</span>,<span class="string">&#x27;华为小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;传智播客教育科技有限公司&#x27;</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;itheima&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;luoji&#x27;</span>,<span class="string">&#x27;罗技科技有限公司&#x27;</span>,<span class="string">&#x27;罗技小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;oppo&#x27;</span>,<span class="string">&#x27;OPPO科技有限公司&#x27;</span>,<span class="string">&#x27;OPPO官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;ourpalm&#x27;</span>,<span class="string">&#x27;掌趣科技股份有限公司&#x27;</span>,<span class="string">&#x27;掌趣小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;qiandu&#x27;</span>,<span class="string">&#x27;千度科技&#x27;</span>,<span class="string">&#x27;千度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;sina&#x27;</span>,<span class="string">&#x27;新浪科技有限公司&#x27;</span>,<span class="string">&#x27;新浪官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;xiaomi&#x27;</span>,<span class="string">&#x27;小米科技&#x27;</span>,<span class="string">&#x27;小米官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;西安市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">&#x27;yijia&#x27;</span>,<span class="string">&#x27;宜家家居&#x27;</span>,<span class="string">&#x27;宜家家居旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><h5 id="4-2-2-避免索引失效"><a href="#4-2-2-避免索引失效" class="headerlink" title="4.2.2 避免索引失效"></a>4.2.2 避免索引失效</h5><p>1).  全值匹配 ，对索引中所有列都指定具体值。</p><p>改情况下，索引生效，执行效率高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;小米科技&#x27;</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> address=<span class="string">&#x27;北京市&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556170997921.png" alt="1556170997921"> </p><p>2). 最左前缀法则</p><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>匹配最左前缀法则，走索引：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171348995.png" alt="1556171348995">  </p><p>违法最左前缀法则 ， 索引失效：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171428140.png" alt="1556171428140"> </p><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556171662203.png" alt="1556171662203"> </p><p>3). 范围查询右边的列，不能使用索引 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172256791.png" alt="1556172256791"> </p><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><p>4). 不要在索引列上进行运算操作， 索引将失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172813715.png" alt="1556172813715"> </p><p>5). 字符串不加单引号，造成索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556172967493.png" alt="1556172967493"> </p><p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><p>6). 尽量使用覆盖索引，避免select *</p><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556173928299.png" alt="1556173928299"> </p><p>如果查询列，超出索引列，也会降低性能。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556173986068.png" alt="1556173986068"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIP : </span><br><span class="line"></span><br><span class="line">    using index ：使用覆盖索引的时候就会出现</span><br><span class="line"></span><br><span class="line">    using where：在查找使用索引的情况下，需要回表去查询所需的数据</span><br><span class="line"></span><br><span class="line">    using index condition：查找使用了索引，但是需要回表查询数据</span><br><span class="line"></span><br><span class="line">    using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</span><br></pre></td></tr></table></figure><p>7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;黑马程序员&#x27;</span> <span class="keyword">or</span> createtime = <span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556174994440.png" alt="1556174994440"> </p><p>8).  以%开头的Like模糊查询，索引失效。</p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556175114369.png" alt="1556175114369"> </p><p>解决方案 ： </p><p>通过覆盖索引来解决 </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556247686483.png" alt="1556247686483"> </p><p>9). 如果MySQL评估使用索引比全表更慢，则不使用索引。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556175445210.png" alt="1556175445210"> </p><p>10). is  NULL ， is NOT NULL  <font color='red'>有时</font>索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556180634889.png" alt="1556180634889">  </p><p>11). in 走索引， not in 索引失效。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556249602732.png" alt="1556249602732">  </p><p>12). 单列索引和复合索引。</p><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create index idx_name_sta_address on tb_seller(name, status, address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">name</span><br><span class="line">name + status</span><br><span class="line">name + status + address</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建单列索引 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p><h4 id="4-3-查看索引使用情况"><a href="#4-3-查看索引使用情况" class="headerlink" title="4.3 查看索引使用情况"></a>4.3 查看索引使用情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552885364563.png" alt="1552885364563"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</span><br><span class="line"></span><br><span class="line">Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</span><br></pre></td></tr></table></figure><h3 id="5-SQL优化"><a href="#5-SQL优化" class="headerlink" title="5. SQL优化"></a>5. SQL优化</h3><h4 id="5-1-大批量插入数据"><a href="#5-1-大批量插入数据" class="headerlink" title="5.1 大批量插入数据"></a>5.1 大批量插入数据</h4><p>环境准备 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user_2`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户状态&#x27;</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br></pre></td></tr></table></figure><p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556269346488.png" alt="1556269346488"> </p><p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p><p>1） 主键顺序插入</p><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脚本文件介绍 :</span><br><span class="line">sql1.log  ----&gt; 主键有序</span><br><span class="line">sql2.log  ----&gt; 主键无序</span><br></pre></td></tr></table></figure><p>插入ID顺序排列数据：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555771750567.png" alt="1555771750567"></p><p>插入ID无序排列数据：</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555771959734.png" alt="1555771959734"> </p><p>2） 关闭唯一性校验</p><p>在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555772132736.png" alt="1555772132736"> </p><p>3） 手动提交事务</p><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555772351208.png" alt="1555772351208"></p><h4 id="5-2-优化insert语句"><a href="#5-2-优化insert语句" class="headerlink" title="5.2 优化insert语句"></a>5.2 优化insert语句</h4><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><p>示例， 原始方式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure><p>优化后的方案为 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>)，(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在事务中进行数据插入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>数据有序插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure><p>优化后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-优化order-by语句"><a href="#5-3-优化order-by语句" class="headerlink" title="5.3 优化order by语句"></a>5.3 优化order by语句</h4><h5 id="5-3-1-环境准备"><a href="#5-3-1-环境准备" class="headerlink" title="5.3.1 环境准备"></a>5.3.1 环境准备</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`emp`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;Luci&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2800&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Jay&#x27;</span>,<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;Tom2&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;2200&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;Jerry2&#x27;</span>,<span class="string">&#x27;31&#x27;</span>,<span class="string">&#x27;3300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;Luci2&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2700&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;Jay2&#x27;</span>,<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;Tom3&#x27;</span>,<span class="string">&#x27;23&#x27;</span>,<span class="string">&#x27;2400&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;Jerry3&#x27;</span>,<span class="string">&#x27;32&#x27;</span>,<span class="string">&#x27;3100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;Luci3&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2900&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;Jay3&#x27;</span>,<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;4500&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);</span><br></pre></td></tr></table></figure><h5 id="5-3-2-两种排序方式"><a href="#5-3-2-两种排序方式" class="headerlink" title="5.3.2 两种排序方式"></a>5.3.2 两种排序方式</h5><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556335817763.png" alt="1556335817763"> </p><p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556335866539.png" alt="1556335866539"> </p><p>多字段排序</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556336352061.png" alt="1556336352061"> </p><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p><h5 id="5-3-3-Filesort-的优化"><a href="#5-3-3-Filesort-的优化" class="headerlink" title="5.3.3 Filesort 的优化"></a>5.3.3 Filesort 的优化</h5><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><p>1） 两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p><p>2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556338367593.png" alt="1556338367593"> </p><h4 id="5-4-优化group-by-语句"><a href="#5-4-优化group-by-语句" class="headerlink" title="5.4 优化group by 语句"></a>5.4 优化group by 语句</h4><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556339573979.png" alt="1556339573979">  </p><p>优化后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556339633161.png" alt="1556339633161">  </p><p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order  by  null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary)；</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556339688158.png" alt="1556339688158"> </p><h4 id="5-5-优化嵌套查询"><a href="#5-5-优化嵌套查询" class="headerlink" title="5.5 优化嵌套查询"></a>5.5 优化嵌套查询</h4><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>示例 ，查找有角色的所有的用户信息 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role );</span><br></pre></td></tr></table></figure><p>执行计划为 : </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556359399199.png" alt="1556359399199">   </p><p>优化后 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u , user_role ur <span class="keyword">where</span> u.id = ur.user_id;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556359482142.png" alt="1556359482142">   </p><p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p><h4 id="5-6-优化OR条件"><a href="#5-6-优化OR条件" class="headerlink" title="5.6 优化OR条件"></a>5.6 优化OR条件</h4><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p><p>获取 emp 表中的所有的索引 ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556354464657.png" alt="1556354464657">  </p><p>示例 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">or</span> age = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556354887509.png" alt="1556354887509"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556354920964.png" alt="1556354920964">  </p><p>建议使用 union 替换 or ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556355027728.png" alt="1556355027728"> </p><p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p><p>type 显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距</p><p>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</p><p>这两项的差距就说明了 UNION 要优于 OR 。</p><h4 id="5-7-优化分页查询"><a href="#5-7-优化分页查询" class="headerlink" title="5.7 优化分页查询"></a>5.7 优化分页查询</h4><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556361314783.png" alt="1556361314783"> </p><h5 id="5-7-1-优化思路一"><a href="#5-7-1-优化思路一" class="headerlink" title="5.7.1 优化思路一"></a>5.7.1 优化思路一</h5><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556416102800.png" alt="1556416102800"> </p><h5 id="5-7-2-优化思路二"><a href="#5-7-2-优化思路二" class="headerlink" title="5.7.2 优化思路二"></a>5.7.2 优化思路二</h5><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556363928151.png" alt="1556363928151"> </p><h4 id="5-8-使用SQL提示"><a href="#5-8-使用SQL提示" class="headerlink" title="5.8 使用SQL提示"></a>5.8 使用SQL提示</h4><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><h5 id="5-8-1-USE-INDEX"><a href="#5-8-1-USE-INDEX" class="headerlink" title="5.8.1 USE INDEX"></a>5.8.1 USE INDEX</h5><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556370971576.png" alt="1556370971576"> </p><h5 id="5-8-2-IGNORE-INDEX"><a href="#5-8-2-IGNORE-INDEX" class="headerlink" title="5.8.2 IGNORE INDEX"></a>5.8.2 IGNORE INDEX</h5><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller ignore index(idx_seller_name) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556371004594.png" alt="1556371004594"> </p><h5 id="5-8-3-FORCE-INDEX"><a href="#5-8-3-FORCE-INDEX" class="headerlink" title="5.8.3 FORCE INDEX"></a>5.8.3 FORCE INDEX</h5><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1556371355788.png" alt="1556371355788"> </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶01(索引-视图-存储过程)</title>
      <link href="/2020/07/04/MySQL%E8%BF%9B%E9%98%B601-%E7%B4%A2%E5%BC%95-%E8%A7%86%E5%9B%BE-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/07/04/MySQL%E8%BF%9B%E9%98%B601-%E7%B4%A2%E5%BC%95-%E8%A7%86%E5%9B%BE-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql高级-day01"><a href="#Mysql高级-day01" class="headerlink" title="Mysql高级-day01"></a>Mysql高级-day01</h1><ol><li>Linux系统安装MySQL</li><li>索引</li><li>视图</li><li>存储过程和函数</li><li>触发器</li></ol><h2 id="1-Linux-系统安装MySQL"><a href="#1-Linux-系统安装MySQL" class="headerlink" title="1. Linux 系统安装MySQL"></a>1. Linux 系统安装MySQL</h2><h4 id="1-1-下载Linux-安装包"><a href="#1-1-下载Linux-安装包" class="headerlink" title="1.1 下载Linux 安装包"></a>1.1 下载Linux 安装包</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/5.7.html<span class="comment">#downloads</span></span><br></pre></td></tr></table></figure><h4 id="1-2-安装MySQL"><a href="#1-2-安装MySQL" class="headerlink" title="1.2 安装MySQL"></a>1.2 安装MySQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1). 卸载 centos 中预安装的 mysql</span><br><span class="line"></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line">rpm -e mysql-libs-5.1.71-1.el6.x86_64 <span class="comment">--nodeps</span></span><br><span class="line"></span><br><span class="line">2). 上传 mysql 的安装包</span><br><span class="line"></span><br><span class="line">alt + p <span class="comment">-------&gt; put  E:/test/MySQL-5.6.22-1.el6.i686.rpm-bundle.tar</span></span><br><span class="line"></span><br><span class="line">3). 解压 mysql 的安装包 </span><br><span class="line"></span><br><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">tar -xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar -C /root/mysql</span><br><span class="line"></span><br><span class="line">4). 安装依赖包 </span><br><span class="line"></span><br><span class="line">yum -y <span class="keyword">install</span> libaio.so<span class="number">.1</span> libgcc_s.so<span class="number">.1</span> libstdc++.so<span class="number">.6</span> libncurses.so<span class="number">.5</span> <span class="comment">--setopt=protected_multilib=false</span></span><br><span class="line"></span><br><span class="line">yum  <span class="keyword">update</span> libstdc++<span class="number">-4.4</span><span class="number">.7</span><span class="number">-4.</span>el6.x86_64</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>). 安装 mysql-<span class="keyword">client</span></span><br><span class="line"></span><br><span class="line">rpm -ivh MySQL-<span class="keyword">client</span><span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.</span>el6.i686.rpm</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>). 安装 mysql-<span class="keyword">server</span></span><br><span class="line"></span><br><span class="line">rpm -ivh MySQL-<span class="keyword">server</span><span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.</span>el6.i686.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-启动-MySQL-服务"><a href="#1-3-启动-MySQL-服务" class="headerlink" title="1.3 启动 MySQL 服务"></a>1.3 启动 MySQL 服务</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">service mysql <span class="keyword">start</span></span><br><span class="line"></span><br><span class="line">service mysql <span class="keyword">stop</span></span><br><span class="line"></span><br><span class="line">service mysql <span class="keyword">status</span></span><br><span class="line"></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h4 id="1-4-登录MySQL"><a href="#1-4-登录MySQL" class="headerlink" title="1.4 登录MySQL"></a>1.4 登录MySQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : /root/.mysql_secret</span><br><span class="line"></span><br><span class="line">mysql -u root -p </span><br><span class="line"></span><br><span class="line">登录之后, 修改密码 :</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line">授权远程访问 : </span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span> @<span class="string">&#x27;%&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h2><h4 id="2-1-索引概述"><a href="#2-1-索引概述" class="headerlink" title="2.1 索引概述"></a>2.1 索引概述</h4><p>MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。如下面的==示意图==所示 : </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555902055367.png"></p><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具。</p><h4 id="2-2-索引优势劣势"><a href="#2-2-索引优势劣势" class="headerlink" title="2.2 索引优势劣势"></a>2.2 索引优势劣势</h4><p><strong>优势</strong></p><p>1） 在没有添加索引时，查询数据会造成全表扫描，查询效率大大降低。类似于书籍的目录索引，索引提高数据检索的效率，降低数据库的IO成本。</p><p>2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</p><p><strong>劣势</strong>(<em>千羽在面试时也被问到了</em>)</p><p>1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间的。</p><p>2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p><h4 id="2-3-索引结构"><a href="#2-3-索引结构" class="headerlink" title="2.3 索引结构"></a>2.3 索引结构</h4><p>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p><ul><li><strong>BTREE 索引</strong> ： 最常见的索引类型，大部分索引都支持 B 树索引。</li><li><strong>HASH 索引</strong>：只有Memory引擎支持 ， 使用场景简单 。</li><li><strong>R-tree 索引（空间索引）</strong>：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li><li><strong>Full-text （全文索引）</strong> ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li></ul><center><b>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</b></center><table><thead><tr><th>索引</th><th>InnoDB引擎</th><th>MyISAM引擎</th><th>Memory引擎</th></tr></thead><tbody><tr><td>BTREE索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>HASH 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</p><h5 id="2-3-1-BTREE-结构"><a href="#2-3-1-BTREE-结构" class="headerlink" title="2.3.1 BTREE 结构"></a>2.3.1 BTREE 结构</h5><p>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：</p><ul><li>树中每个节点最多包含m个孩子。</li><li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。</li><li>若根节点不是叶子节点，则至少有两个孩子。</li><li>所有的叶子节点都在同一层。</li><li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1 </li></ul><p>以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1。所以 2 &lt;= n &lt;=4 。当n&gt;4时，中间节点分裂到父节点，两边节点分裂。</p><p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。</p><p>演变过程如下： </p><p>1). 插入前4个字母 C N G A </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944126588.png"></p><p>2). 插入H，n&gt;4，中间元素G字母向上分裂到新的节点</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944549825.png"></p><p>3). 插入E，K，Q不需要分裂</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944596893.png"></p><p>4). 插入M，中间元素M字母向上分裂到父节点G</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944652560.png"></p><p>5). 插入F，W，L，T不需要分裂</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944686928.png"></p><p>6). 插入Z，中间元素T向上分裂到父节点中 </p><p> <img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944713486.png"></p><p>7). 插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944749984.png"></p><p>8). 最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555944848294.png"></p><p>到此，该BTREE树就已经构建完成了， BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</p><h5 id="2-3-3-B-TREE-结构"><a href="#2-3-3-B-TREE-结构" class="headerlink" title="2.3.3 B+TREE 结构"></a>2.3.3 B+TREE 结构</h5><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p><p>1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。</p><p>2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。</p><p>3). 所有的非叶子节点都可以看作是key的索引部分。<br><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/00001.JPG"></p><p>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。</p><h5 id="2-3-3-MySQL中的B-Tree"><a href="#2-3-3-MySQL中的B-Tree" class="headerlink" title="2.3.3 MySQL中的B+Tree"></a>2.3.3 MySQL中的B+Tree</h5><p>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。</p><p>MySQL中的 B+Tree 索引结构示意图: </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1555906287178.png"></p><h4 id="2-4-索引分类"><a href="#2-4-索引分类" class="headerlink" title="2.4 索引分类"></a>2.4 索引分类</h4><p>1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</p><p>2） 唯一索引 ：索引列的值必须唯一，但允许有空值</p><p>3） 复合索引 ：即一个索引包含多个列</p><h4 id="2-5-索引语法"><a href="#2-5-索引语法" class="headerlink" title="2.5 索引语法"></a>2.5 索引语法</h4><p>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引。</p><p>准备环境:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo_01 <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> demo_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`city`</span> (</span><br><span class="line">  <span class="string">`city_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`city_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`city_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`country`</span> (</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`country_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`country_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;西安&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;NewYork&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;America&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;UK&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-5-1-创建索引"><a href="#2-5-1-创建索引" class="headerlink" title="2.5.1 创建索引"></a>2.5.1 创建索引</h5><p>语法 ：     </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>|FULLTEXT|SPATIAL]  <span class="keyword">INDEX</span> index_name </span><br><span class="line">[<span class="keyword">USING</span>  index_type]</span><br><span class="line"><span class="keyword">ON</span> tbl_name(index_col_name,...)</span><br><span class="line"></span><br><span class="line">index_col_name : column_name[(<span class="keyword">length</span>)][<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><p>示例 ： 为city表中的city_name字段创建索引 ；</p><p>  <img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551438009843.png"></p><p>​    </p><h5 id="2-5-2-查看索引"><a href="#2-5-2-查看索引" class="headerlink" title="2.5.2 查看索引"></a>2.5.2 查看索引</h5><p>语法： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span>  <span class="keyword">from</span>  table_name;</span><br></pre></td></tr></table></figure><p>示例：查看city表中的索引信息；</p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551440511890.png"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551440544483.png"></p><h5 id="2-5-3-删除索引"><a href="#2-5-3-删除索引" class="headerlink" title="2.5.3 删除索引"></a>2.5.3 删除索引</h5><p>语法 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span>  <span class="keyword">INDEX</span>  index_name  <span class="keyword">ON</span>  tbl_name;</span><br></pre></td></tr></table></figure><p>示例 ： 想要删除city表上的索引idx_city_name，可以操作如下：</p><p> <img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551438238293.png"></p><h5 id="2-5-4-ALTER命令"><a href="#2-5-4-ALTER命令" class="headerlink" title="2.5.4 ALTER命令"></a>2.5.4 ALTER命令</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  primary  <span class="keyword">key</span>(column_list); </span><br><span class="line"></span><br><span class="line">该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL</span><br><span class="line"></span><br><span class="line">2). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  <span class="keyword">unique</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line">这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）</span><br><span class="line"></span><br><span class="line">3). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  <span class="keyword">index</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line">添加普通索引， 索引值可以出现多次。</span><br><span class="line"></span><br><span class="line">4). <span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  fulltext  index_name(column_list);</span><br><span class="line"></span><br><span class="line">该语句指定了索引为FULLTEXT， 用于全文索引</span><br></pre></td></tr></table></figure><h4 id="2-6-索引设计原则"><a href="#2-6-索引设计原则" class="headerlink" title="2.6 索引设计原则"></a>2.6 索引设计原则</h4><pre><code> 索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</code></pre><ul><li><p>对查询频次较高，且数据量比较大的表建立索引。</p></li><li><p>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</p></li><li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。</p></li><li><p>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建复合索引:</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_name_email_status <span class="keyword">ON</span> tb_seller(<span class="keyword">NAME</span>,email,<span class="keyword">STATUS</span>);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">对name 创建索引 ;</span><br><span class="line">对name , email 创建了索引 ;</span><br><span class="line">对name , email, status 创建了索引 ;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-视图"><a href="#3-视图" class="headerlink" title="3. 视图"></a>3. 视图</h2><h4 id="3-1-视图概述"><a href="#3-1-视图概述" class="headerlink" title="3.1 视图概述"></a>3.1 视图概述</h4><pre><code>视图（View）是一种虚拟存在的表。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</code></pre><p>视图相对于普通的表的优势主要包括以下几项。</p><ul><li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</li><li>安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li></ul><h4 id="3-2-创建或者修改视图"><a href="#3-2-创建或者修改视图" class="headerlink" title="3.2 创建或者修改视图"></a>3.2 创建或者修改视图</h4><p>创建视图的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>] [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure><p>修改视图的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选项 : </span><br><span class="line"><span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> 决定了是否允许更新数据使记录不再满足视图的条件。</span><br><span class="line"></span><br><span class="line"><span class="keyword">LOCAL</span> ： 只要满足本视图的条件就可以更新。</span><br><span class="line"><span class="keyword">CASCADED</span> ： 必须满足所有针对该视图的所有视图的条件才可以更新。 默认值.</span><br></pre></td></tr></table></figure><p>示例 , 创建city_country_view视图 , 执行如下SQL : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> city_country_view </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> t.*,c.country_name <span class="keyword">from</span> country c , city t <span class="keyword">where</span> c.country_id = t.country_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询视图 : </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551503428635.png"></p><h4 id="3-3-查看视图"><a href="#3-3-查看视图" class="headerlink" title="3.3 查看视图"></a>3.3 查看视图</h4><pre><code>从 MySQL 5.1 版本开始，使用 SHOW TABLES 命令的时候不仅显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的 SHOW VIEWS 命令。</code></pre><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551537565159.png"></p><p>同样，在使用 SHOW TABLE STATUS 命令的时候，不但可以显示表的信息，同时也可以显示视图的信息。    </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551537646323.png"></p><p>如果需要查询某个视图的定义，可以使用 SHOW CREATE VIEW 命令进行查看 ： </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1551588962944.png"></p><h4 id="3-4-删除视图"><a href="#3-4-删除视图" class="headerlink" title="3.4 删除视图"></a>3.4 删除视图</h4><p>语法 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name [, view_name] ...[RESTRICT | <span class="keyword">CASCADE</span>]</span><br></pre></td></tr></table></figure><p>示例 , 删除视图city_country_view :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> city_country_view ;</span><br></pre></td></tr></table></figure><h2 id="4-存储过程和函数"><a href="#4-存储过程和函数" class="headerlink" title="4. 存储过程和函数"></a>4. 存储过程和函数</h2><h4 id="4-1-存储过程和函数概述"><a href="#4-1-存储过程和函数概述" class="headerlink" title="4.1 存储过程和函数概述"></a>4.1 存储过程和函数概述</h4><pre><code>存储过程和函数是  事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。    存储过程和函数的区别在于函数必须有返回值，而存储过程没有。函数 ： 是一个有返回值的过程 ；过程 ： 是一个没有返回值的函数 ；</code></pre><h4 id="4-2-创建存储过程"><a href="#4-2-创建存储过程" class="headerlink" title="4.2 创建存储过程"></a>4.2 创建存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedure_name ([proc_parameter[,...]])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">end</span> ;</span><br></pre></td></tr></table></figure><p>示例 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;Hello Mysql&#x27;</span> ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><strong><font color="red">知识小贴士</font></strong></p><p>DELIMITER</p><pre><code>该关键字用来声明SQL语句的分隔符 , 告诉 MySQL 解释器，该段命令是否已经结束了，mysql是否可以执行了。默认情况下，delimiter是分号;。在命令行客户端中，如果有一行命令以分号结束，那么回车后，mysql将会执行该命令。</code></pre><h4 id="4-3-调用存储过程"><a href="#4-3-调用存储过程" class="headerlink" title="4.3 调用存储过程"></a>4.3 调用存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> procedure_name() ;</span><br></pre></td></tr></table></figure><h4 id="4-4-查看存储过程"><a href="#4-4-查看存储过程" class="headerlink" title="4.4 查看存储过程"></a>4.4 查看存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询db_name数据库中的所有的存储过程</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">&#x27;db_name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询存储过程的状态信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> <span class="keyword">status</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> test.pro_test1 \G;</span><br></pre></td></tr></table></figure><h4 id="4-5-删除存储过程"><a href="#4-5-删除存储过程" class="headerlink" title="4.5 删除存储过程"></a>4.5 删除存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span>  [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] sp_name ；</span><br></pre></td></tr></table></figure><h4 id="4-6-语法"><a href="#4-6-语法" class="headerlink" title="4.6 语法"></a>4.6 语法</h4><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构 ， 来完成比较复杂的功能。</p><h5 id="4-6-1-变量"><a href="#4-6-1-变量" class="headerlink" title="4.6.1 变量"></a>4.6.1 变量</h5><ul><li><p>DECLARE</p><p>通过 DECLARE 可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[,...] <span class="keyword">type</span> [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>]</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test2() </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span>+ <span class="number">10</span>; </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ; </span><br></pre></td></tr></table></figure><ul><li>SET</li></ul><p>直接赋值使用 SET，可以赋常量或者赋表达式，具体语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> var_name = expr [, var_name = expr] ...</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> pro_test33()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAME</span> = <span class="string">&#x27;MYSQL&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> ;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>也可以通过select … into 方式进行赋值操作 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> pro_test5()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">declare</span>  countnum <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line"><span class="keyword">select</span> countnum;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h5 id="4-6-2-if条件判断"><a href="#4-6-2-if条件判断" class="headerlink" title="4.6.2 if条件判断"></a>4.6.2 if条件判断</h5><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if search_condition then statement_list</span><br><span class="line"></span><br><span class="line">[elseif search_condition then statement_list] ...</span><br><span class="line"></span><br><span class="line">[else statement_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><p>需求： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型 </span><br><span class="line"></span><br><span class="line">180 及以上 <span class="comment">----------&gt; 身材高挑</span></span><br><span class="line"></span><br><span class="line">170 - 180  <span class="comment">---------&gt; 标准身材</span></span><br><span class="line"></span><br><span class="line">170 以下  <span class="comment">----------&gt; 一般身材</span></span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test6()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span>  height  <span class="built_in">int</span>  <span class="keyword">default</span>  <span class="number">175</span>; </span><br><span class="line">  <span class="keyword">declare</span>  description  <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  </span><br><span class="line">  if  height &gt;= 180  then</span><br><span class="line">    <span class="keyword">set</span> description = <span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height &gt;= 170 and height &lt; 180  then</span><br><span class="line">    <span class="keyword">set</span> description = <span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">set</span> description = <span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> description ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用结果为 : </p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/1552057035580.png"></p><h5 id="4-6-3-传递参数"><a href="#4-6-3-传递参数" class="headerlink" title="4.6.3 传递参数"></a>4.6.3 传递参数</h5><p>语法格式 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> procedure_name([<span class="keyword">in</span>/<span class="keyword">out</span>/inout] 参数名   参数类型)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">IN</span> :   该参数可以作为输入，也就是需要调用方传入值 , 默认</span><br><span class="line"><span class="keyword">OUT</span>:   该参数作为输出，也就是该参数可以作为返回值</span><br><span class="line">INOUT: 既可以作为输入参数，也可以作为输出参数</span><br></pre></td></tr></table></figure><p><strong>IN - 输入</strong></p><p>需求 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型 </span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5(<span class="keyword">in</span> height <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> description <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  if height &gt;= 180 then</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height &gt;= 170 and height &lt; 180 then</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;身高 &#x27;</span>, height , <span class="string">&#x27;对应的身材类型为:&#x27;</span>,description);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><strong>OUT-输出</strong></p><p> 需求 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据传入的身高变量，获取当前身高的所属的身材类型  </span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5(<span class="keyword">in</span> height <span class="built_in">int</span> , <span class="keyword">out</span> description <span class="built_in">varchar</span>(<span class="number">100</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> height &gt;= <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height &gt;= 170 and height &lt; 180 then</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p>调用:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> pro_test5(<span class="number">168</span>, @description)$</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @description$</span><br></pre></td></tr></table></figure><p><font color='red'><strong>小知识</strong> </font></p><p>@description :  这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</p><p>@@global.sort_buffer_size : 这种在变量前加上 “@@” 符号, 叫做 系统变量 </p><h5 id="4-6-4-case结构"><a href="#4-6-4-case结构" class="headerlink" title="4.6.4 case结构"></a>4.6.4 case结构</h5><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">方式一 : </span><br><span class="line"></span><br><span class="line">CASE case_value</span><br><span class="line"></span><br><span class="line">  WHEN when_value THEN statement_list</span><br><span class="line">  </span><br><span class="line">  [WHEN when_value THEN statement_list] ...</span><br><span class="line">  </span><br><span class="line">  [ELSE statement_list]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二 : </span><br><span class="line"></span><br><span class="line">CASE</span><br><span class="line"></span><br><span class="line">  WHEN search_condition THEN statement_list</span><br><span class="line">  </span><br><span class="line">  [WHEN search_condition THEN statement_list] ...</span><br><span class="line">  </span><br><span class="line">  [ELSE statement_list]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个月份, 然后计算出所在的季度</span><br></pre></td></tr></table></figure><p>示例  :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test9(<span class="keyword">month</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> <span class="keyword">result</span> <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br><span class="line">  case </span><br><span class="line">    when month &gt;= 1 and month &lt;=3 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">&#x27;第一季度&#x27;</span>;</span><br><span class="line">    when month &gt;= 4 and month &lt;=6 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">&#x27;第二季度&#x27;</span>;</span><br><span class="line">    when month &gt;= 7 and month &lt;=9 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">&#x27;第三季度&#x27;</span>;</span><br><span class="line">    when month &gt;= 10 and month &lt;=12 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">&#x27;第四季度&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;您输入的月份为 :&#x27;</span>, <span class="keyword">month</span> , <span class="string">&#x27; , 该月份为 : &#x27;</span> , <span class="keyword">result</span>) <span class="keyword">as</span> <span class="keyword">content</span> ;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-5-while循环"><a href="#4-6-5-while循环" class="headerlink" title="4.6.5 while循环"></a>4.6.5 while循环</h5><p>语法结构: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while search_condition <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">statement_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br></pre></td></tr></table></figure><p>需求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从1加到n的值</span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  while num&lt;=n do</span><br><span class="line">    <span class="keyword">set</span> total = total + <span class="keyword">num</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">num</span> = <span class="keyword">num</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-6-repeat结构"><a href="#4-6-6-repeat结构" class="headerlink" title="4.6.6 repeat结构"></a>4.6.6 repeat结构</h5><p>有条件的循环控制语句, 当满足条件的时候退出循环 。while 是满足条件才执行，repeat 是满足条件就退出循环。</p><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line"></span><br><span class="line">  statement_list</span><br><span class="line"></span><br><span class="line">  UNTIL search_condition</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br></pre></td></tr></table></figure><p>需求: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从1加到n的值</span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test10(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  repeat </span><br><span class="line">    <span class="keyword">set</span> total = total + n;</span><br><span class="line">    <span class="keyword">set</span> n = n - <span class="number">1</span>;</span><br><span class="line">    until n=0  </span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> total ;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-7-loop语句"><a href="#4-6-7-loop语句" class="headerlink" title="4.6.7 loop语句"></a>4.6.7 loop语句</h5><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，具体语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] LOOP</span><br><span class="line"></span><br><span class="line">  statement_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [end_label]</span><br></pre></td></tr></table></figure><p>如果不在 statement_list 中增加退出循环的语句，那么 LOOP 语句可以用来实现简单的死循环。</p><h5 id="4-6-8-leave语句"><a href="#4-6-8-leave语句" class="headerlink" title="4.6.8 leave语句"></a>4.6.8 leave语句</h5><p>用来从标注的流程构造中退出，通常和 BEGIN … END 或者循环一起使用。下面是一个使用 LOOP 和 LEAVE 的简单例子 , 退出循环：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test11(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  ins: LOOP</span><br><span class="line">    </span><br><span class="line">    IF n &lt;= 0 then</span><br><span class="line">      leave ins;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">set</span> total = total + n;</span><br><span class="line">    <span class="keyword">set</span> n = n - <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">LOOP</span> ins;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-9-游标-光标"><a href="#4-6-9-游标-光标" class="headerlink" title="4.6.9 游标/光标"></a>4.6.9 游标/光标</h5><p>游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p><p>声明光标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement ;</span><br></pre></td></tr></table></figure><p>OPEN 光标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPEN cursor_name ;</span><br></pre></td></tr></table></figure><p>FETCH 光标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [, var_name] ...</span><br></pre></td></tr></table></figure><p>CLOSE 光标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOSE cursor_name ;</span><br></pre></td></tr></table></figure><p>示例 : </p><p>初始化脚本:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment ,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  salary <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">&#x27;薪水&#x27;</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&#x27;金毛狮王&#x27;</span>,<span class="number">55</span>,<span class="number">3800</span>),(<span class="literal">null</span>,<span class="string">&#x27;白眉鹰王&#x27;</span>,<span class="number">60</span>,<span class="number">4000</span>),(<span class="literal">null</span>,<span class="string">&#x27;青翼蝠王&#x27;</span>,<span class="number">38</span>,<span class="number">2800</span>),(<span class="literal">null</span>,<span class="string">&#x27;紫衫龙王&#x27;</span>,<span class="number">42</span>,<span class="number">1800</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中数据, 并逐行获取进行展示</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test11()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> e_id <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_name <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_age <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_salary <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">  </span><br><span class="line">  open emp_result;</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  close emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过循环结构 , 获取游标中的数据 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> age <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> salary <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> has_data <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">DECLARE</span> emp_result <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">EXIT</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span> <span class="keyword">set</span> has_data = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  open emp_result;</span><br><span class="line">  </span><br><span class="line">  repeat</span><br><span class="line">    fetch emp_result into id , name , age , salary;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;id为&#x27;</span>,<span class="keyword">id</span>, <span class="string">&#x27;, name 为&#x27;</span> ,<span class="keyword">name</span> , <span class="string">&#x27;, age为 &#x27;</span> ,age , <span class="string">&#x27;, 薪水为: &#x27;</span>, salary);</span><br><span class="line">    until has_data = 0</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">  </span><br><span class="line">  close emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ; </span><br></pre></td></tr></table></figure><h4 id="4-7-存储函数"><a href="#4-7-存储函数" class="headerlink" title="4.7 存储函数"></a>4.7 存储函数</h4><p>语法结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION function_name([param type ... ]) </span><br><span class="line">RETURNS type </span><br><span class="line">BEGIN</span><br><span class="line">...</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>案例 : </p><p>定义一个存储过程, 请求满足条件的总记录数 ;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> cnum <span class="built_in">int</span> ;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id = countryId;</span><br><span class="line">  </span><br><span class="line">  return cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count_city(1);</span><br><span class="line"></span><br><span class="line">select count_city(2);</span><br></pre></td></tr></table></figure><h2 id="5-触发器"><a href="#5-触发器" class="headerlink" title="5. 触发器"></a>5. 触发器</h2><h4 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h4><p>触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p><p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h4 id="5-2-创建触发器"><a href="#5-2-创建触发器" class="headerlink" title="5.2 创建触发器"></a>5.2 创建触发器</h4><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name </span><br><span class="line"></span><br><span class="line"><span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> tbl_name </span><br><span class="line"></span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> ]  <span class="comment">-- 行级触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">trigger_stmt ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>示例 </p><p>需求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过触发器记录 emp 表的数据变更日志 , 包含增加, 修改 , 删除 ;</span><br></pre></td></tr></table></figure><p>首先创建一张日志表 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  operation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;操作类型, insert/update/delete&#x27;</span>,</span><br><span class="line">  operate_time datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  operate_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;操作表的ID&#x27;</span>,</span><br><span class="line">  operate_params <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">comment</span> <span class="string">&#x27;操作参数&#x27;</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><p>创建 insert 型触发器，完成插入数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="keyword">now</span>(),new.id,<span class="keyword">concat</span>(<span class="string">&#x27;插入后(id:&#x27;</span>,new.id,<span class="string">&#x27;, name:&#x27;</span>,new.name,<span class="string">&#x27;, age:&#x27;</span>,new.age,<span class="string">&#x27;, salary:&#x27;</span>,new.salary,<span class="string">&#x27;)&#x27;</span>));</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建 update 型触发器，完成更新数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&#x27;update&#x27;</span>,<span class="keyword">now</span>(),new.id,<span class="keyword">concat</span>(<span class="string">&#x27;修改前(id:&#x27;</span>,old.id,<span class="string">&#x27;, name:&#x27;</span>,old.name,<span class="string">&#x27;, age:&#x27;</span>,old.age,<span class="string">&#x27;, salary:&#x27;</span>,old.salary,<span class="string">&#x27;) , 修改后(id&#x27;</span>,new.id, <span class="string">&#x27;name:&#x27;</span>,new.name,<span class="string">&#x27;, age:&#x27;</span>,new.age,<span class="string">&#x27;, salary:&#x27;</span>,new.salary,<span class="string">&#x27;)&#x27;</span>));                                                                      </span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建delete 行的触发器 , 完成删除数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&#x27;delete&#x27;</span>,<span class="keyword">now</span>(),old.id,<span class="keyword">concat</span>(<span class="string">&#x27;删除前(id:&#x27;</span>,old.id,<span class="string">&#x27;, name:&#x27;</span>,old.name,<span class="string">&#x27;, age:&#x27;</span>,old.age,<span class="string">&#x27;, salary:&#x27;</span>,old.salary,<span class="string">&#x27;)&#x27;</span>));                                                                      </span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">&#x27;光明左使&#x27;</span>,<span class="number">30</span>,<span class="number">3500</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">&#x27;光明右使&#x27;</span>,<span class="number">33</span>,<span class="number">3200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> age = <span class="number">39</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="5-3-删除触发器"><a href="#5-3-删除触发器" class="headerlink" title="5.3 删除触发器"></a>5.3 删除触发器</h4><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name </span><br></pre></td></tr></table></figure><p>如果没有指定 schema_name，默认为当前数据库 。</p><h4 id="5-4-查看触发器"><a href="#5-4-查看触发器" class="headerlink" title="5.4 查看触发器"></a>5.4 查看触发器</h4><p>可以通过执行 SHOW TRIGGERS 命令查看触发器的状态、语法等信息。</p><p>语法结构 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">triggers</span> ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xmind汇总所有知识点</title>
      <link href="/2020/06/25/Xmind%E6%B1%87%E6%80%BB%E6%89%80%E6%9C%89%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/06/25/Xmind%E6%B1%87%E6%80%BB%E6%89%80%E6%9C%89%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Docker%281%29.png" alt="Docker知识点汇总"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/HTTP%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="HTTP知识点汇总"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Hibernate%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="Hibernate知识点汇总"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/JDBC%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="JDBC知识点汇总"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/JSP%E5%9F%BA%E7%A1%80.png" alt="JSP知识点汇总"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Java%20EE%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6.png" alt="Java EE常用框架"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Jquery%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%90%E7%AC%AC%E4%B8%80%E7%AF%87%E3%80%91.png" alt="JQuery第一篇"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Jquery%E7%AC%AC%E4%BA%8C%E7%AF%87.png" alt="JQuery第二篇"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png" alt="Linux常用命令"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/MySQL%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.png" alt="MySQL基本语法"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Mybatis%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="MyBatis知识点"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/NIO%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="知识点汇总"><br><img src="" alt="NIO知识点汇总"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Object%E5%AF%B9%E8%B1%A1.png" alt="Object对象"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/SQL%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="SQL知识点汇总"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Servlet%E5%9F%BA%E7%A1%80.png" alt="Servlet基础"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/Spring%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="Spring知识点"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="多线程知识点"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E5%B0%8F%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%BB%E7%BB%93.png" alt="小算法题总结"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.png" alt="数据结构与算法"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E6%B3%9B%E5%9E%8B%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="泛型知识点总结"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E6%B3%A8%E8%A7%A3%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="注解知识点注解"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E7%94%B5%E5%AD%90%E7%A7%BB%E5%8A%A8%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.png" alt="电子商城项目"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E7%9B%91%E5%90%AC%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8%20%281%29.png" alt="监听器与过滤器"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E7%BA%B3%E7%A8%8E%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt="纳税服务管理系统知识点"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84Java%20EE%E9%A1%B9%E7%9B%AE.png" alt="Java EE项目"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" alt="设计模式"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/3y%E8%84%91%E5%9B%BE-2020%E5%B9%B46%E6%9C%88/%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%E7%AF%87.png" alt="集合总结篇"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-07-docker部署SpringCloud</title>
      <link href="/2020/06/24/docker-07-docker%E9%83%A8%E7%BD%B2SpringCloud/"/>
      <url>/2020/06/24/docker-07-docker%E9%83%A8%E7%BD%B2SpringCloud/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Docker部署微服务"><a href="#Docker部署微服务" class="headerlink" title="Docker部署微服务"></a>Docker部署微服务</h1><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/docker%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker-friends.png"><br>docker安装就不详细说了，直接进入正题。</p><p>首先将工程进行maven打包<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/docker%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/2.png"><br>然后将工程以Xftp或者CRT的放到Linux服务器上，</p><p>在同一个目录，放上传的工程，还有新建Dockerfile文件(<strong>Dockerfile和jar包要在同一个文件夹下哦</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM java:<span class="number">8</span></span><br><span class="line"> </span><br><span class="line"> VOLUME /tmp</span><br><span class="line"> </span><br><span class="line"> ADD microservice-discovery-eureka-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar app.jar</span><br><span class="line"> </span><br><span class="line"> RUN bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span><br><span class="line"> </span><br><span class="line"> EXPOSE <span class="number">8761</span></span><br><span class="line"> </span><br><span class="line"> ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><p>然后执行命令 docker build -t cakin24/microservice-discovery-eureka-0.0.1 .</p><p>可以查看镜像docker images<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/docker%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/1.png"><br>继续运行：运行容器 docker run -d -p 8761:8761 cakin24/microservice-discovery-eureka-0.0.1</p><p>访问：<img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2-%E4%B8%93%E7%94%A8/docker%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试+简历制作专题</title>
      <link href="/2020/06/21/%E9%9D%A2%E8%AF%95-%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%E4%B8%93%E9%A2%98/"/>
      <url>/2020/06/21/%E9%9D%A2%E8%AF%95-%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="面试备考"><a href="#面试备考" class="headerlink" title="面试备考"></a>面试备考</h1><p><a href="https://snailclimb.gitee.io/javaguide/#/">JavaGuide</a><br><a href="https://cyc2018.github.io/CS-Notes/#/">CyC2018/CS-Notes</a><br><a href="http://notfound9.github.io/interviewGuide/#/README">面试指北</a><br><a href="https://www.bjsxt.com/javamianshiti.html">尚学堂面试题</a><br><a href="https://v2ex.com/go/cv">求职论盘(v2ex社区)</a><br><a href="https://github.com/gsjqwyl/JavaInterview">Java面试</a><br><a href="http://www.itfzy.cn/post/mysql/classical-problem/">MySQL经典题目</a><br><a href="http://xuesql.cn/">学SQL</a><br><a href="http://c.biancheng.net/sitemap/">编程网站</a></p><h1 id="简历制作-支持markdown"><a href="#简历制作-支持markdown" class="headerlink" title="简历制作(支持markdown)"></a>简历制作(支持markdown)</h1><p><a href="http://cv.ftqq.com/">冷熊简历</a><br><a href="https://www.latexstudio.net/index/lists/barSearch/text/%E7%AE%80%E5%8E%86">Latex简历制作</a><br><a href="https://resume.mdnice.com/">markdown-resume</a><br><a href="https://resumd.t9t.io/">Resumd</a></p><hr><p><a href="http://cv.qiaobutang.com/">乔布简历</a><br><a href="http://www.polebrief.com/">极简简历</a><br><a href="https://github.com/BigLiao/markCV">Markdown在线制作简历</a><br><a href="https://github.com/c0bra/markdown-resume-js">markdown-resume-js(markdown可转换为HTML和PDF)</a><br><a href="https://github.com/there4/markdown-resume">markdown-resume(Markdown生成CSS3和HTML5简历</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="http://39.108.113.88/content/part-02-distribution-architecture/spring-boot-introduction.html">代码重工</a><br><a href="https://www.ilovepdf.com/">PDF在线</a><br><a href="https://sm.ms/">图床网站</a><br><a href="https://www.extfans.com/">Chrome插件</a><br><a href="http://xuewei.world:8000/2020/03/30/%e9%ab%98%e6%95%88%e4%bd%bf%e7%94%a8github%e5%af%bb%e6%89%be%e5%bc%80%e6%ba%90%e9%a1%b9%e7%9b%ae/">高效使用Github寻找开源项目</a><br><a href="http://www.majiang.life/blog/archives/">码匠笔记</a><br><a href="http://www.bewindoweb.com/">三颗豆子</a><br><a href="https://greasyfork.org/zh-CN/scripts">脚本</a><br><a href="http://qrbtf.com/">参数化二维码生成器</a><br><a href="https://learnku.com/">LearnKu技术社区</a></p><h1 id="LeetCode-刷题目录"><a href="#LeetCode-刷题目录" class="headerlink" title="LeetCode 刷题目录"></a>LeetCode 刷题目录</h1><p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md">Leetcode题解-目录</a><br><a href="https://pintia.cn/">拼题A(在线刷题)</a><br><a href="https://shimo.im/docs/b93T37kKDnobyFWQ/read">关于CyC2018</a></p><h1 id="LeetCode推荐的学习频道👍🏻"><a href="#LeetCode推荐的学习频道👍🏻" class="headerlink" title="LeetCode推荐的学习频道👍🏻"></a>LeetCode推荐的学习频道👍🏻</h1><p><a href="https://www.youtube.com/channel/UCmJz...">Youtube ：Back To Back SWE</a></p><h1 id="LeetCode推荐B站："><a href="#LeetCode推荐B站：" class="headerlink" title="LeetCode推荐B站："></a>LeetCode推荐B站：</h1><p><a href="https://space.bilibili.com/9880352?fr...">1.花花酱</a><br><a href="https://space.bilibili.com/149758?fro...">2.小Q刷题</a><br><a href="https://space.bilibili.com/354892788?...">3.绵羊教授</a></p><h1 id="学习视频推荐"><a href="#学习视频推荐" class="headerlink" title="学习视频推荐"></a>学习视频推荐</h1><p><a href="https://www.simtoco.com/#/home">斯坦福</a><br><a href="https://github.com/nateshao/spring-boot-demo">深度学习并实战spring boot</a></p><h1 id="其他学校资源"><a href="#其他学校资源" class="headerlink" title="其他学校资源"></a>其他学校资源</h1><p><a href="https://github.com/QSCTech/zju-icicles">浙江大学课程攻略共享计划</a><br><a href="https://github.com/PKUanonym/REKCARC-TSC-UHT">清华大学计算机系课程攻略</a></p><h2 id="既然选择了远方，便只顾风雨兼程。作为程序员，对我个人而言：拥抱变化，拥抱未来吧。"><a href="#既然选择了远方，便只顾风雨兼程。作为程序员，对我个人而言：拥抱变化，拥抱未来吧。" class="headerlink" title="既然选择了远方，便只顾风雨兼程。作为程序员，对我个人而言：拥抱变化，拥抱未来吧。"></a>既然选择了远方，便只顾风雨兼程。作为程序员，对我个人而言：拥抱变化，拥抱未来吧。</h2><h2 id="向前看-了解-熟悉-熟练-精通"><a href="#向前看-了解-熟悉-熟练-精通" class="headerlink" title="向前看: 了解, 熟悉, 熟练, 精通"></a>向前看: <strong>了解, 熟悉, 熟练, 精通</strong></h2><ul><li>SpringCloud + Docker , 分布式</li><li>计算机网络、数据结构、算法、操作系统等课内基础知识：掌握</li><li>Java 基础知识：掌握</li><li>JVM 虚拟机（Java内存区域、虚拟机垃圾算法、虚拟垃圾收集器、JVM内存管理）：掌握</li><li>高并发、高可用、高性能系统开发：掌握</li><li>Struts2、Spring、Hibernate、Ajax、Mybatis、JQuery ：掌握</li><li>SSH 整合、SSM 整合、 SOA 架构：掌握</li><li>Dubbo： 掌握</li><li>Zookeeper: 掌握</li><li>常见消息队列: 掌握</li><li>Linux：掌握</li><li>MySQL常见优化手段：掌握</li><li>Spring Boot +Spring Cloud +Docker:了解</li><li>Hadoop 生态相关技术中的 HDFS、Storm、MapReduce、Hive、Hbase ：了解</li><li>Python 基础、一些常见第三方库比如OpenCV、wxpy、wordcloud、matplotlib：熟悉</li></ul><p><a href="https://pdf2md.morethan.io/">pdf转md</a></p><p><a href="http://www.pdfdo.com/pdf-to-word.aspx">pdf转word</a></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/backend-map.png" alt="后端学习路线"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/devops-map.png" alt="devops-map"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/frontend-map.png" alt="前端学习路线"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端工程师需要会什么?</title>
      <link href="/2020/06/18/%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9C%80%E8%A6%81%E4%BC%9A%E4%BB%80%E4%B9%88/"/>
      <url>/2020/06/18/%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9C%80%E8%A6%81%E4%BC%9A%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/backend.png"></p><p><a href="https://roadmap.sh/roadmaps">转自roadmap.sh</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql入门</title>
      <link href="/2020/06/18/MySql%E5%85%A5%E9%97%A8/"/>
      <url>/2020/06/18/MySql%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql入门"><a href="#MySql入门" class="headerlink" title="MySql入门"></a>MySql入门</h2><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="数据库"></p><p><img src="https://nateshao-blog.oss-cn-shenzhen.aliyuncs.com/img/E-R%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="E-R关系图"></p><h1 id="数据库基本知识"><a href="#数据库基本知识" class="headerlink" title="数据库基本知识"></a>数据库基本知识</h1><h3 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h3><ul><li>Mysql数据库安装卸载与配置</li><li>Mysql数据库root密码重置<br>数据库操作</li><li>SQL介绍</li><li>数据库相关操作<h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3></li><li>Mysql数据类型</li><li>表操作-创建表与约束</li><li>表操作-查看 修改 删除表<h3 id="记录操作"><a href="#记录操作" class="headerlink" title="记录操作"></a>记录操作</h3></li><li>记录操作-insert操作</li><li>记录操作-update操作</li><li>记录操作-delete操作</li><li>记录操作-编码问题</li><li>记录操作-select基本查询</li><li>记录操作-order by排序</li><li>记录操作-聚合函数</li><li>记录操作-分组操作</li><li>记录操作总结</li></ul><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><ul><li>了解什么是数据库及数据库的作用</li><li>了解常见数据库</li><li>了解DBMS</li><li>了解数据库服务器与数据库及表的关系</li><li>掌握mysql数据库的安装卸载与配置<h3 id="内容-数据库基本知识"><a href="#内容-数据库基本知识" class="headerlink" title="内容:数据库基本知识"></a>内容:数据库基本知识</h3></li><li>数据库介绍<blockquote><ol><li>什么是数据库，数据库有什么作用?</li></ol></blockquote></li></ul><p>数据库就是存储数据的仓库，其本质是一个文件系统，数据按照特定的格式将数据存储起来，用户可以对数据库中的数据进行增加，修改，删除及查询操作</p><blockquote><ol start="2"><li>常见数据库有哪些?    </li></ol></blockquote><ul><li>Oracle数据库：Oracle是殷墟（yīn Xu）出土的甲骨文（oracle bone inscriptions）的英文翻译的第一个单词，在英语里是“神谕”的意思，由Larry Ellison 和另两个编程人员在1977创办，他们开发了自己的拳头产品，在市场上大量销售，1979 年，Oracle公司引入了第一个商用SQL 关系数据库管理系统。Oracle公司是最早开发关系数据库的厂商之一，其产品支持最广泛的操作系统平台。目前Oracle关系数据库产品的市场占有率名列前茅。</li><li>SQL Server数据库：1987 年，微软和 IBM合作开发完成OS/2，IBM 在其销售的OS/2 ExtendedEdition 系统中绑定了OS/2Database Manager，而微软产品线中尚缺少数据库产品。为此，微软将目光投向Sybase，同Sybase 签订了合作协议，使用Sybase的技术开发基于OS/2平台的关系型数据库。1989年，微软发布了SQL Server 1.0 版。</li><li>Sybase数据库：  Sybase公司成立于1984年，公司名称“Sybase”取自“system”和 “database” 相结合的含义。Sybase公司的创始人之一Bob Epstein 是Ingres 大学版（与System/R同时期的关系数据库模型产品）的主要设计人员。公司的第一个关系数据库产品是1987年5月推出的Sybase SQLServer1.0。Sybase首先提出Client/Server 数据库体系结构的思想，并率先在Sybase SQLServer 中实现。</li><li>MySQL数据：  mySQL是一个小型关系型数据库管理系统，开发者为瑞典MySQL AB公司。在2008年1月16号被Sun公司收购。而2009年，Sun公司又被Oracle公司收购。目前MySQL被广泛地应用在Internet上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库</li><li>DB2数据库：  作为关系数据库领域的开拓者和领航人，IBM在1997年完成了System R系统的原型，1980年开始提供集成的数据库服务器—— System/38，随后是SQL/DSforVSE和VM，其初始版本与SystemR研究原型密切相关。DB2 forMVSV1 在1983年推出。该版本的目标是提供这一新方案所承诺的简单性，数据不相关性和用户生产率。1988年DB2 for MVS 提供了强大的在线事务处理（OLTP）支持，1989 年和1993 年分别以远程工作单元和分布式工作单元实现了分布式数据库支持。最近推出的DB2 Universal Database 6.1则是通用数据库的典范，是第一个具备网上功能的多媒体关系数据库管理系统，支持包括Linux在内的一系列平台。</li></ul><ol start="3"><li>关系型数据库<blockquote><p>关系数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p></blockquote></li></ol><p>数据库发展历程如下所示：</p><ul><li>没有数据库，使用磁盘文件存储数据；</li><li>层次结构模型数据库；</li><li>网状结构模型数据库；</li><li>关系结构模型数据库，使用二维表格来存储数据；</li><li>关系-对象模型数据库；<br>我们今天要学习的MySQL就是关系结构模型数据库管理系统，简称关系型数据库管理系统</li></ul><ol start="4"><li>数据库管理系统(DBMS)</li></ol><blockquote><p>我们通常将数据库管理系统称为数据库，当我们安装了数据库（数据库服务器），就可以在数据库服务器中创建数据库，每个数据库中还可以包含多张表</p></blockquote><pre><code>        通过上述图我们知道了数据库与表之间的关系，那么我们的数据又是怎样存储在数据库中。</code></pre><p>数据库中的表就是一个多行多列的表格。在创建表时，需要指定表的列数，以及列名称，列类型等信息。而不用指定表格的行数，行数是没有上限的。<br>表中的列我们称之为字段，表中的行我们称之为记录。<br>那么用我们熟悉的java程序来与关系型数据对比，就会发现以下对应关系。<br>类——-表<br>类中属性——-表中的字段<br>对象——–记录。</p><h3 id="Mysql数据库root密码重置"><a href="#Mysql数据库root密码重置" class="headerlink" title="Mysql数据库root密码重置"></a>Mysql数据库root密码重置</h3><pre><code>        1) 停止mysql服务器 运行输入services.msc 停止mysql服务        2) 在cmd下 输入 mysqld --skip-grant-tables 启动服务器 光标不动 （不要关闭该窗口）        3) 新打开cmd 输入mysql -u root -p 不需要密码             use mysql;            update user set password=password(&#39;abc&#39;) WHERE User=&#39;root&#39;;        4) 关闭两个cmd窗口 在任务管理器结束mysqld 进程         5) 在服务管理页面 重启mysql 服务        密码修改完成</code></pre><p>【笔试面试题】</p><p>【重点总结】<br>        1. 卸载<br>            查找到数据库数据文件存储位置<br>                在mysql安装目录下有一个my.ini文件<br>                datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“<br>                将数据文件保存目录删除，在将mysql安装目录删除.<br>        2. 安装<br>            1.可以选择典型安装，默认安装在C:\Program Files (x86)\mysql目录下<br>            2.可以选择自定义安装  可以选择安装的目录<br>        3. 配置<br>            1) 配置mysql 默认字符集<br>            默认latin1 等价于 ISO-8859-1 改为 utf8<br>            2) Include Bin Directory in Window Path 将mysql/bin 目录配置环境变量path —- 勾选<br>            3) 输入超级管理root 密码<br>        4. 查看mysql服务<br>            1) 在运行中输入   services.msc<br>            2) 在使用mysql之前，要确保mysql服务开启.<br>            3) 在服务器可以通过右键属性，设置服务手动开启，这样这个服务就不会跟随电脑开机启动。<br>            4) 可以在命令行上通过命令来开启与关闭服务器<br>                开启  net start mysql<br>                关闭  net stop mysql<br>        5. 操作mysql数据库<br>            1.mysql默认的客户端<br>                默认的客户端连接的是 localhost   3306这个数据库服务器.<br>            2.在命令行下操作<br>                1. mysql -u root -p 回车<br>                    输入密码  root<br>                    这种方式，默认连接的也是localhost  3306这个数据库服务器<br>                    -u 代表用户<br>                    -p 代表<br>                2.    mysql -u root -h localhost -P 3306 -p<br>                    输入密码 root<br>                    -h 代表的是服务器的主机地址<br>                    -P 代表的是端口号</p><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>【学习目标】</p><ul><li>掌握SQL分类</li><li>掌握创建，切换，删除数据库操作</li><li>了解关于数据库的其它操作<br>【内容:数据库操作】<br>SQL介绍</li></ul><ol><li>SQL是什么，它的作用是什么<br>结构化查询语言(Structured Query Language)简称SQL，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统</li><li>SQL分类 <pre><code>     SQL一共分成四类，如下所示：</code></pre></li></ol><ul><li>数据定义语言：简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等，例如创建、删除、修改：数据库、表结构等；</li><li>数据操作语言：简称DML(Data Manipulation Language)，用来对数据库中表的记录进行更新，例如：增、删、改表记录；</li><li>数据控制语言：简称DCL(Data Control Language)，用来定义数据库的访问权限和安全级别，及创建用户；</li><li>数据查询语言：简称DQL(Data Query Language)，用来查询数据库中表的记录。<br>大家可能会对DDL和DML分的不太清楚，DDL是对数据库或表的结构进行操作，而DML是对表的记录进行操作(增、删、改)。以上四个分类，我们以后最常用的就是DDL、DML、DQL，其中，DQL是难点。</li></ul><ol start="3"><li>SQL语法<br>SQL的语法有以下要求：</li></ol><ul><li>SQL语句可以单行或多行书写，以分号结尾；</li><li>可使用空格和缩进来增强语句的可读性；</li><li>MySQL数据库的SQL语句不区分大小写，建议使用大写，例如：SELECT * FROM user。<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4></li></ul><p>1.使用默认的字符集与校对<br>    create database 数据库名;<br>2.可以指定数据库字符<br>    create database 数据库名  CHARACTER  set gbk;<br>3.可以指定数据库字符与校对<br>    create database 数据库名 character set 编码 COLLATE 校对<br>练习:<br>    创建一个名称为mydb1的数据库。<br>            create database mydb1;<br>    创建一个使用utf8字符集的mydb2数据库。<br>            create database mydb2 character set utf8;<br>    创建一个使用utf8字符集，并带校对规则的mydb3数据库。<br>            create database mydb3 character set utf8 collate utf8_general_ci;</p><h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><p>查看当前数据库服务器下所有数据库<br>    show databases;<br>查看创建数据库的语句<br>    show create database 数据库名;<br>练习:<br>    查看当前数据库服务器中的所有数据库<br>        show databases;<br>    查看前面创建的mydb2数据库的定义信息<br>        show create database mydb2;</p><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><p>修改数据库操作我们很少使用，了解一下语法就可以。<br>修改数据库的编码集<br>    alter database 数据库名称  character set 编码 collate 校对<br>练习:<br>    查看服务器中的数据库，并把其中某一个库的字符集修改为utf8;<br>        * show create database mydb2;<br>        * alter database mydb2 character set utf8 collate utf8_general_ci;</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><pre><code>    删除数据库drop database 数据库名</code></pre><p>练习:<br>    删除前面创建的mydb1数据库<br>    drop database mydb1;<br>其它关于库的操作<br>        1.切换数据库<br>    use 数据库名称<br>        2.查看当前所使用的事数据库<br>    select database();<br>【笔试面试题】<br>        简述什么是SQL及其分类</p><p>【重点总结】</p><ol><li>结构化查询语言(Structured Query Language)简称SQL<br>结构化查询语言是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统</li><li>SQL一共分成四类，如下所示：</li></ol><ul><li>数据定义语言：简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等，例如创建、删除、修改：数据库、表结构等；</li><li>数据操作语言：简称DML(Data Manipulation Language)，用来对数据库中表的记录进行更新，例如：增、删、改表记录；</li><li>数据控制语言：简称DCL(Data Control Language)，用来定义数据库的访问权限和安全级别，及创建用户；</li><li>数据查询语言：简称DQL(Data Query Language)，用来查询数据库中表的记录。</li></ul><ol start="3"><li>对于数据库的操作，我们重点掌握创建，切换与删除数据库<pre><code>      创建:create database 数据库名称;      切换:use 数据库名      删除:drop database 数据库名</code></pre><h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3>【学习目标】</li></ol><ul><li>掌握创建数据表的基本语法</li><li>掌握mysql中常用数据类型</li><li>了解约束的作用</li></ul><p>【内容:数据表操作】<br>mysql中数据类型<br>MySQL与Java一样，也有数据类型，MySQL中的数据类型主要应用在列上。我们在定义表的时候对每一列的定义有列名和列类型。这个列类型就是我们今天要讲的数据类型。<br>以下是MySQL数据库常用的数据类型:</p><p>类型    描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int整型，和java中的int类型一样；</span><br><span class="line">double浮点型，例如double(5,2)表示该列存放的数据最多是5位，而且其中必须有2位小数，它的最大值是：999.99；</span><br><span class="line">decimal浮点型，用于保存对准确精度有重要要求的值，例如与金钱有关的数据。</span><br><span class="line">char固定长度字符串类型，如果没有指定长度，默认长度是255，如果存储的字符没有达到指定长度，mysql将会在其后面用空格补足到指定长度；</span><br><span class="line">varchar可变长度字符串类型，它的长度可以由我们自己指定，它能保存数据长度的最大值是65535，如果存储的字符没有达到指定的长度，不会补足到指定长度；</span><br><span class="line">tinytext可变长度字符串类型，其存储范围是28-1B；</span><br><span class="line">text也是可变长度字符串类型，其存储范围是216-1B；</span><br><span class="line">mediumtext也是可变长度字符串类型，其存储范围是224-1B；</span><br><span class="line">longtext也是可变长度字符串类型，其存储范围是232-1B；</span><br><span class="line">tinyblob是可变长度二进制类型，其存储范围是28-1B；</span><br><span class="line">blob是可变长度二进制类型，其存储范围是216-1B；</span><br><span class="line">mediumblob也是可变长度二进制类型，其存储范围是224-1B；</span><br><span class="line">longblob也是可变长度二进制类型，其存储范围是232-1B；</span><br><span class="line">date日期类型，格式为yyyy-MM-dd，只有年月日，没有时分秒；</span><br><span class="line">time时间类型，格式为hh:mm:ss，只有时分秒，没有年月日；</span><br><span class="line">timestamp时间戳类型，格式为：yyyy-MM:dd hh:mm:ss，年月日，时分秒都有。</span><br></pre></td></tr></table></figure><pre><code>    char与varchar区别?            char是一个定长字符串.指定长度不会随着内容的不足而改变</code></pre><p>varchar是一个可变长度的字符串，它根据信息自动改变长度.(只在字符串长度小于指定长度情况下)</p><p>创建表与约束</p><ol><li><p>创建表—使用默认的字符集与校对</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 类型，</span><br><span class="line">字段<span class="number">2</span> 类型,</span><br><span class="line">.....</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建表–指定字符集与校对</p><pre><code>         create table 表名(             字段1 类型，             字段2 类型,             .....         ) character set 字符集  collate 校对;</code></pre><p>表名后面的内容需要使用“()”括起来，里面的内容是表结构，由列名和列类型组成，列名与列类型之间用空格隔开，每一列之间用逗号隔开，最后一列后面不需要加逗号，语句结束后需要加“；”。</p></li><li><p>约束<br>它是用于限定表中字段。<br> 我们在mysql课程中会介绍5种约束(<strong>注意:数据库中一共有六种约束，而mysql只支持五种</strong>)    </p></li></ol><ul><li>主键约束 <pre><code>  主键是用于标识当前记录的字段。它的特点是非空，唯一。          在开发中一般情况下主键是不具备任何意义，只是用于标识当前记录。  创建主键:</code></pre></li></ul><ol><li>在创建表时，在字段后面加上  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">primary key.</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablename(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">.......</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>也可以表创建的最后来指定主键                                                                create table tablename(                        <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id int，</span><br><span class="line"> .......</span><br><span class="line"> primary key(id)</span><br><span class="line">      )</span><br></pre></td></tr></table></figure></li><li>删除主键：alter table tablename drop primary key ;    </li></ol><ul><li><p>唯一约束</p><pre><code>  某一列的值不为重复可以使用唯一约束.    unique  </code></pre></li><li><p>非空约束</p><pre><code>  not null</code></pre></li><li><p>默认值约束</p><pre><code>  default 值</code></pre></li><li><p>外键约束</p><p>  自动增长  auto_increment<br>  扩展:</p><pre><code>  mysql : auto_increment 自动增长  sqlserver: identity(1,1)  oracle:sequence序列</code></pre><p>  练习:<br>创建一个张表user,该表具有以下字段:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">id int 主键 自动增长</span><br><span class="line">username 字符串 长度20 非空</span><br><span class="line">password 字符串 长度20 非空</span><br><span class="line">gender 字符串 长度10</span><br><span class="line">email 字符串 长度50 唯一 非空</span><br><span class="line">telephone 字符串 长度 20</span><br><span class="line">introduce 字符串 长度100</span><br><span class="line">activecode 字符串 长度50</span><br><span class="line">state 整型 </span><br><span class="line">role 字符串 长度10 默认值 “普通用户”</span><br><span class="line">registTime  时间戳 </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">username varchar(20) not null,</span><br><span class="line">password varchar(20) not null,</span><br><span class="line">gender varchar(10),</span><br><span class="line">email varchar(50) unique,</span><br><span class="line">telephone varchar(20),</span><br><span class="line">introduce varchar(100),</span><br><span class="line">activecode varchar(50),</span><br><span class="line">state int,</span><br><span class="line">role varchar(10) default  &quot;vip&quot;,ss</span><br><span class="line">registTime timestamp</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) AUTO_INCREMENT, </span><br><span class="line">  &#96;username&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;PASSWORD&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;gender&#96; VARCHAR(10) ,</span><br><span class="line">  &#96;email&#96; VARCHAR(50) ,</span><br><span class="line">  &#96;telephone&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;introduce&#96; VARCHAR(100),</span><br><span class="line">  &#96;activeCode&#96; VARCHAR(50) ,</span><br><span class="line">  &#96;state&#96; INT(11) ,</span><br><span class="line">  &#96;role&#96; VARCHAR(10) DEFAULT &#39;普通用户&#39;,</span><br><span class="line">  &#96;registTime&#96; TIMESTAMP ,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) PRIMARY KEY AUTO_INCREMENT, </span><br><span class="line">  &#96;username&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;PASSWORD&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;gender&#96; VARCHAR(10) ,</span><br><span class="line">  &#96;email&#96; VARCHAR(50) ,</span><br><span class="line">  &#96;telephone&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;introduce&#96; VARCHAR(100),</span><br><span class="line">  &#96;activeCode&#96; VARCHAR(50) ,</span><br><span class="line">  &#96;state&#96; INT(11) ,</span><br><span class="line">  &#96;role&#96; VARCHAR(10) DEFAULT &#39;普通用户&#39;,</span><br><span class="line">  &#96;registTime&#96; TIMESTAMP </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>表操作-查看修改删除表</p><ol><li>查看表</li></ol><ul><li>查看表结构<pre><code>  desc 表名;</code></pre></li><li>查看当前数据库下所有表<pre><code>  show tables;                </code></pre></li><li>查看表的字符编码集<pre><code>  show create table 表名;</code></pre></li></ul><ol start="2"><li>修改表</li></ol><ul><li><p>修改表的结构语法格式:alter table 表名 关键字 ….;                    </p><pre><code>  关键字有以下几个:      1.add----添加列操作   alter table 表名  add 列名 类型;      2.modify--修改列的类型 alter table 表名  modify 列名  类型;      3.drop --删除列  alter table 表名  drop 列名.      4.change--修改列名称  alter table 表名 change 旧列名  新列名  类型;</code></pre></li><li><p>修改表的名称</p><pre><code>  rename table 旧表名 to 新表名;</code></pre></li><li><p>修改表的字符编码集</p><pre><code>  alter table 表名 character set 字符集;</code></pre></li></ul><p>练习:<br>    在上面员工表的基本上增加一个image列。<br>        alter table user add image blob;<br>    修改job列，使其长度为60。<br>        alter table user modify job varchar(60);<br>    删除gender列。<br>        alter table user drop gender;<br>    表名改为employe。<br>        rename table employee to employe;<br>    修改表的字符集为utf8<br>        alter table employee character set utf8;<br>    列名name修改为username<br>        alter table employee change column name username varchar(20);<br>        alter table employee change name username varchar(20);<br>3. 删除表<br>        drop table 表名;<br>【笔试面试题】</p><ol><li>关于主键约束的特点</li><li>简述一下关于你知道的约束有哪些</li></ol><p>【重点总结】</p><p>1.mysql中数据类型：我们使用java的数据类型与mysql数据类型对比总结<br>            基本类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">byte<span class="comment">-------TINYINT</span></span><br><span class="line">short<span class="comment">------SMALLINT</span></span><br><span class="line">int <span class="comment">-------INT</span></span><br><span class="line">long<span class="comment">-------BIGINT</span></span><br><span class="line">float<span class="comment">------float</span></span><br><span class="line">double<span class="comment">-----double</span></span><br><span class="line">char</span><br><span class="line">boolean<span class="comment">----bool boolean 一般情况下直接使用数值类型来描述,直接使用int</span></span><br></pre></td></tr></table></figure><pre><code>        字符串                String   char  varchar                数据库中字符必须指定长度                时间日期</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.sql.Date<span class="comment">------Date datetime</span></span><br><span class="line">java.sql.Time<span class="comment">------Time</span></span><br><span class="line">java.sql.Timestamp<span class="comment">----Timestamp</span></span><br></pre></td></tr></table></figure><p>2.关于创建表的格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段 类型,</span><br><span class="line">….</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>3.关于约束<br>    主键约束  primary key<br>    非空 not null<br>    唯一 unique<br>    自动增长 auto_increment<br>4.怎样给表中一个字段添加主键<br>            1. 可以在字段后面直接使用primary key<br>            2. 可以在表创建最后通过 primar key(字段名称)</p><h3 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h3><p>【学习目标】<br>【内容:记录操作】<br>记录操作-insert操作<br>    插入所有列值<br>        insert into 表名(列名1,列名2, …) values(列值1, 列值2, …);<br>        表名后面是当前表中所有字段名称<br>    插入部分列值<br>        :    insert into 表名(列名1,列名2) values(列值1, 列值2);<br>            表名后面是当前表中部分字段名称<br>    不指定列名<br>                :    insert into 表名 values(列值1, 列值2, …);</p><ul><li><p>没有给出要插入的列，那么表示插入所有列；</p></li><li><p>值的个数必须是该表的列的个数；</p></li><li><p>值的顺序，必须与表创建时给出的列的顺序相同。</p><pre><code>      插入操作注意事项</code></pre></li><li><p>插入的数据应与字段的数据类型相同</p></li><li><p>数据的大小应该在列的长度范围内</p></li><li><p>在values中列出的数据位置必须与被加入的列的排列位置相对应。</p></li><li><p>.除了数值类型外，其它的字段类型的值必须使用引号引起。</p></li><li><p>如果要插入空值，可以不写字段，或者插入 null.                    </p></li><li><p>注意:对于自动增长的列在操作时，直接插入null值即可.    </p></li><li><p>练习:向user表中插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) PRIMARY KEY AUTO_INCREMENT, </span><br><span class="line">  &#96;username&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;PASSWORD&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;gender&#96; VARCHAR(10) ,</span><br><span class="line">  &#96;email&#96; VARCHAR(50) ,</span><br><span class="line">  &#96;telephone&#96; VARCHAR(20) ,</span><br><span class="line">  &#96;introduce&#96; VARCHAR(100),</span><br><span class="line">  &#96;activeCode&#96; VARCHAR(50) ,</span><br><span class="line">  &#96;state&#96; INT(11) ,</span><br><span class="line">  &#96;role&#96; VARCHAR(10) DEFAULT &#39;普通用户&#39;,</span><br><span class="line">  &#96;registTime&#96; TIMESTAMP </span><br><span class="line">)</span><br></pre></td></tr></table></figure><pre><code>        要求:插入两条数据</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.id&#x3D;1  username&#x3D;james password&#x3D;123 gender&#x3D;male email&#x3D;james@itcast.cn telephone&#x3D;13888888888 introduce&#x3D;good boy activeCode&#x3D;111 state&#x3D;1 role&#x3D;admin registTime&#x3D;2015-03-22 11:55:33</span><br><span class="line">2.id&#x3D;2  username&#x3D;tom  password&#x3D;111  gender&#x3D;male  role&#x3D;普通用户</span><br></pre></td></tr></table></figure></li><li><p>记录操作-update操作<br>  下面语句会将指定字段的值全部修改</p><pre><code>  update 表名 set 字段名称=值;</code></pre><p>  如果要修改多个字段</p><pre><code>  update 表名 set 字段1名称=值 ,字段2名称=值,...;</code></pre><p>  以上方式，进行修改，会将表中这个字段所有值都修改.<br>  在实际开发中，对于修改操作，都是有条件修改.</p><pre><code>  update 表名 set 字段=值 ,... where 条件.</code></pre><p>  练习:修改user表中信息</p></li></ul><ol><li><p>所有人的password修改为”456”</p></li><li><p>将名字叫tom的用户email修改为<a href="mailto:&#116;&#x6f;&#109;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6e;">&#116;&#x6f;&#109;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6e;</a></p></li><li><p>将tom的gender修改为”female”,并且introduce修改为”good girl”<br>记录操作-delete操作</p><pre><code>  delete操作是删除数据.      格式  delete from 表名.          这会将表中所有数据删除。在开发一般情况下有条件删除              delete from 表名 where 条件.          关于删除表与删除表数据区别:              1.删除表   drop table 表名              2.删除表中记录                      1.delete from 表名                  2.truncate table 表名          关于delete 与truncate的区别?(笔试题)              1.delete是一行一行删除   truncate是将表结构销毁，在重新创建表结构.                  如果数据比较多，truncate的性能高。              2.delete是dml语句  truncate dcl语句                      delete是受事务控制. 可以回滚数据.                  truncate是不受事务控制. 不能回滚.  练习:</code></pre><p>删除表中所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Delete</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>删除表中名字叫tom数据<br>Delete from user where username=’tom’<br>记录操作-编码问题</p><pre><code>  下面我们向user表中插入一条记录  insert into user(username,password) values(‘张三’,’123’);          当执行这条sql时，会报错  ERROR 1366 (HY000): Incorrect string value: &#39;\xD5\xC5\xC8\xFD&#39; for column &#39;username&#39; at row 1</code></pre></li></ol><p>原因:<br>    因为mysql的客户端编码的问题我们的是utf8,而系统的cmd窗口编码是gbk<br>解决方案（临时解决方案）:<br>    修改mysql客户端编码就可以。</p><pre><code>show variables like &#39;character%&#39;; 查看所有mysql的编码在图中与客户端有关的编码设置:    client connetion result 和客户端相关 、      database server system 和服务器端相关                 将客户端编码修改为gbk.                set character_set_results=gbk; / set names gbk;                以上操作，只针对当前窗口有效果，如果关闭了服务器，失效。</code></pre><p>如果想要永久修改，通过以下方式:<br>     在mysql安装目录下有my.ini文件</p><pre><code>    default-character-set=gbk 客户端编码设置                            character-set-server=utf8 服务器端编码设置注意:修改完成配置文件，重启服务</code></pre><p>记录操作-select基本查询</p><pre><code>        查询指定列             select 字段 from 表名;                查询指定字段信息,如果要查询多个字段             select 字段1,字段2,...from 表名;                                查询所有列            select * from 表名;                查询表中所有字段.                注意:使用&quot;*&quot;在练习，学习过程中可以使用，在实际开发中，不建议使用。                去掉重复记录            select distinct 字段 from 表名;                            distinct它的作用是去除重复.        使用别名                            使用as 别名可以给表中的字段，表设置别名.        在查询中可以直接对列进行运算            我们在sql操作中，可以直接对列进行运算。        ifnull函数使用</code></pre><p>在对数值类型的列做运算的时候，如果做运算的列的值为null的时，运算结果都为null，为了解决这个问题可以使用ifnull函数<br>            练习<br>                创建表products</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;products&#96; VALUES (NULL,&#39;感悟&#39;,100,&#39;励志&#39;,100,&#39;一次心灵的鸡汤&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;java与模式&#39;,67,&#39;计算机&#39;,200,&#39;让你的编程，从些不一样&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;java并发编程实战&#39;,190,&#39;计算机&#39;,49,&#39;实战大于理论&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;设计模式解析&#39;,88,&#39;计算机&#39;,86,&#39;头脑风暴&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;搭地铁游上海&#39;,28,&#39;生活百科&#39;,120,&#39;一次不一样的旅行&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;时空穿行&#39;,65,&#39;科技&#39;,87,&#39;这是一本好书&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;中国国家地理&#39;,45,&#39;生活百科&#39;,100,&#39;了解你生活的国家&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;欧洲&#39;, NULL,&#39;生活&#39;,200,&#39;你梦中向往的地方&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;网管员必备宝典&#39;,35,&#39;计算机&#39;,120,&#39;上网新手必备书籍&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">向表中插入数据</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;products&#96; VALUES (NULL,&#39;感悟&#39;,100,&#39;励志&#39;,100,&#39;一次心灵的鸡汤&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;java与模式&#39;,67,&#39;计算机&#39;,200,&#39;让你的编程，从些不一样&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;java并发编程实战&#39;,190,&#39;计算机&#39;,49,&#39;实战大于理论&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;设计模式解析&#39;,88,&#39;计算机&#39;,86,&#39;头脑风暴&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;搭地铁游上海&#39;,28,&#39;生活百科&#39;,120,&#39;一次不一样的旅行&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;时空穿行&#39;,65,&#39;科技&#39;,87,&#39;这是一本好书&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;中国国家地理&#39;,45,&#39;生活百科&#39;,100,&#39;了解你生活的国家&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;欧洲&#39;, NULL,&#39;生活&#39;,200,&#39;你梦中向往的地方&#39;);</span><br><span class="line">INSERT INTO &#96;products&#96; VALUES(NULL,&#39;网管员必备宝典&#39;,35,&#39;计算机&#39;,120,&#39;上网新手必备书籍&#39;);</span><br></pre></td></tr></table></figure><ol><li>查询出所有商品信息<br>Select * from products;</li><li>查询出所有商品的名称，价格，类别及数量信息<br>Select name,price,category,pnum from products;</li><li>查询出所有的商品类别<br>Select distinct category from products;</li><li>查询出所有商品的名称及价格，将所有商品价格加10<br>Select name,price+10 as 价格 from products</li><li>查询出每一个商品的总价及名称<br>Select name,price+10 as 价格 from products</li></ol><p>记录操作-where子句<br>我们在开发中，使用select操作，一般都是有条件查询，那以我们介绍一下关于where子句的使用<br>             格式 :select 字段  from 表名  where 条件;<br>                where条件种类:<br>                    1.比较运算符<br>                        &gt; &gt;= &lt; &lt;= = !=(&lt;&gt;)<br>                    2.逻辑运算符<br>                        and  or not<br>                    3.between …and<br>                        相当于 &gt;= and &lt;=<br>                        注意:between 后面的值必须是小值 and后面的是大值<br>                    4.in<br>                        可以比较多个值<br>                    5.like<br>                        模糊查询<br>                        通配符使用:<br>                            1.% 匹配多个<br>                            2._ 匹配一个<br>                    6.null值操作<br>                         is null; 判断为空<br>                         is not null; 判断不为空<br>            练习:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.查询所有计算机类商品信息</span><br><span class="line">SELECT * FROM products WHERE category&#x3D;&quot;计算机&quot;;</span><br><span class="line">2.查询出商品价格大于90的商品信息</span><br><span class="line">SELECT * FROM products WHERE price&gt;90;</span><br><span class="line">3.查询出商品总价大于10000的商品信息</span><br><span class="line">SELECT * FROM products WHERE (price*pnum)&gt;10000</span><br><span class="line">4.查询出价格在100-200之间的商品信息</span><br><span class="line">SELECT * FROM products WHERE price&gt;&#x3D;100 AND price&lt;&#x3D;200;</span><br><span class="line">SELECT * FROM products WHERE price BETWEEN 100 AND price;</span><br><span class="line">5.查询出商品价格是65,100或190的商品信息</span><br><span class="line">SELECT * FROM products WHERE price&#x3D;65 OR price&#x3D;100 OR price&#x3D;190;</span><br><span class="line">SELECT * FROM products WHERE price IN(65,100,190);</span><br><span class="line">6.查询出商品的名称中包含java的商品信息。</span><br><span class="line">SELECT * FROM products WHERE NAME LIKE &quot;%java%&quot;;</span><br><span class="line">7.查询出书名是两个字的商品信息</span><br><span class="line">SELECT * FROM products WHERE NAME LIKE &quot;__&quot;;</span><br><span class="line">8.查询出商品价格不为null商品信息</span><br><span class="line">SELECT * FROM products WHERE price IS NOT NULL;</span><br><span class="line">SELECT * FROM products WHERE NOT price IS NULL;</span><br></pre></td></tr></table></figure><p>记录操作-order by排序<br>在开发中，我们从数据库中查询出的数据经常需要根据某些字段进行排序，可以使用order by关键字,后面跟的就是要排序的列<br>order by 子句是select的最后的一个子句。<br>asc 升序 (默认)<br>desc 降序</p><p>练习:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.查询出所有商品，并根据价格进行升序排序</span><br><span class="line">SELECT * FROM products ORDER BY price ASC;</span><br><span class="line">2.查询出所有商品，根据数量进行升序排列，如果数量相同，根据价格进行降序排列</span><br><span class="line">SELECT * FROM products ORDER BY pnum ASC, price DESC;</span><br></pre></td></tr></table></figure><p>记录操作-聚合函数<br>之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，它是对一列的值进行计算，然后返回一个单一的值；另外聚合函数会忽略空值。<br>今天我们学习如下五个聚合函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count：统计指定列不为NULL的记录行数；</span><br><span class="line">sum：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</span><br><span class="line">max：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class="line">min：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class="line">avg：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</span><br></pre></td></tr></table></figure><p>练习:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.统计商品表中共有多少条记录</span><br><span class="line">SELECT COUNT(*) FROM products;</span><br><span class="line">2.统计商品表中价格大于50的有多少条记录</span><br><span class="line">SELECT COUNT(*) FROM products WHERE price&gt;50;</span><br><span class="line">3.统计有多少商品</span><br><span class="line">SELECT SUM(pnum) FROM products;</span><br><span class="line">4.统计所有商品的总价值</span><br><span class="line">SELECT SUM(pnum*price) FROM products;</span><br><span class="line">SELECT SUM(pnum*IFNULL(price,0)) FROM products</span><br><span class="line">5.统计所有商品的平均价格</span><br><span class="line">SELECT SUM(pnum*price)&#x2F;SUM(pnum) FROM products;</span><br><span class="line">6.统计出记录中price的平均值</span><br><span class="line">SELECT AVG(price) FROM products;</span><br><span class="line">7.统计出商品表中price最大与最小值</span><br><span class="line">SELECT MAX(price),MIN(price) FROM products;</span><br><span class="line">SELECT MAX(price),MIN(IFNULL(price,0)) FROM products;</span><br></pre></td></tr></table></figure><p>记录操作-分组操作<br>分组查询是指使用group by字句对查询信息进行分组,例如：我们要统计出products表中所有分类商品的总数量,这时就需要使用group by 来对products表中的商品根据category进行分组操作.<br>分组后我们在对每一组数据进行统计。<br>分组操作中的having子名是用于在分组后对数据进行过滤的，作用类似于where条件。</p><p>笔试题: having与where的区别:<br>                1.having是在分组后对数据进行过滤.<br>                  where是在分组前对数据进行过滤</p><pre><code>            2.having后面可以使用分组函数(统计函数)              where后面不可以使用分组函数。</code></pre><p>练习:</p><ol><li>对商品分类别统计，求出每一种类商品的总数量<br>SELECT category,SUM(pnum) FROM products GROUP BY category;</li><li>对商品分类别统计，求出每一种类商品的总数量，数量要大于100<br>SELECT category,SUM(pnum) FROM products GROUP BY category HAVING SUM(pnum)&gt;100</li></ol><p>记录操作总结<br>综合我们学习的查询相关关键字：select，from，where，group by，having，order by；它们的执行顺序是如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from：首先执行from，找到要查询的emp表；</span><br><span class="line">where：判断条件，筛选出工资大于15000的所有记录；</span><br><span class="line">group by：根据以上关键字执行的结果上对记录按照指定列进行分组</span><br><span class="line">having：对分组后的信息进行筛选；</span><br><span class="line">select：选择所需要的列信息；</span><br><span class="line">order by：对查询信息进行排序。</span><br></pre></td></tr></table></figure><p><strong>在SQL语言中，第一个被处理的子句是from字句，尽管select字句最先出现，但是几乎总是最后被处理。</strong></p><p>【笔试面试题】<br>            delete与truncate区别<br>            where与having区别</p><p>【重点总结】<br>对于本阶段内容，所有的都需要掌握。尤其是关于查询操作，我们在实际开发中，操作最多的就是关于查询</p><p>【总结】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加:<span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>,字段<span class="number">2</span>,…) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,…);</span><br><span class="line">      修改:<span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span>=值<span class="number">1</span>,字段<span class="number">2</span>=值<span class="number">2</span> <span class="keyword">where</span> 条件</span><br><span class="line">      删除:<span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">      <span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br><span class="line">      查询:<span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">group</span> <span class="keyword">by</span> 字段 <span class="keyword">having</span> 条件 <span class="keyword">order</span> <span class="keyword">by</span> 字段.</span><br></pre></td></tr></table></figure><p>关于sql中的条件</p><ol><li>比较运算符 &gt; &lt; &gt;= &lt;= = != &lt;&gt;</li><li>逻辑运算符 and or not</li><li>between and</li><li>in</li><li>like</li><li>is null<br>聚合函数<br>count<br>sum<br>avg<br>max<br>min<br>  分组<pre><code>  Group by   having</code></pre>【课后作业】<br>问答题        </li></ol><ul><li>描述数据库服务器、数据库与表之间的关系？</li><li>SQL语言的分类，描述各个分类中常用的关键字？<br>简述数据库常见操作<br>简述数据表常见操作<br>简述数据常见操作</li><li>char和varchar的区别？<br>介绍一下mysql中常用的聚合函数，并说明作用<br>简述group by的作用<br>having与where的区别</li><li>操作题<br>安装mysql数据库<br>创建一个mydb1数据库，并查看。<br>创建一个mydb2数据库，指定字符编码为gb2312;<br>创建一个mydb3数据库，指定字符编码为utf8,并且指定校验规则;</li></ul><p>update练习</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span>  employee;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">salary <span class="built_in">float</span>,</span><br><span class="line"><span class="keyword">resume</span> <span class="built_in">text</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;male&quot;</span>,<span class="string">&quot;1980-11-25&quot;</span>,<span class="number">2000</span>,<span class="string">&quot;good body&quot;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;male&quot;</span>,<span class="string">&quot;1980-04-25&quot;</span>,<span class="number">1000</span>,<span class="string">&quot;good body&quot;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&quot;xiaohong&quot;</span>,<span class="string">&quot;female&quot;</span>,<span class="string">&quot;1978-11-25&quot;</span>,<span class="number">4000</span>,<span class="string">&quot;good girl&quot;</span>);</span><br><span class="line"></span><br><span class="line">将所有员工薪水修改为5000元。</span><br><span class="line">将姓名为’zhangsan’的员工薪水修改为3000元。</span><br><span class="line">将姓名为’lisi’的员工薪水修改为4000元,sex改为female。</span><br><span class="line">将xiaohong的薪水在原有基础上增加1000元。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 练习</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">chinese <span class="built_in">float</span>,</span><br><span class="line">english <span class="built_in">float</span>,</span><br><span class="line">math <span class="built_in">float</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张小明&#x27;</span>,<span class="number">89</span>,<span class="number">78</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李进&#x27;</span>,<span class="number">67</span>,<span class="number">53</span>,<span class="number">95</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">87</span>,<span class="number">78</span>,<span class="number">77</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;李一&#x27;</span>,<span class="number">88</span>,<span class="number">98</span>,<span class="number">92</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;李来财&#x27;</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">67</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;张进宝&#x27;</span>,<span class="number">55</span>,<span class="number">85</span>,<span class="number">45</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;黄蓉&#x27;</span>,<span class="number">75</span>,<span class="number">65</span>,<span class="number">30</span>);</span><br><span class="line">查询表中所有学生的信息。</span><br><span class="line">查询表中所有学生的姓名和对应的英语成绩。</span><br><span class="line">过滤表中重复数据。</span><br><span class="line">统计每个学生的总分。</span><br><span class="line">在所有学生总分数上加10分特长分。</span><br><span class="line">使用别名表示学生分数。</span><br><span class="line">查询姓名为李一的学生成绩</span><br><span class="line">查询英语成绩大于90分的同学</span><br><span class="line">查询总分大于200分的所有同学</span><br><span class="line">查询英语分数在 80－90之间的同学。</span><br><span class="line">查询数学分数为89,90,91的同学。</span><br><span class="line">查询所有姓李的学生英语成绩。</span><br><span class="line">查询数学分&gt;80并且语文分&gt;80的同学。</span><br><span class="line">查询英语&gt;80或者总分&gt;200的同学</span><br><span class="line">对数学成绩排序后输出。</span><br><span class="line">对总分排序后输出，然后再按从高到低的顺序输出</span><br><span class="line">对姓李的学生成绩排序输出</span><br><span class="line">products</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BootStrap</title>
      <link href="/2020/06/18/BootStrap/"/>
      <url>/2020/06/18/BootStrap/</url>
      
        <content type="html"><![CDATA[<h3 id="掌握什么是响应式及响应式的原理"><a href="#掌握什么是响应式及响应式的原理" class="headerlink" title="掌握什么是响应式及响应式的原理"></a>掌握什么是响应式及响应式的原理</h3><a id="more"></a><h3 id="掌握BootStrap的栅格系统"><a href="#掌握BootStrap的栅格系统" class="headerlink" title="掌握BootStrap的栅格系统"></a>掌握BootStrap的栅格系统</h3><h3 id="了解BootStrap的其他组件及JS控件"><a href="#了解BootStrap的其他组件及JS控件" class="headerlink" title="了解BootStrap的其他组件及JS控件"></a>了解BootStrap的其他组件及JS控件</h3><p>基本的过滤器:    择器:过滤器   $(“div:first”)</p><p>​    :first : 找出第一个元素</p><p>​    :last  找出最后一个元素</p><p>​    :even   找出偶数索引</p><p>​    :odd   找出奇数</p><p>​    :gt(index)   greater-than大于</p><p>​    :lt(index)    小于</p><p>​    :eq(index)  等于</p><p>表单选择器:</p><p>​    :input  找出所有的输入项,  textarea select button</p><p>​    :password</p><p>​    :text</p><p>​    :radio</p><p>表单对象属性的过滤器</p><p>​    :selected</p><p>​    :checked</p><p>常用函数:</p><p>​    属性prop()    properties</p><p>​        如果传入一个参数  就是获取</p><p>​    prop(“src”,”../img/1.jpg”);  </p><p>​        设置图片路径</p><p>​    attr : 操作一些自定义的属性  <img  abc='123' /></p><p>​    prop: 通常是用来操作元素固有属性的 ,建议大家使用prop来操作属性</p><p>​    css() ; 修改css样式</p><p>​    addClass()  : 添加一个class样式</p><p>​    removeClass() : 移除</p><p>​    </p><p>​    blur : 绑定失去焦点</p><p>​    focus: 绑定获得焦点事件</p><p>​    click:</p><p>​    dblclick</p><p>​    change</p><p>​    </p><p>​    append    :  给自己添加儿子</p><p>​    appendTo :  把自己添加到别人家</p><p>​    prepend :  在自己子节点最前面添加子节点</p><p>​    after  : 在自己后面添加一个兄弟</p><p>​    before: 在自己前面添加一个兄弟</p><p>​    </p><p>​    $(“数组对象”).each(function(index,data))</p><p>​    $.each(arr,function(index,data))</p><p>​    </p><h3 id="表单校验案例"><a href="#表单校验案例" class="headerlink" title="表单校验案例"></a>表单校验案例</h3><h4 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h4><ul><li>trigger  :  触发事件,但是会执行类似浏览将光标移到输入框内的这种浏览器默认行为</li><li>triggerHandler : 仅仅只会触发事件所对应的函数</li><li>is()</li></ul><h4 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h4><ol><li>首先给必填项,添加尾部添加一个小红点</li><li>获取用户输入的信息,做相应的校验</li><li>事件: 获得焦点, 失去焦点, 按键抬起</li><li>表单提交的事件</li></ol><h3 id="使用JQuery发送请求局部刷新页面"><a href="#使用JQuery发送请求局部刷新页面" class="headerlink" title="使用JQuery发送请求局部刷新页面"></a>使用JQuery发送请求局部刷新页面</h3><p>​    数据交换格式:</p><p>​        json</p><p>​        xml</p><p>​    </p><ul><li><p>什么是JSON</p><p><a href="http://baike.baidu.com/view/136475.htm">JSON</a>(<a href="http://baike.baidu.com/view/16168.htm">JavaScript</a> Object Notation) 是一种轻量级的数据交换格式。它基于<a href="http://baike.baidu.com/view/810176.htm">ECMAScript</a>的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括<a href="http://baike.baidu.com/subview/10075/6770152.htm">C</a>、C++、<a href="http://baike.baidu.com/view/6590.htm">C#</a>、<a href="http://baike.baidu.com/subview/29/12654100.htm">Java</a>、JavaScript、<a href="http://baike.baidu.com/view/46614.htm">Perl</a>、<a href="http://baike.baidu.com/view/21087.htm">Python</a>等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。</p></li><li><p>JSON格式</p><p>​    JSON对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; key1:value&#125;   </span><br><span class="line">&#123;<span class="attr">&quot;username&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>​    JSON数组</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123; key1:value&#125;,&#123; key1:value&#125;,&#123; key1:value&#125;]</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="使用BootStrap开发一个响应式的页面出来"><a href="#使用BootStrap开发一个响应式的页面出来" class="headerlink" title="使用BootStrap开发一个响应式的页面出来"></a>使用BootStrap开发一个响应式的页面出来</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>开发一套响应式页面.让他能够在各种设备上显示正常,提升用户体验</p><h4 id="技术分析-1"><a href="#技术分析-1" class="headerlink" title="技术分析"></a>技术分析</h4><h5 id="BootStap概述"><a href="#BootStap概述" class="headerlink" title="BootStap概述"></a>BootStap概述</h5><ul><li><p>什么是BootStrap</p><p>​</p></li><li><p>BootStrap有什么作用</p><ul><li>复制粘贴, 能够提高开发人员的工作效率</li></ul></li></ul><ul><li>什么是响应式页面</li></ul><ul><li><p>适应不同的分辨率显示不同样式,提高用户的体验</p><p>​</p></li></ul><ul><li>BootStrap的中文网<ul><li><a href="http://www.bootcss.com/">http://www.bootcss.com</a></li></ul></li><li>下载BootStrap</li><li>BootStrap结构<ul><li>全局CSS<ul><li>bootStrap中已经定义好了一套CSS的样式表</li></ul></li><li>组件<ul><li>BootStrap定义的一套按钮,导航条等组件</li></ul></li><li>JS插件<ul><li>BootStrap定义了一套JS的插件,这些插件已经默认实现了很多种效果</li></ul></li></ul></li></ul><h5 id="BootStrap的入门开发"><a href="#BootStrap的入门开发" class="headerlink" title="BootStrap的入门开发"></a>BootStrap的入门开发</h5><ul><li>引入相关的头文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/bootstrap.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--需要引入JQuery--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/bootstrap.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>BootStrap的布局容器</li></ul><p><code>.container</code> 类用于固定宽度并支持响应式布局的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口（viewport）的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>校验表单扩展:</p><p>trigger  : 触发浏览器默认行为</p><p>triggerHandler : 不会触发</p><p>is : 判断</p><p>find : 查找</p><p>老黄历:</p><p>什么json: 轻量级的数据交换格式</p><p>json对象:  {“username”:”zhangsan”}</p><p>json数组: [ {“username”:”zhangsan”}, {“username”:”zhangsan”}, {“username”:”zhangsan”}]</p><p>ajax异步请求: </p><p>​    同步和异步</p><ul><li><p>row</p><p> Bootstrap 栅格系统的工作原理：</p><ul><li>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li><li>通过“行（row）”在水平方向创建一组“列（column）”。</li><li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li><li>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li><li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code></li></ul><p>​</p></li><li><p>BootStrap的栅格系统</p><ul><li>响应式设计: 这种设计依赖于CSS3中的媒体查询</li><li>栅格样式:<ul><li>设备分辨率大于1200 使用lg样式</li><li>设备分辨率大于992 &lt; 1200 使用md样式</li><li>设备分辨率大于768 &lt; 992  使用sm样式</li><li>设备分辨率小于768使用xs样式</li></ul></li></ul></li><li><p>BootStrap的全局CSS</p><ul><li>定义了一套CSS<ul><li>对页面中的元素进行定义</li><li>列表元素,表单,按钮,图片…</li></ul></li></ul></li></ul><h4 id="步骤分析-1"><a href="#步骤分析-1" class="headerlink" title="步骤分析"></a>步骤分析</h4><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="使用BootStrap布局网站首页"><a href="#使用BootStrap布局网站首页" class="headerlink" title="使用BootStrap布局网站首页"></a>使用BootStrap布局网站首页</h4><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>请使用BootStrap对我们的首页进行优化</p><h4 id="技术分析-2"><a href="#技术分析-2" class="headerlink" title="技术分析"></a>技术分析</h4><h4 id="步骤分析-2"><a href="#步骤分析-2" class="headerlink" title="步骤分析"></a>步骤分析</h4><blockquote><ol><li>新建一个HTML页面.引入bootStrap相关的js和CSS</li><li>定义一个整体的div, 将整体的div分成8个部分</li><li>完成没部分的内容显示</li></ol></blockquote><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">准备工作:</span></span><br><span class="line"><span class="comment">&lt;meta name=&#x27;viewport&#x27;&gt;</span></span><br><span class="line"><span class="comment">1.导入bootstrap css文件</span></span><br><span class="line"><span class="comment">2.导入JQuery</span></span><br><span class="line"><span class="comment">3.bootstrap.js</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.写一个div  class = container 支持响应式的布局容器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">jQuery文件。务必在bootstrap.min.js 之前引入</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery-1.11.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/logo2.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 hidden-xs&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/header.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--菜单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse&quot;</span> <span class="attr">role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>所有分类 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-right&quot;</span> <span class="attr">role</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要搜索的商品&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;carousel-example-generic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span> <span class="attr">role</span>=<span class="string">&quot;listbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;left carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;right carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--最新商品这里--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新商品<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/title2.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--商品部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左边div--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 hidden-sm hidden-xs&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/big01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--右边div--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中等广告图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/middle01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/ad.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--最新商品这里--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新商品<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/title2.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--商品部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左边div--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 hidden-sm hidden-xs&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/big01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--右边div--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中等广告图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/middle01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--商品项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆浆机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--页脚广告--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/footer.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网站声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>招贤纳士<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>法律声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>支付方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>配送方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>服务声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itheima.com&quot;</span>&gt;</span>广告声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">Copyright © 2005-2016 传智商城 版权所有</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五天前端内容总结"><a href="#五天前端内容总结" class="headerlink" title="五天前端内容总结"></a>五天前端内容总结</h3><ul><li>JQ方式校验表单(要求做出来)</li><li>json :  (了解)<ul><li>json对象 {}</li><li>json数组 [{},{}]</li></ul></li><li>$.get(url,function(data){}) (了解)</li><li>bootstrap:  Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。<ul><li>全局CSS样式: css样式<ul><li>栅格系统:<ul><li>将屏幕划分成12个格子,12列</li><li>class=’row’ 当前是行</li><li>行里面放的是列 col-屏幕分辨率-数字    (每一种分辨率后的数字总和必须是等于12,如果超过12,另起一行)</li><li>col-lg-数字: 在超宽屏幕上使用</li><li>col-md-数字: 在中等屏幕上,PC电脑</li><li>col-sm-数字:  在平板电脑上</li><li>col-xs-数字:  在手机上</li></ul></li></ul></li><li>组件:  导航条 , 进度条, 字体</li><li>javascript插件 : 轮播图</li><li>复制粘贴</li></ul></li><li>什么是响应式: 会根据不同的分辨率去显示不同页面结构,提高用户体验</li></ul><ul><li><p>HTML: 超文本标记语言: 设计网页,决定了网页的结构</p></li><li><p>CSS:  层叠样式表 ,主要是用来美化页面, 将美化和HTML代码进行分离,提高代码复用性</p></li><li><p>javascript: 脚本语言,由浏览器解释执行, 弱类型语言(var i), 提供用户交互</p></li><li><p>jquery:  javascript函数库,进一步的封装</p><ul><li><p>选择器:</p><ul><li>ID选择器</li><li>类选择器</li><li>元素选择器</li><li>通配符选择器</li><li>选择器分组</li></ul></li><li><p>层级选择器</p><ul><li>后代选择器</li><li>子元素选择器</li><li>相邻兄弟选择器</li><li>兄弟选择器 : 找出所有的弟弟</li></ul></li><li><p>属性选择器:</p><ul><li>选择器[属性名称=’属性的值’]</li></ul></li><li><p>表单选择器</p><ul><li>:input</li><li>:text</li><li>:password</li></ul><p>body &gt; div &gt; div:nth-child(7) &gt; div:nth-child(3) &gt; div:nth-child(8)</p></li><li><p>基本的过滤器</p><ul><li>:first</li><li>:last</li><li>:even</li><li>:odd</li><li>:gt</li><li>:lt</li><li>:eq</li></ul></li><li><p>表单对象属性</p><ul><li>:selected</li><li>:checked</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery</title>
      <link href="/2020/06/18/Jquery/"/>
      <url>/2020/06/18/Jquery/</url>
      
        <content type="html"><![CDATA[<h4 id="使用JQuery完成页面定时弹出广告"><a href="#使用JQuery完成页面定时弹出广告" class="headerlink" title="使用JQuery完成页面定时弹出广告"></a>使用JQuery完成页面定时弹出广告</h4><p>定时器: </p><p>​    setInterval     clearInterval</p><p>​    setTimeout    clearTimeout</p><p>显示:  img.style.display  = “block”</p><p>隐藏:  img.style.display  = “none”</p><p>img 对象</p><p>​    style属性:  style对象</p><h4 id="使用JQuery完成表格的隔行换色"><a href="#使用JQuery完成表格的隔行换色" class="headerlink" title="使用JQuery完成表格的隔行换色"></a>使用JQuery完成表格的隔行换色</h4><p>获得所有的行</p><p>​    table.rows[]</p><p>修改行的颜色</p><p>​    row.bgColor =”red”</p><p>​    row.style.backgroundColor = “black”</p><p>​    row.style.background = “red”</p><p>​    “background-color:red”</p><p>​    “background:red”</p><h4 id="使用JQuery完成复选框的全选效果"><a href="#使用JQuery完成复选框的全选效果" class="headerlink" title="使用JQuery完成复选框的全选效果"></a>使用JQuery完成复选框的全选效果</h4><p>checked属性</p><p>如何获取所有复选框:</p><p>​    document.getElementsByName   get Elements  By Name  数据库里面</p><h4 id="使用JQuery完成省市联动效果"><a href="#使用JQuery完成省市联动效果" class="headerlink" title="使用JQuery完成省市联动效果"></a>使用JQuery完成省市联动效果</h4><p>​    JS中的数组:  [“城市”]</p><p>​    new Array()</p><p>​    DOM树操作:</p><p>​        创建节点:  document.createElement</p><p>​        创建文本节点: document.createTextNode</p><p>​        添加节点:  appendChild</p><h4 id="使用JQuery完成下列列表左右选择"><a href="#使用JQuery完成下列列表左右选择" class="headerlink" title="使用JQuery完成下列列表左右选择"></a>使用JQuery完成下列列表左右选择</h4><p>​    select下拉列表</p><p>​    multiple 允许多选</p><p>​    ondblclick : 双击事件</p><p>​    for循环遍历,一边遍历一边移除出现的问题</p><h4 id="使用JQuery完成表单的校验-扩展"><a href="#使用JQuery完成表单的校验-扩展" class="headerlink" title="使用JQuery完成表单的校验(扩展)"></a>使用JQuery完成表单的校验(扩展)</h4><p>​    事件:</p><p>​    获得焦点事件: onfocus</p><p>​    失去焦点事件: onblur</p><p>​    按键抬起事件: onkeyup</p><p>​    鼠标移入:  onmouseenter</p><p>​    鼠标移出: onmouseout</p><p>​    JS引入外部文件 : script </p><h3 id="今日目标："><a href="#今日目标：" class="headerlink" title="今日目标："></a>今日目标：</h3><h4 id="掌握JQuery的基本使用"><a href="#掌握JQuery的基本使用" class="headerlink" title="掌握JQuery的基本使用"></a>掌握JQuery的基本使用</h4><h4 id="掌握JQuery的基本选择器-层次选择器"><a href="#掌握JQuery的基本选择器-层次选择器" class="headerlink" title="掌握JQuery的基本选择器,层次选择器"></a>掌握JQuery的基本选择器,层次选择器</h4><h4 id="会使用JQuery完成DOM的基本操作"><a href="#会使用JQuery完成DOM的基本操作" class="headerlink" title="会使用JQuery完成DOM的基本操作"></a>会使用JQuery完成DOM的基本操作</h4><h3 id="1-使用JQuery完成页面定时弹出广告"><a href="#1-使用JQuery完成页面定时弹出广告" class="headerlink" title="1. 使用JQuery完成页面定时弹出广告"></a>1. 使用JQuery完成页面定时弹出广告</h3><h4 id="1-1-需求分析："><a href="#1-1-需求分析：" class="headerlink" title="1.1 需求分析："></a>1.1 需求分析：</h4><p>当用户打开界面，3秒钟之后弹出广告，这个广告显示5秒钟，隐藏广告</p><h4 id="1-2-技术分析"><a href="#1-2-技术分析" class="headerlink" title="1.2 技术分析"></a>1.2 技术分析</h4><p>定时器: setTimeout </p><p>显示和隐藏:  style.display = “block/none”</p><p>什么JQuery:</p><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（<em>或JavaScript框架</em>）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p><p>jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等</p><p>JQuery的作用:</p><p>​    1. <strong>写更少的代码,做更多的事情: write Less ,Do more</strong></p><pre><code>2. 将我们页面的JS代码和HTML页面代码进行分离</code></pre><p>为什么学习JQuery:</p><p>​    提高我们的工作效率</p><p>JQ的入门</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//js文档加载完成的事件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;window.onload   111&quot;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;window.onload   222&quot;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">/*文档加载完成的事件*/</span></span></span><br><span class="line"><span class="javascript">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> alert(<span class="string">&quot;jQuery(document).ready(function()&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line">/*</span><br><span class="line"> jQuery  简写成 $</span><br><span class="line"> */</span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"> alert(<span class="string">&quot;$(document).ready(function()&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">最简单的写法 </span><br><span class="line">*/</span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;$(function()&#123;&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【JQ中根据ID查找元素】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">全都是根据选择器去找的</span><br><span class="line">#ID&#123;&#125;</span><br><span class="line">.类名&#123;&#125;</span><br><span class="line">$(&quot;#ID的名称&quot;)</span><br></pre></td></tr></table></figure><p>【JQ和JS之间的转换】</p><ul><li>JQ对象,只能调用JQ的属性和方法</li><li>JS对象 只能调用JS的属性和方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function changeJS()&#123;</span><br><span class="line">var div = document.getElementById(&quot;div1&quot;);</span><br><span class="line">//div.innerHTML = &quot;JS成功修改了内容&quot;</span><br><span class="line">//将JS对象转成JQ对象</span><br><span class="line">$(div).html(&quot;转成JQ对象来修改内容&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line">//给按钮绑定事件</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">//找到div1</span><br><span class="line">//$(&quot;#div1&quot;).html(&quot;JQ方式成功修改了内容&quot;);</span><br><span class="line">//将JQ对象转成JS对象来调用</span><br><span class="line">var $div = $(&quot;#div1&quot;);</span><br><span class="line">//var jsDiv = $div.get(0);</span><br><span class="line">var jsDiv = $div[0];</span><br><span class="line">jsDiv.innerHTML=&quot;jq转成JS对象成功&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JQ的开发步骤: (将我们页面的JS代码和HTML页面代码进行分离)</p><pre><code>1. 导入JQ相关的文件2.  文档加载完成事件: $(function)  : 页面初始化的操作: 绑定事件, 启动页面定时器3. 确定相关操作的事件4. 事件触发函数5. 函数里面再去操作相关的元素</code></pre><p>显示和隐藏  img.style.display</p><p>【JQ中的动画效果】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show()</span><br><span class="line">hide()</span><br><span class="line">slideUp</span><br><span class="line">slideDown</span><br><span class="line">fadeIn</span><br><span class="line">fadeOut</span><br><span class="line">animate : 自定义动画</span><br></pre></td></tr></table></figure><h4 id="1-3-步骤分析："><a href="#1-3-步骤分析：" class="headerlink" title="1.3 步骤分析："></a>1.3 步骤分析：</h4><ol><li>导入JQ的文件</li><li>编写JQ的文档加载事件</li><li>启动定时器 setTimeout(“”,3000);</li><li>编写显示广告的函数</li><li>在显示广告里面再启动一个定时器</li><li>编写隐藏广告的函数</li></ol><h4 id="1-4-代码实现"><a href="#1-4-代码实现" class="headerlink" title="1.4 代码实现"></a>1.4 代码实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//显示广告</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">showAd</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#img1&quot;</span>).slideDown(<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">setTimeout</span>(<span class="string">&quot;hideAd()&quot;</span>,<span class="number">3000</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//隐藏广告</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">hideAd</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#img1&quot;</span>).slideUp(<span class="number">2000</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">setTimeout</span>(<span class="string">&quot;showAd()&quot;</span>,<span class="number">3000</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JQuery中的选择器"><a href="#JQuery中的选择器" class="headerlink" title="JQuery中的选择器"></a>JQuery中的选择器</h3><p>让我们能够更加精确找到我们要操作的元素    </p><h5 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h5><ul><li>ID选择器 :     #ID的名称</li><li>类选择器:     以 . 开头  .类名</li><li>元素选择器:    标签的名称</li><li>通配符选择器:   * </li><li>选择器,选择器:  选择器1,选择器2</li></ul><h5 id="基本选择器的案例"><a href="#基本选择器的案例" class="headerlink" title="基本选择器的案例"></a>基本选择器的案例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">- ID选择器 :     #ID的名称</span><br><span class="line">- 类选择器:     以 . 开头  .类名</span><br><span class="line">- 元素选择器:    标签的名称</span><br><span class="line">- 通配符选择器:   * </span><br><span class="line">- 选择器,选择器:  选择器<span class="number">1</span>,选择器<span class="number">2</span></span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//文档加载事件,页面初始化的操作</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//初始化操作: 给按钮绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;#two&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//找出mini类的所有元素</span></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;.mini&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn4&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;*&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*选择器分组*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找出mini类 和 span元素</span></span><br><span class="line">$(<span class="string">&quot;#btn5&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;.mini,span&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="JQ中的层级选择器"><a href="#JQ中的层级选择器" class="headerlink" title="JQ中的层级选择器"></a>JQ中的层级选择器</h5><ul><li>子元素选择器:   选择器1 &gt; 选择器2</li><li>后代选择器:  选择器1 儿孙</li><li>相邻兄弟选择器 :  选择器1 + 选择器2 : 找出紧挨着的一个弟弟</li><li>找出所有弟弟:  选择器1~ 选择器2   : 找出所有的弟弟</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//文档加载事件,页面初始化的操作</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//初始化操作: 给按钮绑定事件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//找出body下面的子div   </span></span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;body &gt; div&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript"><span class="comment">//找出body下面的所有div</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;body div&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#one+div&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn4&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#two~div&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="JQ中的基本过滤器"><a href="#JQ中的基本过滤器" class="headerlink" title="JQ中的基本过滤器"></a>JQ中的基本过滤器</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">/<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="comment">//文档加载事件,页面初始化的操作</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//初始化操作: 给按钮绑定事件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//过滤出所有div中第一个元素</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;div:first&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//过滤出所有div中偶数位的div</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;div:even&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;div:odd&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#btn4&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;div:gt(2)&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;palegreen&quot;</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="JQ中的属性选择器"><a href="#JQ中的属性选择器" class="headerlink" title="JQ中的属性选择器"></a>JQ中的属性选择器</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">//找到有name属性的input</span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;input[name]&quot;).attr(&quot;checked&quot;,true);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;input[name=&#x27;accept&#x27;]&quot;).attr(&quot;checked&quot;,true);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;input[name=&#x27;newsletter&#x27;][value=&#x27;Hot Fuzz&#x27;]&quot;).attr(&quot;checked&quot;,true);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="JQ中的表单过滤器"><a href="#JQ中的表单过滤器" class="headerlink" title="JQ中的表单过滤器"></a>JQ中的表单过滤器</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//1.文档加载事件</span></span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;:text&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上午的内容回顾:</p><p>什么是JQ:  write less , do more: 写更少的代码,做更多的事</p><p>​    javascript函数库</p><p>1.11版本</p><p>定时器:</p><p>动画效果:</p><p>​    show : 显示</p><p>​    hide : 隐藏</p><p>​    slideDown: </p><p>​    slideUp: 向上滑动</p><p>​    fadeIn</p><p>​    fadeOut</p><p>JQ选择器:</p><p>基本选择器:</p><p>​    ID选择器:  #ID的名字</p><p>​    类选择器:  .类名</p><p>​    元素选择器:   标签名称</p><p>​    通配符选择器:  *</p><p>​    选择器分组:  选择器1,选择器2</p><p>层级选择器:</p><p>​    后代选择器:  选择器1 儿孙</p><p>​    子元素选择器: 选择器1 &gt; 儿子</p><p>​    相邻兄弟选择器:  选择器1 + 选择器2  找出紧挨着它的弟弟</p><p>​    所有弟弟选择器:  选择器1~选择器2  找出所有弟弟</p><p>基本过滤器:</p><p>​    选择器:first  : 找出的是第一个</p><p>​    :last  </p><p>​    :even   找出索引为偶数</p><p>​    :odd    找出奇数索引</p><p>​    :gt(index) :  大于索引</p><p>​    :lt(index)   小于</p><p>​    :eq(index)  等于</p><p>属性选择器:</p><p>​    选择器[href]  : 单个属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">选择器[href][title] : 多个属性</span><br><span class="line">选择器[href][title=&#x27;test&#x27;] : 多个属性,包含值</span><br></pre></td></tr></table></figure><p>表单过滤器:</p><p>​    :input   找出所有输入项:  input  textarea  select </p><p>​    :text </p><p>​    :password  </p><p>表单对象属性:</p><p>​    找出select中被选中的那一项:</p><p>​    option:selected</p><p>JQ的开发步骤:</p><pre><code>1. 导入JQ相关的包2. 文档加载文成的事件:  页面初始化:  绑定事件, 启动定时器3.  确定事件4. 实现事件索要触发的函数5. 函数里面再去操作我们要操作的元素</code></pre><h3 id="使用JQ完成表格的隔行换色"><a href="#使用JQ完成表格的隔行换色" class="headerlink" title="使用JQ完成表格的隔行换色"></a>使用JQ完成表格的隔行换色</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析:"></a>需求分析:</h4><p>在我们的实际开发过程中,我们的表格如果所有的行都是一样的话,很容易看花眼,所以我们需要让我们的表格隔行换色</p><h4 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析:"></a>技术分析:</h4><p>获取所有行 table.rows</p><p>遍历所有行</p><p>根据行号去修改每一行的背景颜色: bgColor</p><p>​    style.backgroundColor = “red”</p><h4 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析:"></a>步骤分析:</h4><ol><li>导入JQ的包</li><li>文档加载完成函数: 页面初始化</li><li>获得所有的行 :   元素选择器</li><li>根据行号去修改颜色</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">//获得所有的行 :   元素选择器</span><br><span class="line">$(&quot;tbody &gt; tr:even&quot;).css(&quot;background-color&quot;,&quot;#CCCCCC&quot;);</span><br><span class="line">//修改基数行</span><br><span class="line">$(&quot;tbody &gt; tr:odd&quot;).css(&quot;background-color&quot;,&quot;#FFF38F&quot;);</span><br><span class="line">//$(&quot;tbody &gt; tr&quot;).css(&quot;background-color&quot;,&quot;#FFF38F&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用JQuery完成表单的全选全不选功能"><a href="#使用JQuery完成表单的全选全不选功能" class="headerlink" title="使用JQuery完成表单的全选全不选功能"></a>使用JQuery完成表单的全选全不选功能</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>​    在我们对表格处理的时,有些情况下,我们需要对表格进行批量处理,</p><h4 id="技术分析-1"><a href="#技术分析-1" class="headerlink" title="技术分析:"></a>技术分析:</h4><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现:"></a>代码实现:</h4><h3 id="使用JQ完成省市联动效果"><a href="#使用JQ完成省市联动效果" class="headerlink" title="使用JQ完成省市联动效果"></a>使用JQ完成省市联动效果</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析:"></a>需求分析:</h4><p>​    在我们的注册表单中,通常我们需要知道用户的籍贯,需要一个给用选择的项,当用户选中了省份之后,列出省下面所有的城市</p><h4 id="技术分析-2"><a href="#技术分析-2" class="headerlink" title="技术分析:"></a>技术分析:</h4><ol><li><p>准备工作 : 城市信息的数据</p></li><li><p>添加节点 :  appendChild (JS)</p><ol><li>append  :  添加子元素到末尾</li><li>appendTo  : 给自己找一个爹,将自己添加到别人家里</li><li>prepend : 在子元素前面添加</li><li>after :   在自己的后面添加一个兄弟</li></ol></li><li><p>遍历的操作:</p><p>​    </p></li></ol><h4 id="步骤分析-1"><a href="#步骤分析-1" class="headerlink" title="步骤分析:"></a>步骤分析:</h4><ol><li>导入JQ的文件</li><li>文档加载事件:页面初始化</li><li>进一步确定事件:  change事件</li><li>函数: 得到当前选中省份</li><li>得到城市, 遍历城市数据</li><li>将遍历出来的城市添加到城市的select中</li></ol><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;#province&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert(this.value);</span></span><br><span class="line"><span class="comment">//得到城市信息</span></span><br><span class="line"><span class="keyword">var</span> cities = provinces[<span class="built_in">this</span>.value];</span><br><span class="line"><span class="comment">//清空城市select中的option</span></span><br><span class="line"><span class="comment">/*var $city = $(&quot;#city&quot;);</span></span><br><span class="line"><span class="comment">//将JQ对象转成JS对象</span></span><br><span class="line"><span class="comment">var citySelect = $city.get(0)</span></span><br><span class="line"><span class="comment">citySelect.options.length = 0;*/</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#city&quot;</span>).empty();  <span class="comment">//采用JQ的方式清空</span></span><br><span class="line"><span class="comment">//遍历城市数据</span></span><br><span class="line">$(cities).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,n</span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;#city&quot;</span>).append(<span class="string">&quot;&lt;option&gt;&quot;</span>+n+<span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用JQ完成下拉列表左右选择"><a href="#使用JQ完成下拉列表左右选择" class="headerlink" title="使用JQ完成下拉列表左右选择"></a>使用JQ完成下拉列表左右选择</h4><h4 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h4><p>我们的商品通常包含已经有了的, 还有没有的,现在我们需要有一个页面用于动态编辑这些商品</p><h4 id="技术分析-3"><a href="#技术分析-3" class="headerlink" title="技术分析"></a>技术分析</h4><h4 id="步骤分析-2"><a href="#步骤分析-2" class="headerlink" title="步骤分析"></a>步骤分析</h4><pre><code>1. 导入JQ的文件2. 文档加载函数 :页面初始化3.确定事件 :　点击事件　onclick4. 事件触发函数1. 移动被选中的那一项到右边</code></pre><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/jquery-1.11.0.js&quot;</span> &gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;#a1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//找到被选中的那一项</span></span><br><span class="line"><span class="comment">//将被选中项添加到右边</span></span><br><span class="line">$(<span class="string">&quot;#rightSelect&quot;</span>).append($(<span class="string">&quot;#leftSelect option:selected&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将左边所有商品移动到右边</span></span><br><span class="line">$(<span class="string">&quot;#a2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;#rightSelect&quot;</span>).append($(<span class="string">&quot;#leftSelect option&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="今天内容总结"><a href="#今天内容总结" class="headerlink" title="今天内容总结:"></a>今天内容总结:</h4><p>定时器</p><p>动画效果: show  hide  slideDown  slideUp fadeIn  fadeOut  animate</p><p>基本选择器:</p><p>​    ID选择器: #ID名称</p><p>​    类选择器: .类名</p><p>​    元素选择器: 元素/标签名称</p><p>​    通配符选择器:  *  找出所有页面元素 包含页面上所有的标签</p><p>​    选择器分组 :   选择器1, 选择器2      [选择器1,选择器2]</p><p>层级选择器:</p><p>​    后代选择器:  选择器1 选择器2  找出所有的后代,儿子孙子曾孙</p><p>​    子元素选择器: 选择器1 &gt;选择器2  找出所有儿子</p><p>​    相邻兄弟选择器:  选择器1+选择器2  : 找出紧挨着自己那个弟弟</p><p>​    兄弟选择器 :　　　选择器1~选择器2  :  找出所有的弟弟</p><p>属性选择器:</p><p>​    选择器[属性名称]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">选择器[属性名称][属性名名]</span><br><span class="line">选择器[属性名称=&#x27;属性值&#x27;][属性名称=&#x27;属性值&#x27;][属性名称=&#x27;属性值&#x27;]</span><br></pre></td></tr></table></figure><p>表单选择器:</p><p>​    :input   找出所有的输入项 : 不单单找出input  textarea select </p><p>​    :text  找出type类型为 text</p><p>​    :password</p><p>基本过滤器:</p><p>​    :even</p><p>​    :odd</p><p>​    :gt</p><p>​    :lt</p><p>​    :eq</p><p>​    :first</p><p>​    :last</p><p>表单对象属性:</p><p>​    :selected</p><p>​    :checked</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(function)  : 文档加载完成的事件</span><br><span class="line">css()  : 修改css样式</span><br><span class="line">prop() :    修改属性/ 获取属性</span><br><span class="line">html() :    修改innerHTML</span><br><span class="line"></span><br><span class="line">append : 给自己添加子节点</span><br><span class="line">appendTo :  将自己添加到别人家,给自己找一个爹</span><br><span class="line">prepend :   在自己最前面添加子节点</span><br><span class="line">after:   在自己后面添加一个兄弟</span><br><span class="line">empty:   清空所有子节点</span><br><span class="line"></span><br><span class="line">$(cities).each(function(i,n)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.each(arr,function(i,n)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">**了解, 熟悉, 熟练, 精通** </span><br><span class="line"></span><br><span class="line">经过一个项目,将所有学过串起来</span><br></pre></td></tr></table></figure><h4 id="使用JQ完成表单的校验-扩展"><a href="#使用JQ完成表单的校验-扩展" class="headerlink" title="使用JQ完成表单的校验(扩展)"></a>使用JQ完成表单的校验(扩展)</h4><h4 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h4><p>在用户提交表单的时候, 我们最好是能够在用户数据提交给服务器之前去做一次校验,防止服务器压力过大,并且需要给用户一个友好提示</p><h4 id="技术分析-4"><a href="#技术分析-4" class="headerlink" title="技术分析"></a>技术分析</h4><ul><li>trigger</li><li>triggerHandler</li><li>is()</li></ul><h4 id="步骤分析-3"><a href="#步骤分析-3" class="headerlink" title="步骤分析"></a>步骤分析</h4><ol><li>首先给必填项,添加尾部添加一个小红点</li><li>获取用户输入的信息,做相应的校验</li><li>事件: 获得焦点, 失去焦点, 按键抬起</li><li>表单提交的事件</li></ol><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-Js入门</title>
      <link href="/2020/06/18/CSS-Js%E5%85%A5%E9%97%A8/"/>
      <url>/2020/06/18/CSS-Js%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><ul><li>了解CSS的概念</li><li>了解CSS的引入方式</li><li>了解CSS的基本用法和常用的选择器</li><li>了解CSS的盒子模型，悬浮和定位</li><li>了解JS的概念</li><li>掌握JS的基本语法，数据类型，能够使用JS完成简单的页面交互</li></ul><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E5%89%8D%E7%AB%AF/CSS%26JS.png"><br>html内容简单回顾</p><p>什么HTML : 超文本标记语言</p><p>p标签: 段落标签</p><p>br标签: 简单换行</p><p>h1-h6: 标题标签</p><p>hr标签: 水平分割线, 华丽的分割线</p><p>font标签: color属性改变颜色 , size</p><p>b标签: 加粗</p><p>i标签: 斜体</p><p>strong标签: 带语义的加粗</p><p>em标签: 斜体标签,带语义</p><p>img标签: 图片标签 显示图片</p><p>​    src: 指定图片路径(相对路径)</p><p>​    width: 宽度</p><p>​    height: 高度</p><p>​    alt: 图片加载失败时的提示</p><p>相对路径:</p><p>​    ./  代表当前路径</p><p>​    ../ 代表的是上一级路径</p><p>​    ../../  代表的是上上一级路径</p><p>ul标签: 无序列表</p><p>ol标签: 有序列表</p><p>li标签: 列表项</p><p>a标签: 超链接标签:</p><p>​    target: 打开方式</p><p>​    href:  指定要跳转的链接地址</p><p>table标签:  table &gt; tr &gt; td</p><p>tr标签: 行</p><p>td标签: 列</p><p>​    合并行: rowspan</p><p>​    合并列: colspan</p><p>网站注册案例:</p><p>​    form 标签: 表单标签,主要是用来向服务器提交数据</p><p>​        method: 提交方式 get  post</p><p>​        action : 提交的路径</p><p>​    input 标签:</p><p>​            type: </p><p>​                password: 密码框</p><p>​                text : 文本</p><p>​                submit:  提交</p><p>​                button:  普通的按钮</p><p>​                reset:  重置按钮</p><p>​                radio: 单选按钮 设置name属性让它们是一组</p><p>​                checkbox: 复选按钮 </p><p>​                email:</p><p>​                date:</p><p>​                tel:</p><p>frameset : 框架标签</p><p>​    rows:</p><p>​    cols:</p><p>frame:  </p><h3 id="使用CSS完成网站首页的优化"><a href="#使用CSS完成网站首页的优化" class="headerlink" title="使用CSS完成网站首页的优化"></a>使用CSS完成网站首页的优化</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析:"></a>需求分析:</h4><p>​    由于我们昨天使用表格布局存在缺陷,那么我们要来考虑使用DIV+CSS来对页面进行优化</p><p>表格布局的缺陷:</p><pre><code>1. 嵌套层级太多, 一旦出现嵌套顺序错乱, 整个页面达不到预期效果2.  采用表格布局,页面不够灵活, 动其中某一块,整个表格布局的结构全都要变</code></pre><h4 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h4><p>HTML的块标签:</p><p>​    div标签: 默认占一行,自动换行</p><p>​    span标签:  内容显示在同一行</p><p>CSS概述:</p><p>​    Cascading Style Sheets : 层叠样式表</p><p>​        红砖, 抹了一层水泥, 白灰</p><p>主要用作用:</p><p>​    用来美化我们的HTML页面的</p><p>​    HTML 决定网页的骨架    ,CSS  化妆</p><p>​    将页面的HTML和美化进行分离</p><p>CSS的简单语法:</p><p>​    在一个style标签中,去编写CSS内容,最好将style标签写在这个head标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  选择器&#123;</span><br><span class="line">    属性名称:属性的值;</span><br><span class="line">    属性名称2: 属性的值2;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS选择器: 帮助我们找到我们要修饰的标签或者元素</p><p>元素选择:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素的名称&#123;</span><br><span class="line">  属性名称:属性的值;</span><br><span class="line">  属性名称:属性的值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ID选择器:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以#号开头  ID在整个页面中必须是唯一的s</span><br><span class="line">#ID的名称&#123;</span><br><span class="line">  属性名称:属性的值;</span><br><span class="line">  属性名称:属性的值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类选择器:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以 . 开头 </span><br><span class="line">.类的名称&#123;</span><br><span class="line">   属性名称:属性的值;</span><br><span class="line">  属性名称:属性的值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS的引入方式:</p><p>​    外部样式: 通过link标签引入一个外部的css文件</p><p>​    内部样式: 直接在style标签内编写CSS代码</p><p>​    行内样式: 直接在标签中添加一个style属性, 编写CSS样式</p><p>CSS浮动 : 浮动的元素会脱离正常的文档流,在正常的文档流中不占空间</p><pre><code>            float属性:                left                right            clear属性: 清除浮动                both : 两边都不允许浮动                left: 左边不允许浮动                right : 右边不允许浮动            流式布局</code></pre><h4 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析:"></a>步骤分析:</h4><ol><li>创一个最外层div</li><li>第一部份: LOGO部分: 嵌套三个div</li><li>第二部分: 导航栏部分 : 放置5个超链接</li><li>第三部分: 轮播图 </li><li>第四部分: </li><li>第五部分: 直接放一张图片</li><li>第六部分: 抄第四部分的</li><li>第七部分: 放置一张图片</li><li>第八部分: 放一堆超链接</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.logo</span>&#123;</span></span><br><span class="line">float: left;</span><br><span class="line">width: 33%;</span><br><span class="line">/*border-width: 1px;</span><br><span class="line">border-style: solid;</span><br><span class="line">border-color: red;*/</span><br><span class="line">height: 60px;</span><br><span class="line">line-height: 60px;</span><br><span class="line"><span class="css"><span class="comment">/*border: 1px solid red;*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.amenu</span>&#123;</span></span><br><span class="line">color: white;</span><br><span class="line">text-decoration: none;</span><br><span class="line">height: 50px;</span><br><span class="line">line-height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.product</span>&#123;</span></span><br><span class="line">float: left; text-align: center; width: 16%; height: 240px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 创一个最外层div</span></span><br><span class="line"><span class="comment">2. 第一部份: LOGO部分: 嵌套三个div</span></span><br><span class="line"><span class="comment">3. 第二部分: 导航栏部分 : 放置5个超链接</span></span><br><span class="line"><span class="comment">4. 第三部分: 轮播图 </span></span><br><span class="line"><span class="comment">5. 第四部分: </span></span><br><span class="line"><span class="comment">6. 第五部分: 直接放一张图片</span></span><br><span class="line"><span class="comment">7. 第六部分: 抄第四部分的</span></span><br><span class="line"><span class="comment">8. 第七部分: 放置一张图片</span></span><br><span class="line"><span class="comment">9. 第八部分: 放一堆超链接</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2. 第一部份: LOGO部分: 嵌套三个div--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/logo2.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/header.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--清除浮动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3. 第二部分: 导航栏部分 : 放置5个超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: black; height: 50px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>香烟酒水<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--4. 第三部分: 轮播图--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--5. 第四部分:--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>最新商品<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/title2.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--左侧广告图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 15%; height: 480px;  float: left;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/big01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                右侧商品</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 84%; height: 480px;float: left;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 240px; width: 50%; float: left;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/middle01.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--6. 第五部分: 直接放一张图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/ad.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--7. 第六部分: 抄第四部分的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>最新商品<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/title2.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--左侧广告图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 15%; height: 480px;  float: left;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/big01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                右侧商品</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 84%; height: 480px;float: left;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 240px; width: 50%; float: left;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/middle01.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small08.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高压锅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--8. 第七部分: 放置一张图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/footer.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--9. 第八部分: 放一堆超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>招贤纳士<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>法律声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>支付方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>配送方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服务声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>广告声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">Copyright © 2005-2016 传智商城 版权所有</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展:"></a>扩展:</h4><ul><li><p>CSS的优先级</p><p>按照选择器搜索精确度来编写:             行内样式 &gt; ID选择器 &gt; 类选择器  &gt; 元素选择器</p><p>就近原则: 哪个离得近,就选用哪个的样式</p></li></ul><p>  CSS: 层叠样式表</p><p>  主要作用:</p><pre><code>  1. 美化页面  2. 将页面美化和HTML代码进行分离,提高代码的服用型</code></pre><ul><li><p>选择器:</p><ul><li>元素选择器: 标签的名称{}</li><li>类选择器:   以. 开头  .类的名称</li><li>ID选择器:  以#开头 ,   #ID的名称  (ID必须是页面上面唯一) </li></ul></li><li><p>CSS浮动:</p><ul><li><p>float : left, right  不再占有正常文档流中的空间 , 流式布局</p></li><li><p>clear : both  left right</p><p>​</p></li></ul></li></ul><ul><li><p>CSS中的其它选择器</p><ul><li><p>选择器分组: 选择器1,选择器2{ 属性的名称:属性的值}</p></li><li><p>属性选择器:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a[title]</span><br><span class="line">a[titile=&#x27;aaa&#x27;]</span><br><span class="line">a[href][title]</span><br><span class="line">a[href][title=&#x27;aaa&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>后代选择器: 爷爷选择器  孙子选择器   找出所有的后代</p></li><li><p>子元素选择器:  父选择器  &gt; 儿子选择器</p></li><li><p>伪类选择器: 通常都是用在A标签上</p></li></ul><p>​</p><p>​</p></li></ul><h3 id="使用DIV-CSS完成注册页面的优化"><a href="#使用DIV-CSS完成注册页面的优化" class="headerlink" title="使用DIV+CSS完成注册页面的优化"></a>使用DIV+CSS完成注册页面的优化</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>由于我们的注册页面也是用table布局的,存在与首页同样的问题,所以我们需要使用div+css对我们的注册页面进行美化</p><p>总共是5部分内容</p><h4 id="技术分析-1"><a href="#技术分析-1" class="headerlink" title="技术分析"></a>技术分析</h4><p>CSS的盒子模型: 万物皆盒子</p><p>内边距:  </p><p>padding-top:</p><p>padding-right:</p><p>padding-bottom:</p><p>padding-left:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">padding:10px;  上下左右都是10px</span><br><span class="line">padding:10px 20px;  上下是10px 左右是20px</span><br><span class="line">padding: 10px 20px 30px;  上 10px 右20px  下30px  左20px</span><br><span class="line">padding: 10px 20px 30px 40px;  上右下左, 顺时针的方向</span><br></pre></td></tr></table></figure><p>外边距:</p><p>margin-top:</p><p>margin-right:</p><p>margin-bottom:</p><p>margin-left: </p><p>CSS绝对定位:</p><p>​    position: absolute</p><p>​    top: 控制距离顶部的位置</p><p>​    left: 控制距离左边的位置</p><h4 id="步骤分析-1"><a href="#步骤分析-1" class="headerlink" title="步骤分析:"></a>步骤分析:</h4><ol><li>总共是5部分</li><li>第一部分是LOGO部分</li><li>第二部分是导航菜单</li><li>第三部分是注册部分</li><li>第四部分是FOOTER图片</li><li>第五部分是一堆超链接</li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/main.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 总共是5部分</span></span><br><span class="line"><span class="comment">2. 第一部分是LOGO部分</span></span><br><span class="line"><span class="comment">3. 第二部分是导航菜单</span></span><br><span class="line"><span class="comment">4. 第三部分是注册部分</span></span><br><span class="line"><span class="comment">5. 第四部分是FOOTER图片</span></span><br><span class="line"><span class="comment">6. 第五部分是一堆超链接</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2. 第一部分是LOGO部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/logo2.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/header.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--清除浮动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3. 第二部分是导航菜单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: black; height: 50px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;amenu&quot;</span>&gt;</span>香烟酒水<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4. 第三部分是注册部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background: url(../image/regist_bg.jpg);height: 500px;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute;top:200px;left:350px;border: 5px solid darkgray;width: 50%;height: 50%;background-color: white;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;60%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">size</span>=<span class="string">&quot;6&quot;</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">font</span>&gt;</span>USER REGISTER<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>email:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span> 妖</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--5. 第四部分是FOOTER图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/footer.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--9. 第四部分: 放一堆超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>招贤纳士<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>法律声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>支付方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>配送方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服务声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>广告声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">Copyright © 2005-2016 传智商城 版权所有</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CSS部分的回顾"><a href="#CSS部分的回顾" class="headerlink" title="CSS部分的回顾:"></a>CSS部分的回顾:</h3><p>​    CSS: 层叠样式表.</p><p>​    CSS作用: 美化页面,提高代码的复用性</p><p>​    选择器:</p><p>​        需要掌握的:</p><p>​            元素选择器: 标签的名称</p><p>​            类选择器:  以 . 开头</p><p>​            ID选择器: 以#开头,  #ID的名称  ID必须是唯一的</p><p>​        优先级: 按照选择精确度: 行内样式  &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器</p><p>​                就近原则</p><p>​        扩展选择器:</p><p>​            选择器分组:  选择器1,选择器2   以逗号隔开</p><p>​            后代选择器:  爷爷 孙子   中间以空格隔开</p><p>​            子元素选择器:  爸爸 &gt; 儿子 </p><p>​            属性选择器:   选择器[属性的名称=’’]</p><p>​            伪类选择器:  超链接标签上使用  </p><p>​     浮动: float属性  left right</p><p>​     清除浮动: clear: both left right</p><p>​    </p><p>​    盒子模型:  顺时针 : 上右下左</p><p>​        padding : 内边距 ,控制的是盒子内容的距离</p><p>​        margin : 外边距 控制盒子与盒子之间的距离</p><p>​    绝对定位:</p><p>​        position: absolute</p><p>​        top:</p><p>​        left:</p><h3 id="使用JS完成简单的数据校验"><a href="#使用JS完成简单的数据校验" class="headerlink" title="使用JS完成简单的数据校验"></a>使用JS完成简单的数据校验</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><p>使用JS完成对注册页面的简单数据校验,不允许出现用户名或密码为空的情况</p><h4 id="技术分析-2"><a href="#技术分析-2" class="headerlink" title="技术分析"></a>技术分析</h4><h5 id="JavaScript概述"><a href="#JavaScript概述" class="headerlink" title="JavaScript概述"></a>JavaScript概述</h5><p>什么是javascript: JavaScript一种直译式脚本语言，</p><p>什么是脚本语言?</p><p>​    java源代码 —-&gt; 编译成.class文件 —–&gt; java虚拟机中才能执行</p><p>​    脚本语言:   源码  ——– &gt; 解释执行</p><p>​    js由我们的浏览器来解释执行</p><p>HTML: 决定了页面的框架  </p><p>CSS: 用来美化我们的页面</p><p>JS:    提供用户的交互的</p><h5 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成:"></a>JS的组成:</h5><p>ECMAScript : 核心部分 ,定义js的语法规范</p><p>DOM: document Object Model 文档对象模型 , 主要是用来管理页面的</p><p>BOM : Browser Object Model  浏览器对象模型, 前进,后退,页面刷新, 地址栏, 历史记录, 屏幕宽高</p><h5 id="JS的语法"><a href="#JS的语法" class="headerlink" title="JS的语法:"></a>JS的语法:</h5><p>变量弱类型: var i = true</p><p>区分大小写</p><p>语句结束之后的分号 ,可以有,也可以没有</p><p>写在script标签</p><h5 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型:"></a>JS的数据类型:</h5><ul><li>基本类型<ul><li>string</li><li>number</li><li>boolean </li><li>undefine</li><li>null</li></ul></li><li>引用类型<ul><li>对象, 内置对象</li></ul></li><li>类型转换<ul><li>js内部自动转换 </li></ul></li></ul><h5 id="JS的运算符和语句"><a href="#JS的运算符和语句" class="headerlink" title="JS的运算符和语句:"></a>JS的运算符和语句:</h5><ul><li>运算符和java 一样<ul><li>“===” 全等号: 值和类型都必须相等</li><li>== 值相等就可以了</li></ul></li><li>语句和java 一样</li></ul><h5 id="JS的输出"><a href="#JS的输出" class="headerlink" title="JS的输出"></a>JS的输出</h5><ul><li>alert()  直接弹框</li><li>document.write()  向页面输出</li><li>console.log() 向控制台输出</li><li>innerHTML:  向页面输出</li></ul><ul><li>获取页面元素: document.getElementById(“id的名称”);</li></ul><p>JS声明变量:</p><p>​    var 变量的名称 = 变量的值</p><p>JS声明函数:</p><p>​    var 函数的名称 = function(){    </p><p>​    }</p><p>​    </p><p>​    function 函数的名称(){</p><p>​    }</p><h4 id="JS的开发步骤"><a href="#JS的开发步骤" class="headerlink" title="JS的开发步骤"></a>JS的开发步骤</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 确定事件</span><br><span class="line">2. 通常事件都会出发一个函数</span><br><span class="line">3. 函数里面通常都会去操作页面元素,做一些交互动作</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤分析-2"><a href="#步骤分析-2" class="headerlink" title="步骤分析:"></a>步骤分析:</h4><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">1. 确认事件: 表单提交事件 onsubmit事件 </span><br><span class="line">2. 事件所要触发的函数: checkForm</span><br><span class="line">3. 函数中要干点事情</span><br><span class="line">1. 校验用户名, 用户不能为空, 长度不能小于6位</span><br><span class="line">1.获取到用户输入的值</span><br><span class="line">*/</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkForm</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取用户名输入项</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> inputObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取输入项的值</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> uValue = inputObj.value;</span></span><br><span class="line"><span class="javascript"><span class="comment">//alert(uValue);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//用户名长度不能6位 &quot;&quot;</span></span></span><br><span class="line">if(uValue.length &lt; 6 )&#123;</span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;对不起,您的长度太短!&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//密码长度大于6 和确认必须一致</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//获取密码框输入的值</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input_password = <span class="built_in">document</span>.getElementById(<span class="string">&quot;password&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> uPass = input_password.value;</span></span><br><span class="line"></span><br><span class="line">if(uPass.length &lt; 6)&#123;</span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;对不起,您还是太短啦!&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//获取确认密码框的值</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input_repassword = <span class="built_in">document</span>.getElementById(<span class="string">&quot;repassword&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> uRePass = input_repassword.value;</span></span><br><span class="line">if(uPass != uRePass)&#123;</span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;对不起,两次密码不一致!&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//校验手机号</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input_mobile = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mobile&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> uMobile = input_mobile.value;</span></span><br><span class="line"><span class="javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(!<span class="regexp">/^[1][3578][0-9]&#123;9&#125;$/</span>.test(uMobile))&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;对不起,您的手机号无法识别!&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//校验邮箱: /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> inputEmail = <span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> uEmail = inputEmail.value;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(!<span class="regexp">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/</span>.test(uEmail))&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;对不起,邮箱不合法&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;JS开发步骤.html&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>确认密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;repassword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>手机号码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;mobile&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>邮箱:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>  /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>javascript :  它是一门脚本语言 , 直接解释执行的语言</p><p>javascript: </p><p>​    ECMAScript : 定义的语法</p><p>​    DOM: document Object Model </p><p>​    BOM: 浏览器对象模型</p><p>会定义变量: var  变量的名称 = 变量的值</p><p>会定义函数:  </p><p>​    function 函数的名称(参数的名称){</p><p>​    }</p><h3 id="使用JS完成图片的轮播效果"><a href="#使用JS完成图片的轮播效果" class="headerlink" title="使用JS完成图片的轮播效果"></a>使用JS完成图片的轮播效果</h3><h4 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h4><p>在我们的网站首页,通常需要有一块区域,用来显示广告,但是这块区域如果仅仅显示一张图片肯定是不够的, 故我们需要采用动态循环播放我们所有的广告. 显示效果照抄黑马程序员的网站首页</p><h4 id="技术分析-3"><a href="#技术分析-3" class="headerlink" title="技术分析:"></a>技术分析:</h4><h3 id="步骤分析-3"><a href="#步骤分析-3" class="headerlink" title="步骤分析:"></a>步骤分析:</h3><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现:"></a>代码实现:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/* 当页面加载完成的时候, 动态切换图片</span><br><span class="line"> 1.确定事件:</span><br><span class="line"> 2.事件所要触发的函数</span><br><span class="line"> */</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> index = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//切换图片的函数</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeAd</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取要操作的img</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;imgAd&quot;</span>);</span></span><br><span class="line"><span class="javascript">img.src = <span class="string">&quot;../img/&quot;</span>+(index%<span class="number">3</span>+<span class="number">1</span>)+<span class="string">&quot;.jpg&quot;</span>;  <span class="comment">//0,1,2    //1,2,3</span></span></span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//启动定时器</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;changeAd()&quot;</span>,<span class="number">3000</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;init()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/1.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imgAd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML入门</title>
      <link href="/2020/06/18/HTML%E5%85%A5%E9%97%A8/"/>
      <url>/2020/06/18/HTML%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>了解什么是标记语言<a id="more"></a></li><li>了解HTML主要特性，主要变化以及发展趋势</li><li>了解HTML的结构标签</li><li>掌握HTML的主要标签（字体，图片，列表，链接，表单等标签）</li></ul><h3 id="1-网站信息页面"><a href="#1-网站信息页面" class="headerlink" title="1.网站信息页面"></a>1.网站信息页面</h3><h4 id="1-1需求分析"><a href="#1-1需求分析" class="headerlink" title="1.1需求分析:"></a>1.1需求分析:</h4><p>一个对外宣传的网站介绍,介绍公司的主要业务,公司的发展历史,公司的口号等等信息</p><h4 id="1-2技术分析"><a href="#1-2技术分析" class="headerlink" title="1.2技术分析:"></a>1.2技术分析:</h4><h5 id="HTML概述"><a href="#HTML概述" class="headerlink" title="HTML概述:"></a>HTML概述:</h5><p>HTML: Hyper Text Markup Language 超文本标记语言</p><p>超文本: 比普通文本功能更加强大,可以添加各种样式</p><p>标记语言: 通过一组标签.来对内容进行描述. &lt;关键字&gt; , 是由浏览器来解释执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>静夜诗<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>--李白<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>床前明月光,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>地上鞋两双,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>举头望明月,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>低头思故乡.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="HTML的主要作用"><a href="#HTML的主要作用" class="headerlink" title="HTML的主要作用:"></a>HTML的主要作用:</h5><p>设计网页的基础,HTML5</p><h5 id="HTML语法规范"><a href="#HTML语法规范" class="headerlink" title="HTML语法规范"></a>HTML语法规范</h5><pre><code>&lt;!--    1. 上面是一个文档声明     2. 根标签 html    3. html文件主要包含两部分. 头部分和体部分        头部分 : 主要是用来放置一些页面信息        体部分 : 主要来放置我们的HTML页面内容    4. 通过标签来对内容进行描述,标签通常都是由开始标签和结束标签组成      5. 标签不区分大小写, 官方建议使用小写--&gt;</code></pre><h4 id="1-3步骤分析"><a href="#1-3步骤分析" class="headerlink" title="1.3步骤分析:"></a>1.3步骤分析:</h4><ol><li>公司简介 需要标题</li><li>水平分割线</li><li>四个段落</li><li>第一个段落字体需要红色</li></ol><h4 id="1-4代码实现"><a href="#1-4代码实现" class="headerlink" title="1.4代码实现:"></a>1.4代码实现:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网站信息页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 公司简介 需要标题</span></span><br><span class="line"><span class="comment">2. 水平分割线</span></span><br><span class="line"><span class="comment">3. 四个段落</span></span><br><span class="line"><span class="comment">4. 第一个段落字体需要红色</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>“中关村黑马程序员训练营”<span class="tag">&lt;/<span class="name">font</span>&gt;</span>是由<span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>联合中关村软件园、CSDN，并委托传智播客进行教学实施的软件开发高端培训机构，致力于服务各大软件企业，解决当前软件开发技术飞速发展，而企业招不到优秀人才的困扰。 目前，“中关村黑马程序员训练营”已成长为行业“学员质量好、课程内容深、企业满意”的移动开发高端训练基地，并被评为中关村软件园重点扶持人才企业。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>的学员多为大学毕业后，<span class="tag">&lt;<span class="name">em</span>&gt;</span>有理想、有梦想，<span class="tag">&lt;/<span class="name">em</span>&gt;</span>想从事IT行业，而没有环境和机遇改变自己命运的年轻人。黑马程序员的学员筛选制度，远比现在90%以上的企业招聘流程更为严格。任何一名学员想成功入学“黑马程序员”，必须经历长达2个月的面试流程，这些流程中不仅包括严格的技术测试、自学能力测试，还包括性格测试、压力测试、品德测试等等测试。毫不夸张地说，黑马程序员训练营所有学员都是精挑细选出来的。百里挑一的残酷筛选制度确保学员质量，并降低企业的用人风险。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">中关村黑马程序员训练营不仅着重培养学员的基础理论知识，更注重培养项目实施管理能力，并密切关注技术革新，不断引入先进的技术，研发更新技术课程，确保学员进入企业后不仅能独立从事开发工作，更能给企业带来新的技术体系和理念。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">一直以来，黑马程序员以技术视角关注IT产业发展，以深度分享推进产业技术成长，致力于弘扬技术创新，倡导分享、 开放和协作，努力打造高质量的IT人才服务平台。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-5-扩展内容"><a href="#1-5-扩展内容" class="headerlink" title="1.5 扩展内容"></a>1.5 扩展内容</h5><p>​    b : 加粗</p><p>​    i : 斜体</p><p>​    strong: 加粗, 带语义标签</p><pre><code> em:  斜体, 带语义</code></pre><h3 id="2-网站图片信息"><a href="#2-网站图片信息" class="headerlink" title="2.网站图片信息"></a>2.网站图片信息</h3><h4 id="2-1需求分析"><a href="#2-1需求分析" class="headerlink" title="2.1需求分析:"></a>2.1需求分析:</h4><p>在我们的网站中通常需要显示LOGO图片,显示效果如下</p><h4 id="2-2技术分析"><a href="#2-2技术分析" class="headerlink" title="2.2技术分析"></a>2.2技术分析</h4><p>img 标签:</p><p>​    常用的属性;</p><p>​        width : 宽度</p><p>​        height: 高度</p><p>​        src :  指定文件路径</p><p>​        alt:  图片加载失败时的提示内容</p><h4 id="2-3步骤分析"><a href="#2-3步骤分析" class="headerlink" title="2.3步骤分析"></a>2.3步骤分析</h4><h4 id="2-4代码实现"><a href="#2-4代码实现" class="headerlink" title="2.4代码实现"></a>2.4代码实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">常用属性:</span></span><br><span class="line"><span class="comment">src : 指定图片路径</span></span><br><span class="line"><span class="comment">width : 指定图片宽度</span></span><br><span class="line"><span class="comment">height : 图片高度</span></span><br><span class="line"><span class="comment">alt : 文件加载失败时的提示信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/美女22.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这张图片可能加载问题&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在网页中显示图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/logo2.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/header.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5-扩展-文件路径"><a href="#2-5-扩展-文件路径" class="headerlink" title="2.5 扩展-文件路径"></a>2.5 扩展-文件路径</h4><ul><li>相对路径</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./代表的是当前路径</span><br><span class="line">../ 代表的上一级路径</span><br><span class="line">../../上上一级路径</span><br></pre></td></tr></table></figure><h3 id="3-网站友情链接页面"><a href="#3-网站友情链接页面" class="headerlink" title="3.网站友情链接页面"></a>3.网站友情链接页面</h3><h4 id="3-1需求分析"><a href="#3-1需求分析" class="headerlink" title="3.1需求分析"></a>3.1需求分析</h4><p>在我们的网站中,通常会显示友商公司的网站链接</p><ul><li>百度</li><li>新浪微博</li><li>谷歌</li></ul><h4 id="3-2技术分析"><a href="#3-2技术分析" class="headerlink" title="3.2技术分析"></a>3.2技术分析</h4><p>列表标签: </p><p>​    无序列表:  ul</p><p>​        type: 小圆圈,小圆点, 小方块</p><p>​    有序列表: ol</p><p>​        type: 1,a ,A,I,</p><p>​        start : 指定是起始索引</p><h4 id="3-3步骤分析"><a href="#3-3步骤分析" class="headerlink" title="3.3步骤分析"></a>3.3步骤分析</h4><h4 id="3-4代码实现"><a href="#3-4代码实现" class="headerlink" title="3.4代码实现"></a>3.4代码实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.使用无序列表</span></span><br><span class="line"><span class="comment">百合网</span></span><br><span class="line"><span class="comment">世纪家园</span></span><br><span class="line"><span class="comment">珍爱网</span></span><br><span class="line"><span class="comment">非诚勿扰</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baihe.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百合网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.jiayuan.com&quot;</span>&gt;</span>世纪家园<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>珍爱网<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>非诚勿扰<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-5-扩展内容"><a href="#3-5-扩展内容" class="headerlink" title="3.5 扩展内容"></a>3.5 扩展内容</h5><p>​    点击链接,跳转去指定网站</p><p>​    a 超链接标签</p><p>​        常用的属性:</p><p>​            href: 指定要跳转去的链接地址  </p><p>​                    如果是网络地址需要加上http协议 , </p><p>​                    如果访问的是本网站的html文件,可以直接写文件路径</p><p>​            target : 以什么方式打开</p><p>​                _self: 默认打开方式,在当前窗口打开</p><p>​                _blank:  新起一个标签页打开页面</p><h3 id="上午内容回顾"><a href="#上午内容回顾" class="headerlink" title="上午内容回顾:"></a>上午内容回顾:</h3><ul><li>网站信息案例<ul><li>字体标签 font<ul><li>color: 颜色</li><li>size:  大小 1~7</li><li>face: 改变字体</li></ul></li><li>p 段落标签</li><li>h标题标签 : 1~6</li><li>br 换行</li><li>hr 水平线</li><li>b 加粗</li><li>i  斜体</li><li>strong : 加粗  包含语义</li><li>em : 斜体  包含语义</li></ul></li><li>网站图片案例<ul><li>img标签<ul><li>src : 指定图片的路径</li><li>width: 宽度</li><li>height: 高度</li><li>alt : 图片加载错误时的提示信息</li></ul></li><li>相对路径:<ul><li>./  代表的是当前路径</li><li>../  代表的上一级路径</li><li>../../ 代表的上上一级路径</li></ul></li></ul></li><li>友情链接:<ul><li>ul: 无序列表<ul><li>type :</li></ul></li><li>ol: 有序列表<ul><li>type : 样式</li><li>start : 起始索引</li></ul></li><li>li : 列表项</li><li>a 超链接标签<ul><li>href : 要访问的链接地址</li><li>target : 打开方式</li></ul></li></ul></li><li>网站首页<ul><li>table标签<ul><li>border: 指定边框</li><li>width : 宽度</li><li>height : 高度</li><li>bgcolor : 背景颜色</li><li>align : 对齐方式</li></ul></li><li>tr标签</li><li>td标签<ul><li>colspan: 跨列操作</li><li>rowspan: 跨行操作</li></ul></li><li>表格单元格的合并</li><li>表格的嵌套</li></ul></li></ul><h3 id="4-网站首页"><a href="#4-网站首页" class="headerlink" title="4.网站首页"></a>4.网站首页</h3><h4 id="4-1需求分析"><a href="#4-1需求分析" class="headerlink" title="4.1需求分析:"></a>4.1需求分析:</h4><p>​    根据产品文档,完成商城首页,显示效果如图:</p><h4 id="4-2技术分析"><a href="#4-2技术分析" class="headerlink" title="4.2技术分析:"></a>4.2技术分析:</h4><h5 id="表格标签table"><a href="#表格标签table" class="headerlink" title="表格标签table"></a>表格标签table</h5><p>​    table标签:</p><p>​        常用的属性:</p><p>​            bgcolor : 背景色</p><p>​            width :     宽度</p><p>​            height : 高度</p><p>​            align : 对齐方式</p><p>​    tr 标签</p><p>​    td 标签    </p><h6 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格:"></a>合并单元格:</h6><p>​    colspan : 跨列操作</p><p>​    rowspan : 跨行操作</p><p>​    注意: 跨行或者跨列操作之后,被占掉的格子需要删除掉</p><h6 id="表格的嵌套"><a href="#表格的嵌套" class="headerlink" title="表格的嵌套:"></a>表格的嵌套:</h6><p>​    在td中可以嵌套一个表格</p><h4 id="4-3步骤分析"><a href="#4-3步骤分析" class="headerlink" title="4.3步骤分析"></a>4.3步骤分析</h4><ol><li>创建一个8行一列的表格</li><li>第一部份: LOGO部分: 嵌套一个一行三列的表格</li><li>第二部分: 导航栏部分 : 放置5个超链接</li><li>第三部分: 轮播图 </li><li>第四部分: 嵌套一个三行7列表格</li><li>第五部分: 直接放一张图片</li><li>第六部分: 抄第四部分的</li><li>第七部分: 放置一张图片</li><li>第八部分: 放一堆超链接</li></ol><h4 id="4-4代码实现"><a href="#4-4代码实现" class="headerlink" title="4.4代码实现"></a>4.4代码实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 创建一个8行一列的表格</span></span><br><span class="line"><span class="comment">2. 第一部份: LOGO部分: 嵌套一个一行三列的表格</span></span><br><span class="line"><span class="comment">3. 第二部分: 导航栏部分 : 放置5个超链接</span></span><br><span class="line"><span class="comment">4. 第三部分: 轮播图 </span></span><br><span class="line"><span class="comment">5. 第四部分: 嵌套一个三行7列表格</span></span><br><span class="line"><span class="comment">6. 第五部分: 直接放一张图片</span></span><br><span class="line"><span class="comment">7. 第六部分: 抄第四部分的</span></span><br><span class="line"><span class="comment">8. 第七部分: 放置一张图片</span></span><br><span class="line"><span class="comment">9. 第八部分: 放一堆超链接</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一部份: LOGO部分: 嵌套一个一行三列的表格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/logo2.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/header.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二部分: 导航栏部分 : 放置5个超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;white&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;white&quot;</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;white&quot;</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;white&quot;</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;white&quot;</span>&gt;</span>香烟酒水<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三部分: 轮播图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第四部分: 嵌套一个三行7列表格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;7&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新商品<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/title2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左边大图的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;206px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/big01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/middle01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第五部分: 直接放一张图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/ad.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第六部分: 抄第四部分的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;7&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>热门商品<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/title2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左边大图的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;206px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/big01.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/middle01.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/hao/small06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第七部分: 放置一张图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/footer.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第八部分: 放一堆超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>招贤纳士<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>法律声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>支付方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>配送方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服务声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>广告声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">Copyright © 2005-2016 传智商城 版权所有</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-网站注册页面"><a href="#5-网站注册页面" class="headerlink" title="5.网站注册页面:"></a>5.网站注册页面:</h3><h4 id="5-1需求分析"><a href="#5-1需求分析" class="headerlink" title="5.1需求分析:"></a>5.1需求分析:</h4><p>​    编写一个HTML页面, 显示效果如图所示</p><h4 id="5-2技术分析"><a href="#5-2技术分析" class="headerlink" title="5.2技术分析:"></a>5.2技术分析:</h4><ul><li><p>表单标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">表单标签</span></span><br><span class="line"><span class="comment">action : 直接提交的地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">method : </span></span><br><span class="line"><span class="comment">get 方式  默认提交方式 ,会将参数拼接在链接后面 , 有大小限制 ,4k</span></span><br><span class="line"><span class="comment">post 方式  会将参数封装在请求体中, 没有这样的限制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">input :</span></span><br><span class="line"><span class="comment">type: 指定输入项的类型</span></span><br><span class="line"><span class="comment">text : 文本</span></span><br><span class="line"><span class="comment">password :  密码框</span></span><br><span class="line"><span class="comment">radio :单选按钮</span></span><br><span class="line"><span class="comment">checkbox :  复选框</span></span><br><span class="line"><span class="comment">file  : 上传文件</span></span><br><span class="line"><span class="comment">submit   : 提交按钮</span></span><br><span class="line"><span class="comment">button  : 普通按钮</span></span><br><span class="line"><span class="comment">reset : 重置按钮</span></span><br><span class="line"><span class="comment">hidden  : 隐藏域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">date    : 日期类型</span></span><br><span class="line"><span class="comment">tel     : 手机号</span></span><br><span class="line"><span class="comment">number   : 只允许输入数字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">placeholder : 指定默认的提示信息</span></span><br><span class="line"><span class="comment">name : 在表单提交的时候,当作参数的名称</span></span><br><span class="line"><span class="comment">id : 给输入项取一个名字, 以便于后期我们去找到它,并且操作它</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">textarea : 文本域, 可以输入一段文本</span></span><br><span class="line"><span class="comment">cols : 指定宽度</span></span><br><span class="line"><span class="comment">rows : 指定的是高度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">select  : 下拉列表</span></span><br><span class="line"><span class="comment">option : 选择项</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析:"></a>步骤分析:</h4><ol><li>logo部分</li><li>导航栏</li><li>注册部分</li><li>页脚图片</li><li>网站声明信息</li></ol><h4 id="5-3代码实现"><a href="#5-3代码实现" class="headerlink" title="5.3代码实现:"></a>5.3代码实现:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;注册入门案例.html&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;60%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">font</span>&gt;</span> USER REGISTER<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>密   码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>email:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span> 女</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span> 妖</span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>  /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>  /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-网站后台页面展示"><a href="#6-网站后台页面展示" class="headerlink" title="6.网站后台页面展示"></a>6.网站后台页面展示</h3><h4 id="6-1需求分析"><a href="#6-1需求分析" class="headerlink" title="6.1需求分析:"></a>6.1需求分析:</h4><p>我们前面已经做完了首页商品展示, 那么我们需要一个页面用来编辑我们的商品信息, 还有商品分类, 用户购买之后,还得有订单管理页面</p><h4 id="6-2技术分析"><a href="#6-2技术分析" class="headerlink" title="6.2技术分析"></a>6.2技术分析</h4><p>框架标签:<br>frameset</p><p>注意: 使用了frameset必须将body删掉,否则页面会有问题</p><p>frame<br>     常用属性:</p><p>​    src: 引入的html文件路径<br>​    name: 指定框架的名称</p><h4 id="6-3步骤分析"><a href="#6-3步骤分析" class="headerlink" title="6.3步骤分析"></a>6.3步骤分析</h4><h4 id="6-4代码实现"><a href="#6-4代码实现" class="headerlink" title="6.4代码实现"></a>6.4代码实现</h4><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>框架中点击跳转</p><h4 id="常用的快捷键"><a href="#常用的快捷键" class="headerlink" title="常用的快捷键"></a>常用的快捷键</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + D 删除光标当前所在的行</span><br><span class="line">Ctrl + Shift + R 复制当前行到下一行</span><br><span class="line">Ctrl + Enter 将光标移动到下一行</span><br><span class="line">Ctrl + Shift + Enter 将光标定位在上一行</span><br><span class="line">Ctrl + Shift + /            注释当前行</span><br><span class="line">Ctrl + R  运行当前网页/刷新当前网页</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse快捷键大全</title>
      <link href="/2020/06/17/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/06/17/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Eclipse快捷键大全"><a href="#Eclipse快捷键大全" class="headerlink" title="Eclipse快捷键大全"></a><strong>Eclipse快捷键大全</strong></h3><a id="more"></a><p>Ctrl+1 快速修复(最经典的快捷键,就不用多说了)<br>Ctrl+D: 删除当前行<br>Ctrl+Alt+↓ 复制当前行到下一行(复制增加)<br>Ctrl+Alt+↑ 复制当前行到上一行(复制增加)<br>Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)<br>Alt+↑ 当前行和上面一行交互位置(同上)<br>Alt+← 前一个编辑的页面<br>Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)<br>Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性<br>Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)<br>Shift+Ctrl+Enter 在当前行插入空行(原理同上条)<br>Ctrl+Q 定位到最后编辑的地方<br>Ctrl+L 定位在某行 (对于程序超过100的人就有福音了)<br>Ctrl+M 最大化当前的Edit或View (再按则反之)<br>Ctrl+/ 注释当前行,再按则取消注释<br>Ctrl+O 快速显示 OutLine<br>Ctrl+T 快速显示当前类的继承结构<br>Ctrl+W 关闭当前Editer<br>Ctrl+K 参照选中的Word快速定位到下一个<br>Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)<br>Ctrl+/(小键盘) 折叠当前类中的所有代码<br>Ctrl+×(小键盘) 展开当前类中的所有代码<br>Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替)<br>Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)<br>Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)<br>Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查)<br>Ctrl+Shift+F4 关闭所有打开的Editer<br>Ctrl+Shift+X 把当前选中的文本全部变味小写<br>Ctrl+Shift+Y 把当前选中的文本全部变为小写<br>Ctrl+Shift+F 格式化当前代码<br>Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)</p><p>下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了)<br>Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力)<br>Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)<br>Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)<br>Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)<br>Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能)<br>Alt+Shift+I 合并变量(可能这样说有点不妥Inline)<br>Alt+Shift+V 移动函数和变量(不怎么常用)<br>Alt+Shift+Z 重构的后悔药(Undo)</p><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a><strong>编辑</strong></h3><p>作用域 功能 快捷键<br>全局 查找并替换 Ctrl+F<br>文本编辑器 查找上一个 Ctrl+Shift+K<br>文本编辑器 查找下一个 Ctrl+K<br>全局 撤销 Ctrl+Z<br>全局 复制 Ctrl+C<br>全局 恢复上一个选择 Alt+Shift+↓<br>全局 剪切 Ctrl+X<br>全局 快速修正 Ctrl1+1<br>全局 内容辅助 Alt+/<br>全局 全部选中 Ctrl+A<br>全局 删除 Delete<br>全局 上下文信息 Alt+？<br>Alt+Shift+?<br>Ctrl+Shift+Space<br>Java编辑器 显示工具提示描述 F2<br>Java编辑器 选择封装元素 Alt+Shift+↑<br>Java编辑器 选择上一个元素 Alt+Shift+←<br>Java编辑器 选择下一个元素 Alt+Shift+→<br>文本编辑器 增量查找 Ctrl+J<br>文本编辑器 增量逆向查找 Ctrl+Shift+J<br>全局 粘贴 Ctrl+V<br>全局 重做 Ctrl+Y </p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>作用域 功能 快捷键<br>全局 放大 Ctrl+=<br>全局 缩小 Ctrl+- </p><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><p>作用域 功能 快捷键<br>全局 激活编辑器 F12<br>全局 切换编辑器 Ctrl+Shift+W<br>全局 上一个编辑器 Ctrl+Shift+F6<br>全局 上一个视图 Ctrl+Shift+F7<br>全局 上一个透视图 Ctrl+Shift+F8<br>全局 下一个编辑器 Ctrl+F6<br>全局 下一个视图 Ctrl+F7<br>全局 下一个透视图 Ctrl+F8<br>文本编辑器 显示标尺上下文菜单 Ctrl+W<br>全局 显示视图菜单 Ctrl+F10<br>全局 显示系统菜单 Alt+- </p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>作用域 功能 快捷键<br>Java编辑器 打开结构 Ctrl+F3<br>全局 打开类型 Ctrl+Shift+T<br>全局 打开类型层次结构 F4<br>全局 打开声明 F3<br>全局 打开外部javadoc Shift+F2<br>全局 打开资源 Ctrl+Shift+R<br>全局 后退历史记录 Alt+←<br>全局 前进历史记录 Alt+→<br>全局 上一个 Ctrl+,<br>全局 下一个 Ctrl+.<br>Java编辑器 显示大纲 Ctrl+O<br>全局 在层次结构中打开类型 Ctrl+Shift+H<br>全局 转至匹配的括号 Ctrl+Shift+P<br>全局 转至上一个编辑位置 Ctrl+Q<br>Java编辑器 转至上一个成员 Ctrl+Shift+↑<br>Java编辑器 转至下一个成员 Ctrl+Shift+↓<br>文本编辑器 转至行 Ctrl+L </p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>作用域 功能 快捷键<br>全局 出现在文件中 Ctrl+Shift+U<br>全局 打开搜索对话框 Ctrl+H<br>全局 工作区中的声明 Ctrl+G<br>全局 工作区中的引用 Ctrl+Shift+G </p><h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><p>作用域 功能 快捷键<br>文本编辑器 改写切换 Insert<br>文本编辑器 上滚行 Ctrl+↑<br>文本编辑器 下滚行 Ctrl+↓ </p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>作用域 功能 快捷键<br>全局 保存 Ctrl+X<br>Ctrl+S<br>全局 打印 Ctrl+P<br>全局 关闭 Ctrl+F4<br>全局 全部保存 Ctrl+Shift+S<br>全局 全部关闭 Ctrl+Shift+F4<br>全局 属性 Alt+Enter<br>全局 新建 Ctrl+N </p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>作用域 功能 快捷键<br>全局 全部构建 Ctrl+B </p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>作用域 功能 快捷键<br>Java编辑器 格式化 Ctrl+Shift+F<br>Java编辑器 取消注释 Ctrl+\<br>Java编辑器 注释 Ctrl+/<br>Java编辑器 添加导入 Ctrl+Shift+M<br>Java编辑器 组织导入 Ctrl+Shift+O<br>Java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。<br>也可以使用Ctrl+1自动修正。 </p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>作用域 功能 快捷键<br>全局 单步返回 F7<br>全局 单步跳过 F6<br>全局 单步跳入 F5<br>全局 单步跳入选择 Ctrl+F5<br>全局 调试上次启动 F11<br>全局 继续 F8<br>全局 使用过滤器单步执行 Shift+F5<br>全局 添加/去除断点 Ctrl+Shift+B<br>全局 显示 Ctrl+D<br>全局 运行上次启动 Ctrl+F11<br>全局 运行至行 Ctrl+R<br>全局 执行 Ctrl+U </p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>作用域 功能 快捷键<br>全局 撤销重构 Alt+Shift+Z<br>全局 抽取方法 Alt+Shift+M<br>全局 抽取局部变量 Alt+Shift+L<br>全局 内联 Alt+Shift+I<br>全局 移动 Alt+Shift+V<br>全局 重命名 Alt+Shift+R<br>全局 重做 Alt+Shift+Y</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础27-反射-JDK新特性</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8027-%E5%8F%8D%E5%B0%84-JDK%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8027-%E5%8F%8D%E5%B0%84-JDK%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="Demo1-Reflect"><a href="#Demo1-Reflect" class="headerlink" title="Demo1_Reflect"></a>Demo1_Reflect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Reflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">Class clazz1 = Class.forName(<span class="string">&quot;com.heima.bean.Person&quot;</span>);</span><br><span class="line">Class clazz2 = Person.class;</span><br><span class="line"></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz3 = p.getClass();</span><br><span class="line"></span><br><span class="line">System.out.println(clazz1 == clazz2);</span><br><span class="line">System.out.println(clazz2 == clazz3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo2-Reflect"><a href="#Demo2-Reflect" class="headerlink" title="Demo2_Reflect"></a>Demo2_Reflect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Reflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 榨汁机(Juicer)榨汁的案例</span></span><br><span class="line"><span class="comment"> * 分别有水果(Fruit)苹果(Apple)香蕉(Banana)桔子(Orange)榨汁(squeeze)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Juicer j = <span class="keyword">new</span> Juicer();<span class="comment">//创建榨汁机</span></span><br><span class="line"><span class="comment">//j.run(new Apple());</span></span><br><span class="line"><span class="comment">//j.run(new Orange());</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;config.properties&quot;</span>));</span><br><span class="line">Class clazz = Class.forName(br.readLine());<span class="comment">//获取该类的字节码文件</span></span><br><span class="line">Fruit f = (Fruit) clazz.newInstance();<span class="comment">//创建实例对象</span></span><br><span class="line">j.run(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;榨出一杯苹果汁儿&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;榨出一杯橘子汁儿&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Juicer</span> </span>&#123;</span><br><span class="line"><span class="comment">/*public void run(Apple a) &#123;</span></span><br><span class="line"><span class="comment">a.squeeze();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public void run(Orange o) &#123;</span></span><br><span class="line"><span class="comment">o.squeeze();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Fruit f)</span> </span>&#123;</span><br><span class="line">f.squeeze();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo3-Constructor"><a href="#Demo3-Constructor" class="headerlink" title="Demo3_Constructor"></a>Demo3_Constructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Constructor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class类的newInstance()方法是使用该类无参的构造函数创建对象, 如果一个类没有无参的构造函数,</span></span><br><span class="line"><span class="comment"> * 就不能这样创建了,可以调用Class类的getConstructor</span></span><br><span class="line"><span class="comment"> * (String.class,int.class)方法获取一个指定的构造函数然后再调用Constructor类的newInstance</span></span><br><span class="line"><span class="comment"> * (&quot;张三&quot;,20)方法创建对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;com.heima.bean.Person&quot;</span>);</span><br><span class="line"><span class="comment">//Person p = (Person) clazz.newInstance();通过无餐构造创建对象</span></span><br><span class="line"><span class="comment">//System.out.println(p);</span></span><br><span class="line">Constructor c = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);//获取有参构造</span><br><span class="line">Person p = (Person) c.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);<span class="comment">//通过有参构造创建对象</span></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Demo4-Field"><a href="#Demo4-Field" class="headerlink" title="Demo4_Field"></a>Demo4_Field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_Field</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class.getField(String)方法可以获取类中的指定字段(可见的),</span></span><br><span class="line"><span class="comment"> * 如果是私有的可以用getDeclaedField(&quot;name&quot;)方法获取,通过set(obj, &quot;李四&quot;)方法可以设置指定对象上该字段的值,</span></span><br><span class="line"><span class="comment"> * 如果是私有的需要先调用setAccessible(true)设置访问权限,用获取的指定的字段调用get(obj)可以获取指定对象中该字段的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;com.heima.bean.Person&quot;</span>);</span><br><span class="line">Constructor c = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);//获取有参构造</span><br><span class="line">Person p = (Person) c.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);<span class="comment">//通过有参构造创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Field f = clazz.getField(&quot;name&quot;);//获取姓名字段</span></span><br><span class="line"><span class="comment">//f.set(p, &quot;李四&quot;);//修改姓名的值</span></span><br><span class="line">Field f = clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);<span class="comment">//暴力反射获取字段</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);<span class="comment">//去除私有权限</span></span><br><span class="line">f.set(p, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class.getMethod(String, Class...) 和 Class.getDeclaredMethod(String,</span></span><br><span class="line"><span class="comment"> * Class...)方法可以获取类中的指定方法,调用invoke(Object,</span></span><br><span class="line"><span class="comment"> * Object...)可以调用该方法,Class.getMethod(&quot;eat&quot;) invoke(obj)</span></span><br><span class="line"><span class="comment"> * Class.getMethod(&quot;eat&quot;,int.class) invoke(obj,10)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;com.heima.bean.Person&quot;</span>);</span><br><span class="line">Constructor c = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);//获取有参构造</span><br><span class="line">Person p = (Person) c.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);<span class="comment">//通过有参构造创建对象</span></span><br><span class="line"></span><br><span class="line">Method m = clazz.getMethod(<span class="string">&quot;eat&quot;</span>);<span class="comment">//获取eat方法</span></span><br><span class="line">m.invoke(p);</span><br><span class="line"></span><br><span class="line">Method m2 = clazz.getMethod(<span class="string">&quot;eat&quot;</span>, <span class="keyword">int</span>.class);//获取有参的eat方法</span><br><span class="line">m2.invoke(p, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Demo1-JDK7"><a href="#Demo1-JDK7" class="headerlink" title="Demo1_JDK7"></a>Demo1_JDK7</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_JDK7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A:二进制字面量</span></span><br><span class="line"><span class="comment">* B:数字字面量可以出现下划线</span></span><br><span class="line"><span class="comment">* C:switch 语句可以用字符串</span></span><br><span class="line"><span class="comment">* D:泛型简化,菱形泛型</span></span><br><span class="line"><span class="comment">* E:异常的多个catch合并,每个异常用或|</span></span><br><span class="line"><span class="comment">* F:try-with-resources 语句,1.7版标准的异常处理代码</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 100_000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="number">0b110</span>);</span><br><span class="line">System.out.println(<span class="number">100_000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础26-网络编程</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8026-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8026-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="26-01-网络编程-网络编程概述-了解"><a href="#26-01-网络编程-网络编程概述-了解" class="headerlink" title="26.01_网络编程(网络编程概述)(了解)"></a>26.01_网络编程(网络编程概述)(了解)</h2><ul><li>A:计算机网络<ul><li>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</li></ul></li><li>B:网络编程<ul><li>就是用来实现网络互连的不同计算机上运行的程序间可以进行数据交换。</li></ul></li></ul><h2 id="26-02-网络编程-网络编程三要素之IP概述-掌握"><a href="#26-02-网络编程-网络编程三要素之IP概述-掌握" class="headerlink" title="26.02_网络编程(网络编程三要素之IP概述)(掌握)"></a>26.02_网络编程(网络编程三要素之IP概述)(掌握)</h2><ul><li>每个设备在网络中的唯一标识</li><li>每台网络终端在网络中都有一个独立的地址，我们在网络中传输数据就是使用这个地址。 </li><li>ipconfig：查看本机IP192.168.12.42</li><li>ping：测试连接192.168.40.62</li><li>本地回路地址：127.0.0.1 255.255.255.255是广播地址</li><li>IPv4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。 </li><li>IPv6：8组，每组4个16进制数。</li><li>1a2b:0000:aaaa:0000:0000:0000:aabb:1f2f</li><li>1a2b::aaaa:0000:0000:0000:aabb:1f2f</li><li>1a2b:0000:aaaa::aabb:1f2f</li><li>1a2b:0000:aaaa::0000:aabb:1f2f</li><li>1a2b:0000:aaaa:0000::aabb:1f2f</li></ul><h3 id="26-03-网络编程-网络编程三要素之端口号概述-掌握"><a href="#26-03-网络编程-网络编程三要素之端口号概述-掌握" class="headerlink" title="26.03_网络编程(网络编程三要素之端口号概述)(掌握)"></a>26.03_网络编程(网络编程三要素之端口号概述)(掌握)</h3><ul><li>每个程序在设备上的唯一标识</li><li>每个网络程序都需要绑定一个端口号，传输数据的时候除了确定发到哪台机器上，还要明确发到哪个程序。</li><li>端口号范围从0-65535</li><li>编写网络应用就需要绑定一个端口号，尽量使用1024以上的，1024以下的基本上都被系统程序占用了。</li><li>常用端口<ul><li>mysql: 3306</li><li>oracle: 1521</li><li>web: 80</li><li>tomcat: 8080</li><li>QQ: 4000</li><li>feiQ: 2425</li></ul></li></ul><h3 id="26-04-网络编程-网络编程三要素协议-掌握"><a href="#26-04-网络编程-网络编程三要素协议-掌握" class="headerlink" title="26.04_网络编程(网络编程三要素协议)(掌握)"></a>26.04_网络编程(网络编程三要素协议)(掌握)</h3><ul><li>为计算机网络中进行数据交换而建立的规则、标准或约定的集合。</li><li>UDP<ul><li>面向无连接，数据不安全，速度快。不区分客户端与服务端。</li></ul></li><li>TCP<br>　　* 面向连接（三次握手），数据安全，速度略低。分为客户端和服务端。<ul><li>三次握手: 客户端先向服务端发起请求, 服务端响应请求, 传输数据</li></ul></li></ul><h3 id="26-05-网络编程-Socket通信原理图解-了解"><a href="#26-05-网络编程-Socket通信原理图解-了解" class="headerlink" title="26.05_网络编程(Socket通信原理图解)(了解)"></a>26.05_网络编程(Socket通信原理图解)(了解)</h3><ul><li>A:Socket套接字概述：<ul><li>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</li><li>通信的两端都有Socket。</li><li>网络通信其实就是Socket间的通信。</li><li>数据在两个Socket间通过IO流传输。</li><li>Socket在应用程序中创建，通过一种绑定机制与驱动程序建立关系，告诉自己所对应的IP和port。</li></ul></li></ul><h3 id="26-06-网络编程-UDP传输-了解"><a href="#26-06-网络编程-UDP传输-了解" class="headerlink" title="26.06_网络编程(UDP传输)(了解)"></a>26.06_网络编程(UDP传输)(了解)</h3><ul><li>1.发送Send<ul><li>创建DatagramSocket, 随机端口号</li><li>创建DatagramPacket, 指定数据, 长度, 地址, 端口</li><li>使用DatagramSocket发送DatagramPacket</li><li>关闭DatagramSocket</li></ul></li><li>2.接收Receive<ul><li>创建DatagramSocket, 指定端口号</li><li>创建DatagramPacket, 指定数组, 长度</li><li>使用DatagramSocket接收DatagramPacket</li><li>关闭DatagramSocket</li><li>从DatagramPacket中获取数据</li></ul></li><li>3.接收方获取ip和端口号<ul><li>String ip = packet.getAddress().getHostAddress();</li><li>int port = packet.getPort();</li></ul></li></ul><h3 id="26-07-网络编程-UDP传输优化"><a href="#26-07-网络编程-UDP传输优化" class="headerlink" title="26.07_网络编程(UDP传输优化)"></a>26.07_网络编程(UDP传输优化)</h3><ul><li><p>接收端Receive</p></li><li><pre><code>  DatagramSocket socket = new DatagramSocket(6666);                        //创建socket相当于创建码头  DatagramPacket packet = new DatagramPacket(new byte[1024], 1024);        //创建packet相当于创建集装箱  while(true) &#123;      socket.receive(packet);                                                //接收货物      byte[] arr = packet.getData();      int len = packet.getLength();      String ip = packet.getAddress().getHostAddress();      System.out.println(ip + &quot;:&quot; + new String(arr,0,len));  &#125;</code></pre></li><li><p>发送端Send</p><pre><code>  DatagramSocket socket = new DatagramSocket();        //创建socket相当于创建码头  Scanner sc = new Scanner(System.in);  while(true) &#123;      String str = sc.nextLine();      if(&quot;quit&quot;.equals(str))          break;      DatagramPacket packet =                             //创建packet相当于创建集装箱              new DatagramPacket(str.getBytes(), str.getBytes().length, InetAddress.getByName(&quot;127.0.0.1&quot;), 6666);      socket.send(packet);            //发货  &#125;  socket.close();</code></pre><h3 id="26-08-网络编程-UDP传输多线程"><a href="#26-08-网络编程-UDP传输多线程" class="headerlink" title="26.08_网络编程(UDP传输多线程)"></a>26.08_网络编程(UDP传输多线程)</h3></li><li><p>A发送和接收在一个窗口完成</p><pre><code>  public class Demo3_MoreThread &#123;      /**       * @param args       */      public static void main(String[] args) &#123;          new Receive().start();          new Send().start();      &#125;  &#125;  class Receive extends Thread &#123;      public void run() &#123;          try &#123;              DatagramSocket socket = new DatagramSocket(6666);                    //创建socket相当于创建码头              DatagramPacket packet = new DatagramPacket(new byte[1024], 1024);    //创建packet相当于创建集装箱              while(true) &#123;                  socket.receive(packet);                                                //接收货物                  byte[] arr = packet.getData();                  int len = packet.getLength();                  String ip = packet.getAddress().getHostAddress();                  System.out.println(ip + &quot;:&quot; + new String(arr,0,len));              &#125;          &#125; catch (IOException e) &#123;              e.printStackTrace();          &#125;      &#125;  &#125;  class Send extends Thread &#123;      public void run() &#123;          try &#123;              DatagramSocket socket = new DatagramSocket();        //创建socket相当于创建码头              Scanner sc = new Scanner(System.in);              while(true) &#123;                  String str = sc.nextLine();                  if(&quot;quit&quot;.equals(str))                      break;                  DatagramPacket packet =                             //创建packet相当于创建集装箱                          new DatagramPacket(str.getBytes(), str.getBytes().length, InetAddress.getByName(&quot;127.0.0.1&quot;), 6666);                  socket.send(packet);            //发货              &#125;              socket.close();          &#125;  catch (IOException e) &#123;              e.printStackTrace();          &#125;      &#125;  &#125;</code></pre></li></ul><p>###26.09_网络编程(UDP聊天图形化界面)</p><p>###26.10_网络编程(UDP聊天发送功能)</p><p>###26.11_网络编程(UDP聊天记录功能)</p><p>###26.12_网络编程(UDP聊天清屏功能)</p><p>###26.13_网络编程(UDP聊天震动功能)</p><p>###26.14_网络编程(UDP聊天快捷键和代码优化)</p><p>###26.15_网络编程(UDP聊天生成jar文件)</p><h3 id="26-16-网络编程-TCP协议-掌握"><a href="#26-16-网络编程-TCP协议-掌握" class="headerlink" title="26.16_网络编程(TCP协议)(掌握)"></a>26.16_网络编程(TCP协议)(掌握)</h3><ul><li>1.客户端<ul><li>创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器</li><li>调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流</li><li>输入流可以读取服务端输出流写出的数据</li><li>输出流可以写出数据到服务端的输入流</li></ul></li><li>2.服务端<ul><li>创建ServerSocket(需要指定端口号)</li><li>调用ServerSocket的accept()方法接收一个客户端请求，得到一个Socket</li><li>调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流</li><li>输入流可以读取客户端输出流写出的数据</li><li>输出流可以写出数据到客户端的输入流</li></ul></li></ul><h3 id="26-17-网络编程-TCP协议代码优化"><a href="#26-17-网络编程-TCP协议代码优化" class="headerlink" title="26.17_网络编程(TCP协议代码优化)"></a>26.17_网络编程(TCP协议代码优化)</h3><ul><li><p>客户端</p><pre><code>  Socket socket = new Socket(&quot;127.0.0.1&quot;, 9999);        //创建Socket指定ip地址和端口号  InputStream is = socket.getInputStream();            //获取输入流  OutputStream os = socket.getOutputStream();            //获取输出流  BufferedReader br = new BufferedReader(new InputStreamReader(is));  PrintStream ps = new PrintStream(os);  System.out.println(br.readLine());  ps.println(&quot;我想报名就业班&quot;);  System.out.println(br.readLine());  ps.println(&quot;爷不学了&quot;);  socket.close();</code></pre></li><li><p>服务端</p><pre><code>  ServerSocket server = new ServerSocket(9999);    //创建服务器  Socket socket = server.accept();                //接受客户端的请求  InputStream is = socket.getInputStream();        //获取输入流  OutputStream os = socket.getOutputStream();        //获取输出流  BufferedReader br = new BufferedReader(new InputStreamReader(is));  PrintStream ps = new PrintStream(os);  ps.println(&quot;欢迎咨询传智播客&quot;);  System.out.println(br.readLine());  ps.println(&quot;报满了,请报下一期吧&quot;);  System.out.println(br.readLine());  server.close();  socket.close();</code></pre></li></ul><h3 id="26-18-网络编程-服务端是多线程的-掌握"><a href="#26-18-网络编程-服务端是多线程的-掌握" class="headerlink" title="26.18_网络编程(服务端是多线程的)(掌握)"></a>26.18_网络编程(服务端是多线程的)(掌握)</h3><pre><code>ServerSocket server = new ServerSocket(9999);    //创建服务器    while(true) &#123;        final Socket socket = server.accept();                //接受客户端的请求        new Thread() &#123;            public void run() &#123;                try &#123;                    BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));                    PrintStream ps = new PrintStream(socket.getOutputStream());                    ps.println(&quot;欢迎咨询传智播客&quot;);                    System.out.println(br.readLine());                    ps.println(&quot;报满了,请报下一期吧&quot;);                    System.out.println(br.readLine());                    socket.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;.start();    &#125;&#125;</code></pre><h3 id="26-19-网络编程-练习"><a href="#26-19-网络编程-练习" class="headerlink" title="26.19_网络编程(练习)"></a>26.19_网络编程(练习)</h3><ul><li>客户端向服务器写字符串(键盘录入),服务器(多线程)将字符串反转后写回,客户端再次读取到是反转后的字符串<h3 id="26-20-网络编程-练习"><a href="#26-20-网络编程-练习" class="headerlink" title="26.20_网络编程(练习)"></a>26.20_网络编程(练习)</h3></li><li>客户端向服务器上传文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础25-多线程-下</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8025-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%8B/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8025-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="25-01-多线程-单例设计模式-掌握"><a href="#25-01-多线程-单例设计模式-掌握" class="headerlink" title="25.01_多线程(单例设计模式)(掌握)"></a>25.01_多线程(单例设计模式)(掌握)</h2><ul><li><p>单例设计模式：保证类在内存中只有一个对象。</p></li><li><p>如何保证类在内存中只有一个对象呢？</p><ul><li>(1)控制类的创建，不让其他类来创建本类的对象。private</li><li>(2)在本类中定义一个本类的对象。Singleton s;</li><li>(3)提供公共的访问方式。  public static Singleton getInstance(){return s}</li></ul></li><li><p>单例写法两种：</p><ul><li><p>(1)饿汉式 开发用这种方式。</p></li><li><pre><code>  //饿汉式  class Singleton &#123;      //1,私有构造函数      private Singleton()&#123;&#125;      //2,创建本类对象      private static Singleton s = new Singleton();      //3,对外提供公共的访问方法      public static Singleton getInstance() &#123;          return s;      &#125;      public static void print() &#123;          System.out.println(&quot;11111111111&quot;);      &#125;  &#125;</code></pre></li><li><p>(2)懒汉式 面试写这种方式。多线程的问题？</p></li><li><pre><code>  //懒汉式,单例的延迟加载模式  class Singleton &#123;      //1,私有构造函数      private Singleton()&#123;&#125;      //2,声明一个本类的引用      private static Singleton s;      //3,对外提供公共的访问方法      public static Singleton getInstance() &#123;          if(s == null)              //线程1,线程2              s = new Singleton();          return s;      &#125;      public static void print() &#123;          System.out.println(&quot;11111111111&quot;);      &#125;  &#125;</code></pre></li><li><p>(3)第三种格式</p></li><li><pre><code>  class Singleton &#123;      private Singleton() &#123;&#125;      public static final Singleton s = new Singleton();//final是最终的意思,被final修饰的变量不可以被更改  &#125;</code></pre><h2 id="25-02-多线程-Runtime类"><a href="#25-02-多线程-Runtime类" class="headerlink" title="25.02_多线程(Runtime类)"></a>25.02_多线程(Runtime类)</h2></li></ul></li><li><p>Runtime类是一个单例类</p><ul><li><pre><code>  Runtime r = Runtime.getRuntime();  //r.exec(&quot;shutdown -s -t 300&quot;);        //300秒后关机  r.exec(&quot;shutdown -a&quot;);                //取消关机</code></pre></li></ul></li></ul><h3 id="25-03-多线程-Timer-掌握"><a href="#25-03-多线程-Timer-掌握" class="headerlink" title="25.03_多线程(Timer)(掌握)"></a>25.03_多线程(Timer)(掌握)</h3><ul><li><p>Timer类:计时器</p><pre><code>      public class Demo5_Timer &#123;          /**           * @param args           * 计时器           * @throws InterruptedException            */          public static void main(String[] args) throws InterruptedException &#123;              Timer t = new Timer();              t.schedule(new MyTimerTask(), new Date(114,9,15,10,54,20),3000);              while(true) &#123;                  System.out.println(new Date());                  Thread.sleep(1000);              &#125;          &#125;      &#125;      class MyTimerTask extends TimerTask &#123;          @Override          public void run() &#123;              System.out.println(&quot;起床背英语单词&quot;);          &#125;      &#125;</code></pre></li></ul><h3 id="25-04-多线程-两个线程间的通信-掌握"><a href="#25-04-多线程-两个线程间的通信-掌握" class="headerlink" title="25.04_多线程(两个线程间的通信)(掌握)"></a>25.04_多线程(两个线程间的通信)(掌握)</h3><ul><li>1.什么时候需要通信<ul><li>多个线程并发执行时, 在默认情况下CPU是随机切换线程的</li><li>如果我们希望他们有规律的执行, 就可以使用通信, 例如每个线程执行一次打印</li></ul></li><li>2.怎么通信<ul><li>如果希望线程等待, 就调用wait()</li><li>如果希望唤醒等待的线程, 就调用notify();</li><li>这两个方法必须在同步代码中执行, 并且使用同步锁对象来调用</li></ul></li></ul><h3 id="25-05-多线程-三个或三个以上间的线程通信"><a href="#25-05-多线程-三个或三个以上间的线程通信" class="headerlink" title="25.05_多线程(三个或三个以上间的线程通信)"></a>25.05_多线程(三个或三个以上间的线程通信)</h3><ul><li>多个线程通信的问题<ul><li>notify()方法是随机唤醒一个线程</li><li>notifyAll()方法是唤醒所有线程</li><li>JDK5之前无法唤醒指定的一个线程</li><li>如果多个线程之间通信, 需要使用notifyAll()通知所有线程, 用while来反复判断条件<h3 id="25-06-多线程-JDK1-5的新特性互斥锁-掌握"><a href="#25-06-多线程-JDK1-5的新特性互斥锁-掌握" class="headerlink" title="25.06_多线程(JDK1.5的新特性互斥锁)(掌握)"></a>25.06_多线程(JDK1.5的新特性互斥锁)(掌握)</h3></li></ul></li><li>1.同步<ul><li>使用ReentrantLock类的lock()和unlock()方法进行同步</li></ul></li><li>2.通信<ul><li>使用ReentrantLock类的newCondition()方法可以获取Condition对象</li><li>需要等待的时候使用Condition的await()方法, 唤醒的时候用signal()方法</li><li>不同的线程使用不同的Condition, 这样就能区分唤醒的时候找哪个线程了</li></ul></li></ul><h3 id="25-07-多线程-线程组的概述和使用-了解"><a href="#25-07-多线程-线程组的概述和使用-了解" class="headerlink" title="25.07_多线程(线程组的概述和使用)(了解)"></a>25.07_多线程(线程组的概述和使用)(了解)</h3><ul><li><p>A:线程组概述</p><ul><li>Java中使用ThreadGroup来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</li><li>默认情况下，所有的线程都属于主线程组。<ul><li>public final ThreadGroup getThreadGroup()//通过线程对象获取他所属于的组</li><li>public final String getName()//通过线程组对象获取他组的名字</li></ul></li><li>我们也可以给线程设置分组<ul><li>1,ThreadGroup(String name) 创建线程组对象并给其赋值名字</li><li>2,创建线程对象</li><li>3,Thread(ThreadGroup?group, Runnable?target, String?name) </li><li>4,设置整组的优先级或者守护线程</li></ul></li><li>B:案例演示<ul><li>线程组的使用,默认是主线程组</li></ul></li></ul></li><li><pre><code>  MyRunnable mr = new MyRunnable();  Thread t1 = new Thread(mr, &quot;张三&quot;);  Thread t2 = new Thread(mr, &quot;李四&quot;);  //获取线程组  // 线程类里面的方法：public final ThreadGroup getThreadGroup()  ThreadGroup tg1 = t1.getThreadGroup();  ThreadGroup tg2 = t2.getThreadGroup();  // 线程组里面的方法：public final String getName()  String name1 = tg1.getName();  String name2 = tg2.getName();  System.out.println(name1);  System.out.println(name2);  // 通过结果我们知道了：线程默认情况下属于main线程组  // 通过下面的测试，你应该能够看到，默任情况下，所有的线程都属于同一个组  System.out.println(Thread.currentThread().getThreadGroup().getName());</code></pre><ul><li>自己设定线程组</li></ul></li><li><p>// ThreadGroup(String name)<br>ThreadGroup tg = new ThreadGroup(“这是一个新的组”);</p><p>MyRunnable mr = new MyRunnable();<br>// Thread(ThreadGroup group, Runnable target, String name)<br>Thread t1 = new Thread(tg, mr, “张三”);<br>Thread t2 = new Thread(tg, mr, “李四”);</p><p>System.out.println(t1.getThreadGroup().getName());<br>System.out.println(t2.getThreadGroup().getName());</p><p>//通过组名称设置后台线程，表示该组的线程都是后台线程<br>tg.setDaemon(true);</p><h3 id="25-08-多线程-线程的五种状态-掌握"><a href="#25-08-多线程-线程的五种状态-掌握" class="headerlink" title="25.08_多线程(线程的五种状态)(掌握)"></a>25.08_多线程(线程的五种状态)(掌握)</h3></li><li><p>看图说话</p></li><li><p>新建,就绪,运行,阻塞,死亡</p></li></ul><p>###25.09_多线程(线程池的概述和使用)(了解)</p><ul><li><p>A:线程池概述</p><ul><li>程序启动一个新线程成本是比较高的，因为它涉及到要与操作系统进行交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量生存期很短的线程时，更应该考虑使用线程池。线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。在JDK5之前，我们必须手动实现自己的线程池，从JDK5开始，Java内置支持线程池</li></ul></li><li><p>B:内置线程池的使用概述</p><ul><li>JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法<ul><li>public static ExecutorService newFixedThreadPool(int nThreads)</li><li>public static ExecutorService newSingleThreadExecutor()</li><li>这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法</li><li>Future&lt;?&gt; submit(Runnable task)</li><li><T> Future<T> submit(Callable<T> task)</li></ul></li><li>使用步骤：<ul><li>创建线程池对象</li><li>创建Runnable实例</li><li>提交Runnable实例</li><li>关闭线程池</li></ul></li><li>C:案例演示<ul><li>提交的是Runnable</li></ul></li></ul></li><li><pre><code>  // public static ExecutorService newFixedThreadPool(int nThreads)  ExecutorService pool = Executors.newFixedThreadPool(2);  // 可以执行Runnable对象或者Callable对象代表的线程  pool.submit(new MyRunnable());  pool.submit(new MyRunnable());  //结束线程池  pool.shutdown();</code></pre></li></ul><h3 id="25-10-多线程-多线程程序实现的方式3-了解"><a href="#25-10-多线程-多线程程序实现的方式3-了解" class="headerlink" title="25.10_多线程(多线程程序实现的方式3)(了解)"></a>25.10_多线程(多线程程序实现的方式3)(了解)</h3><ul><li><p>提交的是Callable</p></li><li><pre><code>  // 创建线程池对象  ExecutorService pool = Executors.newFixedThreadPool(2);  // 可以执行Runnable对象或者Callable对象代表的线程  Future&lt;Integer&gt; f1 = pool.submit(new MyCallable(100));  Future&lt;Integer&gt; f2 = pool.submit(new MyCallable(200));  // V get()  Integer i1 = f1.get();  Integer i2 = f2.get();  System.out.println(i1);  System.out.println(i2);  // 结束  pool.shutdown();  public class MyCallable implements Callable&lt;Integer&gt; &#123;      private int number;      public MyCallable(int number) &#123;          this.number = number;      &#125;      @Override      public Integer call() throws Exception &#123;          int sum = 0;          for (int x = 1; x &lt;= number; x++) &#123;              sum += x;          &#125;          return sum;      &#125;  &#125;</code></pre></li><li><p>多线程程序实现的方式3的好处和弊端</p><ul><li><p>好处：</p><ul><li>可以有返回值</li><li>可以抛出异常</li></ul></li><li><p>弊端：</p><ul><li>代码比较复杂，所以一般不用</li></ul></li></ul></li></ul><h3 id="25-11-设计模式-简单工厂模式概述和使用-了解"><a href="#25-11-设计模式-简单工厂模式概述和使用-了解" class="headerlink" title="25.11_设计模式(简单工厂模式概述和使用)(了解)"></a>25.11_设计模式(简单工厂模式概述和使用)(了解)</h3><ul><li><p>A:简单工厂模式概述</p><ul><li>又叫静态工厂方法模式，它定义一个具体的工厂类负责创建一些类的实例</li></ul></li><li><p>B:优点</p><ul><li>客户端不需要在负责对象的创建，从而明确了各个类的职责</li></ul></li><li><p>C:缺点</p><ul><li>这个静态工厂类负责所有对象的创建，如果有新的对象增加，或者某些对象的创建方式不同，就需要不断的修改工厂类，不利于后期的维护</li></ul></li><li><p>D:案例演示</p><ul><li>动物抽象类：public abstract Animal { public abstract void eat(); }</li><li>具体狗类：public class Dog extends Animal {}</li><li>具体猫类：public class Cat extends Animal {}</li><li>开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。</li></ul></li><li><pre><code>  public class AnimalFactory &#123;      private AnimalFactory()&#123;&#125;      //public static Dog createDog() &#123;return new Dog();&#125;      //public static Cat createCat() &#123;return new Cat();&#125;      //改进      public static Animal createAnimal(String animalName) &#123;          if(“dog”.equals(animalName)) &#123;&#125;          else if(“cat”.equals(animale)) &#123;          &#125;else &#123;              return null;          &#125;      &#125;  &#125; </code></pre><h3 id="25-12-设计模式-工厂方法模式的概述和使用-了解"><a href="#25-12-设计模式-工厂方法模式的概述和使用-了解" class="headerlink" title="25.12_设计模式(工厂方法模式的概述和使用)(了解)"></a>25.12_设计模式(工厂方法模式的概述和使用)(了解)</h3></li><li><p>A:工厂方法模式概述</p><ul><li>工厂方法模式中抽象工厂类负责定义创建对象的接口，具体对象的创建工作由继承抽象工厂的具体类实现。</li></ul></li><li><p>B:优点</p><ul><li>客户端不需要在负责对象的创建，从而明确了各个类的职责，如果有新的对象增加，只需要增加一个具体的类和具体的工厂类即可，不影响已有的代码，后期维护容易，增强了系统的扩展性</li></ul></li><li><p>C:缺点</p><ul><li>需要额外的编写代码，增加了工作量</li></ul></li><li><p>D:案例演示</p></li><li><pre><code>  动物抽象类：public abstract Animal &#123; public abstract void eat(); &#125;  工厂接口：public interface Factory &#123;public abstract Animal createAnimal();&#125;  具体狗类：public class Dog extends Animal &#123;&#125;  具体猫类：public class Cat extends Animal &#123;&#125;  开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。发现每次修改代码太麻烦，用工厂方法改进，针对每一个具体的实现提供一个具体工厂。  狗工厂：public class DogFactory implements Factory &#123;      public Animal createAnimal() &#123;…&#125;          &#125;  猫工厂：public class CatFactory implements Factory &#123;      public Animal createAnimal() &#123;…&#125;          &#125;  </code></pre></li></ul><h3 id="25-13-GUI-如何创建一个窗口并显示"><a href="#25-13-GUI-如何创建一个窗口并显示" class="headerlink" title="25.13_GUI(如何创建一个窗口并显示)"></a>25.13_GUI(如何创建一个窗口并显示)</h3><ul><li>Graphical User Interface(图形用户接口)。</li><li><pre><code>  Frame  f = new Frame(“my window”);  f.setLayout(new FlowLayout());//设置布局管理器  f.setSize(500,400);//设置窗体大小  f.setLocation(300,200);//设置窗体出现在屏幕的位置  f.setIconImage(Toolkit.getDefaultToolkit().createImage(&quot;qq.png&quot;));  f.setVisible(true);</code></pre></li></ul><h3 id="25-14-GUI-布局管理器"><a href="#25-14-GUI-布局管理器" class="headerlink" title="25.14_GUI(布局管理器)"></a>25.14_GUI(布局管理器)</h3><ul><li>FlowLayout（流式布局管理器）<ul><li>从左到右的顺序排列。</li><li>Panel默认的布局管理器。</li></ul></li><li>BorderLayout（边界布局管理器）<ul><li>东，南，西，北，中</li><li>Frame默认的布局管理器。</li></ul></li><li>GridLayout（网格布局管理器）<ul><li>规则的矩阵</li></ul></li><li>CardLayout（卡片布局管理器）<ul><li>选项卡</li></ul></li><li>GridBagLayout（网格包布局管理器）<ul><li>非规则的矩阵<h3 id="25-15-GUI-窗体监听"><a href="#25-15-GUI-窗体监听" class="headerlink" title="25.15_GUI(窗体监听)"></a>25.15_GUI(窗体监听)</h3>Frame f = new Frame(“我的窗体”);<br>//事件源是窗体,把监听器注册到事件源上<br>//事件对象传递给监听器<br>f.addWindowListener(new WindowAdapter() {<pre><code>    public void windowClosing(WindowEvent e) &#123;               //退出虚拟机,关闭窗口  System.exit(0);</code></pre>  }<br>});</li></ul></li></ul><h3 id="25-16-GUI-鼠标监听"><a href="#25-16-GUI-鼠标监听" class="headerlink" title="25.16_GUI(鼠标监听)"></a>25.16_GUI(鼠标监听)</h3><h3 id="25-17-GUI-键盘监听和键盘事件"><a href="#25-17-GUI-键盘监听和键盘事件" class="headerlink" title="25.17_GUI(键盘监听和键盘事件)"></a>25.17_GUI(键盘监听和键盘事件)</h3><h3 id="25-18-GUI-动作监听"><a href="#25-18-GUI-动作监听" class="headerlink" title="25.18_GUI(动作监听)"></a>25.18_GUI(动作监听)</h3><h3 id="25-19-设计模式-适配器设计模式-掌握"><a href="#25-19-设计模式-适配器设计模式-掌握" class="headerlink" title="25.19_设计模式(适配器设计模式)(掌握)"></a>25.19_设计模式(适配器设计模式)(掌握)</h3><ul><li>a.什么是适配器<ul><li>在使用监听器的时候, 需要定义一个类事件监听器接口.</li><li>通常接口中有多个方法, 而程序中不一定所有的都用到, 但又必须重写, 这很繁琐.</li><li>适配器简化了这些操作, 我们定义监听器时只要继承适配器, 然后重写需要的方法即可.</li></ul></li><li>b.适配器原理<ul><li>适配器就是一个类, 实现了监听器接口, 所有抽象方法都重写了, 但是方法全是空的.</li><li>适配器类需要定义成抽象的,因为创建该类对象,调用空方法是没有意义的</li><li>目的就是为了简化程序员的操作, 定义监听器时继承适配器, 只重写需要的方法就可以了.<h3 id="25-20-GUI-需要知道的"><a href="#25-20-GUI-需要知道的" class="headerlink" title="25.20_GUI(需要知道的)"></a>25.20_GUI(需要知道的)</h3></li></ul></li><li>事件处理<ul><li>事件: 用户的一个操作</li><li>事件源: 被操作的组件</li><li>监听器: 一个自定义类的对象, 实现了监听器接口, 包含事件处理方法,把监听器添加在事件源上, 当事件发生的时候虚拟机就会自动调用监听器中的事件处理方法</li></ul></li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li>用自己的语言描述下列问题<blockquote><p>1、多线程两种实现方式</p></blockquote></li></ul><p>(1)继承Thread<br>    * 定义类继承Thread<br>    * 重写run方法<br>    * 把新线程要做的事写在run方法中<br>    * 创建线程对象<br>    * 开启新线程, 内部会自动执行run方法<br>(2)实现Runnable<br>    * 定义类实现Runnable接口<br>    * 实现run方法<br>    * 把新线程要做的事写在run方法中<br>    * 创建自定义的Runnable的子类对象<br>    * 创建Thread对象, 传入Runnable<br>    * 调用start()开启新线程, 内部会自动调用Runnable的run()方法</p><blockquote><p>2、多线程的安全问题及解决方案</p></blockquote><pre><code>问题:当多线程并发, 有多段代码同时执行时,数据会产生错乱。方案:我们希望某一段代码执行的过程中CPU不要切换到其他线程工作. 这时就需要同步。</code></pre><blockquote><p>3、死锁的产生原理</p></blockquote><pre><code>多线程同步的时候, 如果同步代码嵌套, 使用相同锁, 就有可能出现死锁</code></pre><blockquote><p>4、多线程两种实现方式的区别</p></blockquote><ul><li>实现原理:<br>  继承Thread    :    由于子类重写了Thread类的run(), 当调用start()时, 直接找子类的run()方法<br>  实现Runnable:    构造函数中传入了Runnable的引用, 成员变量记住了它, start()调用run()方法时内部判断成员变量Runnable的引用是否为空, 不为空编译时看的是Runnable的run(),运行时执行的是子类的run()方法</li><li>优缺点:<br>  继承Thread    :<pre><code>  好处:    可以直接使用Thread类中的方法,代码简单  弊端:    如果已经有了父类,就不能用这种方法</code></pre>  实现Runnable:<pre><code>  好处:    即使自己定义的线程类有了父类也没关系,因为有了父类也可以实现接口,而且接口是可以多实现的  弊端:    不能直接使用Thread中的方法需要先获取到线程对象后,才能得到Thread的方法,代码复杂</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础24-多线程-上</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8024-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%8A/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8024-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="24-01-多线程-多线程的引入-了解"><a href="#24-01-多线程-多线程的引入-了解" class="headerlink" title="24.01_多线程(多线程的引入)(了解)"></a>24.01_多线程(多线程的引入)(了解)</h2><ul><li>1.什么是线程<ul><li>线程是程序执行的一条路径, 一个进程中可以包含多条线程</li><li>多线程并发执行可以提高程序的效率, 可以同时完成多项工作</li></ul></li><li>2.多线程的应用场景<ul><li>红蜘蛛同时共享屏幕给多个电脑</li><li>迅雷开启多条线程一起下载</li><li>QQ同时和多个人一起视频</li><li>服务器同时处理多个客户端请求</li></ul></li></ul><h3 id="24-02-多线程-多线程并行和并发的区别-了解"><a href="#24-02-多线程-多线程并行和并发的区别-了解" class="headerlink" title="24.02_多线程(多线程并行和并发的区别)(了解)"></a>24.02_多线程(多线程并行和并发的区别)(了解)</h3><ul><li>并行就是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。(需要多核CPU)</li><li>并发是指两个任务都请求运行，而处理器只能按受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务都在运行。</li><li>比如我跟两个网友聊天，左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天，这就叫并行。</li><li>如果用一台电脑我先给甲发个消息，然后立刻再给乙发消息，然后再跟甲聊，再跟乙聊。这就叫并发。</li></ul><h3 id="24-03-多线程-Java程序运行原理和JVM的启动是多线程的吗-了解"><a href="#24-03-多线程-Java程序运行原理和JVM的启动是多线程的吗-了解" class="headerlink" title="24.03_多线程(Java程序运行原理和JVM的启动是多线程的吗)(了解)"></a>24.03_多线程(Java程序运行原理和JVM的启动是多线程的吗)(了解)</h3><ul><li><p>A:Java程序运行原理</p><ul><li>Java命令会启动java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个 “主线程” ，然后主线程去调用某个类的 main 方法。</li></ul></li><li><p>B:JVM的启动是多线程的吗</p><ul><li>JVM启动至少启动了垃圾回收线程和主线程，所以是多线程的。</li></ul></li></ul><h3 id="24-04-多线程-多线程程序实现的方式1-掌握"><a href="#24-04-多线程-多线程程序实现的方式1-掌握" class="headerlink" title="24.04_多线程(多线程程序实现的方式1)(掌握)"></a>24.04_多线程(多线程程序实现的方式1)(掌握)</h3><ul><li><p>1.继承Thread</p><ul><li><p>定义类继承Thread</p></li><li><p>重写run方法</p></li><li><p>把新线程要做的事写在run方法中</p></li><li><p>创建线程对象</p></li><li><p>开启新线程, 内部会自动执行run方法</p></li><li><pre><code>  public class Demo2_Thread &#123;      /**       * @param args       */      public static void main(String[] args) &#123;          MyThread mt = new MyThread();                            //4,创建自定义类的对象          mt.start();                                                //5,开启线程          for(int i = 0; i &lt; 3000; i++) &#123;              System.out.println(&quot;bb&quot;);          &#125;      &#125;  &#125;  class MyThread extends Thread &#123;                                    //1,定义类继承Thread      public void run() &#123;                                            //2,重写run方法          for(int i = 0; i &lt; 3000; i++) &#123;                            //3,将要执行的代码,写在run方法中              System.out.println(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;);          &#125;      &#125;  &#125;</code></pre></li></ul></li></ul><h3 id="24-05-多线程-多线程程序实现的方式2-掌握"><a href="#24-05-多线程-多线程程序实现的方式2-掌握" class="headerlink" title="24.05_多线程(多线程程序实现的方式2)(掌握)"></a>24.05_多线程(多线程程序实现的方式2)(掌握)</h3><ul><li><p>2.实现Runnable</p><ul><li><p>定义类实现Runnable接口</p></li><li><p>实现run方法</p></li><li><p>把新线程要做的事写在run方法中</p></li><li><p>创建自定义的Runnable的子类对象</p></li><li><p>创建Thread对象, 传入Runnable</p></li><li><p>调用start()开启新线程, 内部会自动调用Runnable的run()方法</p><pre><code>  public class Demo3_Runnable &#123;      /**       * @param args       */      public static void main(String[] args) &#123;          MyRunnable mr = new MyRunnable();                        //4,创建自定义类对象          //Runnable target = new MyRunnable();          Thread t = new Thread(mr);                                //5,将其当作参数传递给Thread的构造函数          t.start();                                                //6,开启线程          for(int i = 0; i &lt; 3000; i++) &#123;              System.out.println(&quot;bb&quot;);          &#125;      &#125;  &#125;  class MyRunnable implements Runnable &#123;                            //1,自定义类实现Runnable接口      @Override      public void run() &#123;                                            //2,重写run方法          for(int i = 0; i &lt; 3000; i++) &#123;                            //3,将要执行的代码,写在run方法中              System.out.println(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;);          &#125;      &#125;  &#125;</code></pre></li></ul></li></ul><h3 id="24-06-多线程-实现Runnable的原理-了解"><a href="#24-06-多线程-实现Runnable的原理-了解" class="headerlink" title="24.06_多线程(实现Runnable的原理)(了解)"></a>24.06_多线程(实现Runnable的原理)(了解)</h3><ul><li>查看源码<ul><li>1,看Thread类的构造函数,传递了Runnable接口的引用 </li><li>2,通过init()方法找到传递的target给成员变量的target赋值</li><li>3,查看run方法,发现run方法中有判断,如果target不为null就会调用Runnable接口子类对象的run方法</li></ul></li></ul><h3 id="24-07-多线程-两种方式的区别-掌握"><a href="#24-07-多线程-两种方式的区别-掌握" class="headerlink" title="24.07_多线程(两种方式的区别)(掌握)"></a>24.07_多线程(两种方式的区别)(掌握)</h3><ul><li><p>查看源码的区别:</p><ul><li>a.继承Thread : 由于子类重写了Thread类的run(), 当调用start()时, 直接找子类的run()方法</li><li>b.实现Runnable : 构造函数中传入了Runnable的引用, 成员变量记住了它,<br>start()调用run()方法时内部判断成员变量Runnable的引用是否为空,<br>不为空编译时看的是Runnable的run(),运行时执行的是子类的run()方法</li></ul></li><li><p>继承Thread</p><ul><li>好处是:可以直接使用Thread类中的方法,代码简单</li><li>弊端是:如果已经有了父类,就不能用这种方法</li></ul></li><li><p>实现Runnable接口</p><ul><li>好处是:即使自己定义的线程类有了父类也没关系,因为有了父类也可以实现接口,而且接口是可以多实现的</li><li>弊端是:不能直接使用Thread中的方法需要先获取到线程对象后,才能得到Thread的方法,代码复杂<h3 id="24-08-多线程-匿名内部类实现线程的两种方式-掌握"><a href="#24-08-多线程-匿名内部类实现线程的两种方式-掌握" class="headerlink" title="24.08_多线程(匿名内部类实现线程的两种方式)(掌握)"></a>24.08_多线程(匿名内部类实现线程的两种方式)(掌握)</h3></li></ul></li><li><p>继承Thread类</p><pre><code>  new Thread() &#123;                                                    //1,new 类()&#123;&#125;继承这个类      public void run() &#123;                                            //2,重写run方法          for(int i = 0; i &lt; 3000; i++) &#123;                            //3,将要执行的代码,写在run方法中              System.out.println(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;);          &#125;      &#125;  &#125;.start();</code></pre></li><li><p>实现Runnable接口</p><pre><code>  new Thread(new Runnable()&#123;                                        //1,new 接口()&#123;&#125;实现这个接口      public void run() &#123;                                            //2,重写run方法          for(int i = 0; i &lt; 3000; i++) &#123;                            //3,将要执行的代码,写在run方法中              System.out.println(&quot;bb&quot;);          &#125;      &#125;  &#125;).start(); </code></pre></li></ul><h3 id="24-09-多线程-获取名字和设置名字-掌握"><a href="#24-09-多线程-获取名字和设置名字-掌握" class="headerlink" title="24.09_多线程(获取名字和设置名字)(掌握)"></a>24.09_多线程(获取名字和设置名字)(掌握)</h3><ul><li><p>1.获取名字</p><ul><li>通过getName()方法获取线程对象的名字</li></ul></li><li><p>2.设置名字</p><ul><li><p>通过构造函数可以传入String类型的名字</p></li><li><pre><code>  new Thread(&quot;xxx&quot;) &#123;      public void run() &#123;          for(int i = 0; i &lt; 1000; i++) &#123;              System.out.println(this.getName() + &quot;....aaaaaaaaaaaaaaaaaaaaaaa&quot;);          &#125;      &#125;  &#125;.start();  new Thread(&quot;yyy&quot;) &#123;      public void run() &#123;          for(int i = 0; i &lt; 1000; i++) &#123;              System.out.println(this.getName() + &quot;....bb&quot;);          &#125;      &#125;  &#125;.start(); </code></pre></li><li><p>通过setName(String)方法可以设置线程对象的名字</p></li><li><pre><code>  Thread t1 = new Thread() &#123;      public void run() &#123;          for(int i = 0; i &lt; 1000; i++) &#123;              System.out.println(this.getName() + &quot;....aaaaaaaaaaaaaaaaaaaaaaa&quot;);          &#125;      &#125;  &#125;;  Thread t2 = new Thread() &#123;      public void run() &#123;          for(int i = 0; i &lt; 1000; i++) &#123;              System.out.println(this.getName() + &quot;....bb&quot;);          &#125;      &#125;  &#125;;  t1.setName(&quot;芙蓉姐姐&quot;);  t2.setName(&quot;凤姐&quot;);  t1.start();  t2.start();</code></pre></li></ul></li></ul><h3 id="24-10-多线程-获取当前线程的对象-掌握"><a href="#24-10-多线程-获取当前线程的对象-掌握" class="headerlink" title="24.10_多线程(获取当前线程的对象)(掌握)"></a>24.10_多线程(获取当前线程的对象)(掌握)</h3><ul><li><p>Thread.currentThread(), 主线程也可以获取</p><ul><li><pre><code>  new Thread(new Runnable() &#123;      public void run() &#123;          for(int i = 0; i &lt; 1000; i++) &#123;              System.out.println(Thread.currentThread().getName() + &quot;...aaaaaaaaaaaaaaaaaaaaa&quot;);          &#125;      &#125;  &#125;).start();  new Thread(new Runnable() &#123;      public void run() &#123;          for(int i = 0; i &lt; 1000; i++) &#123;              System.out.println(Thread.currentThread().getName() + &quot;...bb&quot;);          &#125;      &#125;  &#125;).start();  Thread.currentThread().setName(&quot;我是主线程&quot;);                    //获取主函数线程的引用,并改名字  System.out.println(Thread.currentThread().getName());        //获取主函数线程的引用,并获取名字</code></pre><h3 id="24-11-多线程-休眠线程-掌握"><a href="#24-11-多线程-休眠线程-掌握" class="headerlink" title="24.11_多线程(休眠线程)(掌握)"></a>24.11_多线程(休眠线程)(掌握)</h3></li></ul></li><li><p>Thread.sleep(毫秒,纳秒), 控制当前线程休眠若干毫秒1秒= 1000毫秒 1秒 = 1000 * 1000 * 1000纳秒 1000000000</p><pre><code>      new Thread() &#123;          public void run() &#123;              for(int i = 0; i &lt; 10; i++) &#123;                  System.out.println(getName() + &quot;...aaaaaaaaaaaaaaaaaaaaaa&quot;);                  try &#123;                      Thread.sleep(10);                  &#125; catch (InterruptedException e) &#123;                      e.printStackTrace();                  &#125;              &#125;          &#125;      &#125;.start();      new Thread() &#123;          public void run() &#123;              for(int i = 0; i &lt; 10; i++) &#123;                  System.out.println(getName() + &quot;...bb&quot;);                  try &#123;                      Thread.sleep(10);                  &#125; catch (InterruptedException e) &#123;                      e.printStackTrace();                  &#125;              &#125;          &#125;      &#125;.start();</code></pre><h3 id="24-12-多线程-守护线程-掌握"><a href="#24-12-多线程-守护线程-掌握" class="headerlink" title="24.12_多线程(守护线程)(掌握)"></a>24.12_多线程(守护线程)(掌握)</h3></li><li><p>setDaemon(), 设置一个线程为守护线程, 该线程不会单独执行, 当其他非守护线程都执行结束后, 自动退出</p><ul><li><pre><code>  Thread t1 = new Thread() &#123;      public void run() &#123;          for(int i = 0; i &lt; 50; i++) &#123;              System.out.println(getName() + &quot;...aaaaaaaaaaaaaaaaaaaaaa&quot;);              try &#123;                  Thread.sleep(10);              &#125; catch (InterruptedException e) &#123;                  e.printStackTrace();              &#125;          &#125;      &#125;  &#125;;  Thread t2 = new Thread() &#123;      public void run() &#123;          for(int i = 0; i &lt; 5; i++) &#123;              System.out.println(getName() + &quot;...bb&quot;);              try &#123;                  Thread.sleep(10);              &#125; catch (InterruptedException e) &#123;                  e.printStackTrace();              &#125;          &#125;      &#125;  &#125;;  t1.setDaemon(true);                        //将t1设置为守护线程  t1.start();  t2.start();</code></pre><h3 id="24-13-多线程-加入线程-掌握"><a href="#24-13-多线程-加入线程-掌握" class="headerlink" title="24.13_多线程(加入线程)(掌握)"></a>24.13_多线程(加入线程)(掌握)</h3></li></ul></li><li><p>join(), 当前线程暂停, 等待指定的线程执行结束后, 当前线程再继续</p></li><li><p>join(int), 可以等待指定的毫秒之后继续</p><ul><li><pre><code>  final Thread t1 = new Thread() &#123;      public void run() &#123;          for(int i = 0; i &lt; 50; i++) &#123;              System.out.println(getName() + &quot;...aaaaaaaaaaaaaaaaaaaaaa&quot;);              try &#123;                  Thread.sleep(10);              &#125; catch (InterruptedException e) &#123;                  e.printStackTrace();              &#125;          &#125;      &#125;  &#125;;  Thread t2 = new Thread() &#123;      public void run() &#123;          for(int i = 0; i &lt; 50; i++) &#123;              if(i == 2) &#123;                  try &#123;                      //t1.join();                        //插队,加入                      t1.join(30);                        //加入,有固定的时间,过了固定时间,继续交替执行                      Thread.sleep(10);                  &#125; catch (InterruptedException e) &#123;                      e.printStackTrace();                  &#125;              &#125;              System.out.println(getName() + &quot;...bb&quot;);          &#125;      &#125;  &#125;;  t1.start();  t2.start();</code></pre><h3 id="24-14-多线程-礼让线程-了解"><a href="#24-14-多线程-礼让线程-了解" class="headerlink" title="24.14_多线程(礼让线程)(了解)"></a>24.14_多线程(礼让线程)(了解)</h3></li></ul></li><li><p>yield让出cpu</p></li></ul><h3 id="24-15-多线程-设置线程的优先级-了解"><a href="#24-15-多线程-设置线程的优先级-了解" class="headerlink" title="24.15_多线程(设置线程的优先级)(了解)"></a>24.15_多线程(设置线程的优先级)(了解)</h3><ul><li>setPriority()设置线程的优先级</li></ul><h3 id="24-16-多线程-同步代码块-掌握"><a href="#24-16-多线程-同步代码块-掌握" class="headerlink" title="24.16_多线程(同步代码块)(掌握)"></a>24.16_多线程(同步代码块)(掌握)</h3><ul><li><p>1.什么情况下需要同步</p><ul><li>当多线程并发, 有多段代码同时执行时, 我们希望某一段代码执行的过程中CPU不要切换到其他线程工作. 这时就需要同步.</li><li>如果两段代码是同步的, 那么同一时间只能执行一段, 在一段代码没执行结束之前, 不会执行另外一段代码.</li></ul></li><li><p>2.同步代码块</p><ul><li><p>使用synchronized关键字加上一个锁对象来定义一段代码, 这就叫同步代码块</p></li><li><p>多个同步代码块如果使用相同的锁对象, 那么他们就是同步的</p><pre><code>  class Printer &#123;      Demo d = new Demo();      public static void print1() &#123;          synchronized(d)&#123;                //锁对象可以是任意对象,但是被锁的代码需要保证是同一把锁,不能用匿名对象              System.out.print(&quot;黑&quot;);              System.out.print(&quot;马&quot;);              System.out.print(&quot;程&quot;);              System.out.print(&quot;序&quot;);              System.out.print(&quot;员&quot;);              System.out.print(&quot;\r\n&quot;);          &#125;      &#125;      public static void print2() &#123;              synchronized(d)&#123;                  System.out.print(&quot;传&quot;);              System.out.print(&quot;智&quot;);              System.out.print(&quot;播&quot;);              System.out.print(&quot;客&quot;);              System.out.print(&quot;\r\n&quot;);          &#125;      &#125;  &#125;</code></pre><h3 id="24-17-多线程-同步方法-掌握"><a href="#24-17-多线程-同步方法-掌握" class="headerlink" title="24.17_多线程(同步方法)(掌握)"></a>24.17_多线程(同步方法)(掌握)</h3></li></ul></li><li><p>使用synchronized关键字修饰一个方法, 该方法中所有的代码都是同步的</p><pre><code>  class Printer &#123;      public static void print1() &#123;          synchronized(Printer.class)&#123;                //锁对象可以是任意对象,但是被锁的代码需要保证是同一把锁,不能用匿名对象              System.out.print(&quot;黑&quot;);              System.out.print(&quot;马&quot;);              System.out.print(&quot;程&quot;);              System.out.print(&quot;序&quot;);              System.out.print(&quot;员&quot;);              System.out.print(&quot;\r\n&quot;);          &#125;      &#125;      /*       * 非静态同步函数的锁是:this       * 静态的同步函数的锁是:字节码对象       */      public static synchronized void print2() &#123;              System.out.print(&quot;传&quot;);          System.out.print(&quot;智&quot;);          System.out.print(&quot;播&quot;);          System.out.print(&quot;客&quot;);          System.out.print(&quot;\r\n&quot;);      &#125;  &#125;</code></pre></li></ul><h3 id="24-18-多线程-线程安全问题-掌握"><a href="#24-18-多线程-线程安全问题-掌握" class="headerlink" title="24.18_多线程(线程安全问题)(掌握)"></a>24.18_多线程(线程安全问题)(掌握)</h3><ul><li><p>多线程并发操作同一数据时, 就有可能出现线程安全问题</p></li><li><p>使用同步技术可以解决这种问题, 把操作数据的代码进行同步, 不要多个线程一起操作</p><pre><code>      public class Demo2_Synchronized &#123;          /**           * @param args           * 需求:铁路售票,一共100张,通过四个窗口卖完.           */          public static void main(String[] args) &#123;              TicketsSeller t1 = new TicketsSeller();              TicketsSeller t2 = new TicketsSeller();              TicketsSeller t3 = new TicketsSeller();              TicketsSeller t4 = new TicketsSeller();              t1.setName(&quot;窗口1&quot;);              t2.setName(&quot;窗口2&quot;);              t3.setName(&quot;窗口3&quot;);              t4.setName(&quot;窗口4&quot;);              t1.start();              t2.start();              t3.start();              t4.start();          &#125;      &#125;      class TicketsSeller extends Thread &#123;          private static int tickets = 100;          static Object obj = new Object();          public TicketsSeller() &#123;              super();          &#125;          public TicketsSeller(String name) &#123;              super(name);          &#125;          public void run() &#123;              while(true) &#123;                  synchronized(obj) &#123;                      if(tickets &lt;= 0)                           break;                      try &#123;                          Thread.sleep(10);//线程1睡,线程2睡,线程3睡,线程4睡                      &#125; catch (InterruptedException e) &#123;                          e.printStackTrace();                      &#125;                      System.out.println(getName() + &quot;...这是第&quot; + tickets-- + &quot;号票&quot;);                  &#125;              &#125;          &#125;      &#125;</code></pre></li></ul><h3 id="24-19-多线程-火车站卖票的例子用实现Runnable接口-掌握"><a href="#24-19-多线程-火车站卖票的例子用实现Runnable接口-掌握" class="headerlink" title="24.19_多线程(火车站卖票的例子用实现Runnable接口)(掌握)"></a>24.19_多线程(火车站卖票的例子用实现Runnable接口)(掌握)</h3><h3 id="24-20-多线程-死锁-了解"><a href="#24-20-多线程-死锁-了解" class="headerlink" title="24.20_多线程(死锁)(了解)"></a>24.20_多线程(死锁)(了解)</h3><ul><li><p>多线程同步的时候, 如果同步代码嵌套, 使用相同锁, 就有可能出现死锁</p><ul><li><p>尽量不要嵌套使用</p><pre><code>  private static String s1 = &quot;筷子左&quot;;  private static String s2 = &quot;筷子右&quot;;  public static void main(String[] args) &#123;      new Thread() &#123;          public void run() &#123;              while(true) &#123;                  synchronized(s1) &#123;                      System.out.println(getName() + &quot;...拿到&quot; + s1 + &quot;等待&quot; + s2);                      synchronized(s2) &#123;                          System.out.println(getName() + &quot;...拿到&quot; + s2 + &quot;开吃&quot;);                      &#125;                  &#125;              &#125;          &#125;      &#125;.start();      new Thread() &#123;          public void run() &#123;              while(true) &#123;                  synchronized(s2) &#123;                      System.out.println(getName() + &quot;...拿到&quot; + s2 + &quot;等待&quot; + s1);                      synchronized(s1) &#123;                          System.out.println(getName() + &quot;...拿到&quot; + s1 + &quot;开吃&quot;);                      &#125;                  &#125;              &#125;          &#125;      &#125;.start();  &#125;</code></pre></li></ul></li></ul><h3 id="24-21-多线程-以前的线程安全的类回顾-掌握"><a href="#24-21-多线程-以前的线程安全的类回顾-掌握" class="headerlink" title="24.21_多线程(以前的线程安全的类回顾)(掌握)"></a>24.21_多线程(以前的线程安全的类回顾)(掌握)</h3><ul><li>A:回顾以前说过的线程安全问题<ul><li>看源码：Vector,StringBuffer,Hashtable,Collections.synchroinzed(xxx)</li><li>Vector是线程安全的,ArrayList是线程不安全的</li><li>StringBuffer是线程安全的,StringBuilder是线程不安全的</li><li>Hashtable是线程安全的,HashMap是线程不安全的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础23-递归练习</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8023-%E9%80%92%E5%BD%92%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8023-%E9%80%92%E5%BD%92%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="public-class-Test1"><a href="#public-class-Test1" class="headerlink" title="public class Test1 {"></a>public class Test1 {</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 需求:1,从键盘接收一个文件夹路径,统计该文件夹大小</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 从键盘接收一个文件夹路径</span></span><br><span class="line"><span class="comment"> * 1,创建键盘录入对象</span></span><br><span class="line"><span class="comment"> * 2,定义一个无限循环</span></span><br><span class="line"><span class="comment"> * 3,将键盘录入的结果存储并封装成File对象</span></span><br><span class="line"><span class="comment"> * 4,对File对象判断</span></span><br><span class="line"><span class="comment"> * 5,将文件夹路径对象返回</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * 统计该文件夹大小 </span></span><br><span class="line"><span class="comment"> * 1,定义一个求和变量</span></span><br><span class="line"><span class="comment"> * 2,获取该文件夹下所有的文件和文件夹listFiles();</span></span><br><span class="line"><span class="comment"> * 3,遍历数组</span></span><br><span class="line"><span class="comment"> * 4,判断是文件就计算大小并累加</span></span><br><span class="line"><span class="comment"> * 5,判断是文件夹,递归调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//File dir = new File(&quot;F:\\day06&quot;);</span></span><br><span class="line"><span class="comment">//System.out.println(dir.length());//直接获取文件夹的结果是0</span></span><br><span class="line">File dir = getDir();</span><br><span class="line">System.out.println(getFileLength(dir));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 从键盘接收一个文件夹路径</span></span><br><span class="line"><span class="comment"> * 1,返回值类型File</span></span><br><span class="line"><span class="comment"> * 2,参数列表无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个文件夹路径:&quot;</span>);</span><br><span class="line"><span class="comment">//2,定义一个无限循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//3,将键盘录入的结果存储并封装成File对象</span></span><br><span class="line">String line = sc.nextLine();</span><br><span class="line">File dir = <span class="keyword">new</span> File(line);</span><br><span class="line"><span class="comment">//4,对File对象判断</span></span><br><span class="line"><span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;您录入的文件夹路径不存在,请输入一个文件夹路径:&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dir.isFile()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;您录入的是文件路径,请输入一个文件夹路径:&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//5,将文件夹路径对象返回</span></span><br><span class="line"><span class="keyword">return</span> dir;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 统计该文件夹大小 </span></span><br><span class="line"><span class="comment"> * 1,返回值类型long</span></span><br><span class="line"><span class="comment"> * 2,参数列表File dir</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getFileLength</span><span class="params">(File dir)</span> </span>&#123;<span class="comment">//dir = F:\day06\day07</span></span><br><span class="line"><span class="comment">//1,定义一个求和变量</span></span><br><span class="line"><span class="keyword">long</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//2,获取该文件夹下所有的文件和文件夹listFiles();</span></span><br><span class="line">File[] subFiles = dir.listFiles();<span class="comment">//day07 Demo1_Student.class Demo1_Student.java</span></span><br><span class="line"><span class="comment">//3,遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line"><span class="comment">//4,判断是文件就计算大小并累加</span></span><br><span class="line"><span class="keyword">if</span>(subFile.isFile()) &#123;</span><br><span class="line">len = len + subFile.length();</span><br><span class="line"><span class="comment">//5,判断是文件夹,递归调用</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">len = len + getFileLength(subFile);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Test2"><a href="#Test2" class="headerlink" title="Test2"></a>Test2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:2,从键盘接收一个文件夹路径,删除该文件夹</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 删除该文件夹</span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,获取该文件夹下的所有的文件和文件夹</span></span><br><span class="line"><span class="comment"> * 2,遍历数组</span></span><br><span class="line"><span class="comment"> * 3,判断是文件直接删除</span></span><br><span class="line"><span class="comment"> * 4,如果是文件夹,递归调用</span></span><br><span class="line"><span class="comment"> * 5,循环结束后,把空文件夹删掉</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File dir = Test1.getDir();<span class="comment">//获取文件夹路径</span></span><br><span class="line">deleteFile(dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除该文件夹</span></span><br><span class="line"><span class="comment"> * 1,返回值类型 void</span></span><br><span class="line"><span class="comment"> * 2,参数列表File dir</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,获取该文件夹下的所有的文件和文件夹</span></span><br><span class="line">File[] subFiles = dir.listFiles();</span><br><span class="line"><span class="comment">//2,遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line"><span class="comment">//3,判断是文件直接删除</span></span><br><span class="line"><span class="keyword">if</span>(subFile.isFile()) &#123;</span><br><span class="line">subFile.delete();</span><br><span class="line"><span class="comment">//4,如果是文件夹,递归调用</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">deleteFile(subFile);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5,循环结束后,把空文件夹删掉</span></span><br><span class="line">dir.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:3,从键盘接收两个文件夹路径,把其中一个文件夹中(包含内容)拷贝到另一个文件夹中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 把其中一个文件夹中(包含内容)拷贝到另一个文件夹中</span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,在目标文件夹中创建原文件夹</span></span><br><span class="line"><span class="comment"> * 2,获取原文件夹中所有的文件和文件夹,存储在File数组中</span></span><br><span class="line"><span class="comment"> * 3,遍历数组</span></span><br><span class="line"><span class="comment"> * 4,如果是文件就用io流读写</span></span><br><span class="line"><span class="comment"> * 5,如果是文件夹就递归调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File src = Test1.getDir();</span><br><span class="line">File dest = Test1.getDir();</span><br><span class="line"><span class="keyword">if</span>(src.equals(dest)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;目标文件夹是源文件夹的子文件夹&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">copy(src,dest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 把其中一个文件夹中(包含内容)拷贝到另一个文件夹中</span></span><br><span class="line"><span class="comment"> * 1,返回值类型void</span></span><br><span class="line"><span class="comment"> * 2,参数列表File src,File dest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(File src, File dest)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1,在目标文件夹中创建原文件夹</span></span><br><span class="line">File newDir = <span class="keyword">new</span> File(dest, src.getName());</span><br><span class="line">newDir.mkdir();</span><br><span class="line"><span class="comment">//2,获取原文件夹中所有的文件和文件夹,存储在File数组中</span></span><br><span class="line">File[] subFiles = src.listFiles();</span><br><span class="line"><span class="comment">//3,遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line"><span class="comment">//4,如果是文件就用io流读写</span></span><br><span class="line"><span class="keyword">if</span>(subFile.isFile()) &#123;</span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(subFile));</span><br><span class="line">BufferedOutputStream bos = </span><br><span class="line"><span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(newDir,subFile.getName())));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span>((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bis.close();</span><br><span class="line">bos.close();</span><br><span class="line"><span class="comment">//5,如果是文件夹就递归调用</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">copy(subFile,newDir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Test4"><a href="#Test4" class="headerlink" title="Test4"></a>Test4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:4,从键盘接收一个文件夹路径,把文件夹中的所有文件以及文件夹的名字按层级打印, 例如:</span></span><br><span class="line"><span class="comment"> * 把文件夹中的所有文件以及文件夹的名字按层级打印</span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,获取所有文件和文件夹,返回的File数组</span></span><br><span class="line"><span class="comment"> * 2,遍历数组</span></span><br><span class="line"><span class="comment"> * 3,无论是文件还是文件夹,都需要直接打印</span></span><br><span class="line"><span class="comment"> * 4,如果是文件夹,递归调用</span></span><br><span class="line"><span class="comment"> * day07</span></span><br><span class="line"><span class="comment"> * day08</span></span><br><span class="line"><span class="comment"> * xxx.jpg</span></span><br><span class="line"><span class="comment"> * yyy.txt</span></span><br><span class="line"><span class="comment"> * Demo1_Consturctor.class</span></span><br><span class="line"><span class="comment"> * Demo1_Consturctor.java</span></span><br><span class="line"><span class="comment"> * Demo1_Student.class</span></span><br><span class="line"><span class="comment"> * Demo1_Student.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File dir = Test1.getDir();<span class="comment">//获取文件夹路径</span></span><br><span class="line">printLev(dir,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLev</span><span class="params">(File dir,<span class="keyword">int</span> lev)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,把文件夹中的所有文件以及文件夹的名字按层级打印</span></span><br><span class="line">File[] subFiles = dir.listFiles();</span><br><span class="line"><span class="comment">//2,遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lev; i++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3,无论是文件还是文件夹,都需要直接打印</span></span><br><span class="line">System.out.println(subFile);</span><br><span class="line"><span class="comment">//4,如果是文件夹,递归调用</span></span><br><span class="line"><span class="keyword">if</span>(subFile.isDirectory()) &#123;</span><br><span class="line"><span class="comment">//printLev(subFile,lev + 1);</span></span><br><span class="line">printLev(subFile,++lev);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Test5"><a href="#Test5" class="headerlink" title="Test5"></a>Test5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * 不死神兔</span></span><br><span class="line"><span class="comment">* 故事得从西元1202年说起，话说有一位意大利青年，名叫斐波那契。</span></span><br><span class="line"><span class="comment">* 在他的一部著作中提出了一个有趣的问题：假设一对刚出生的小兔一个月后就能长成大兔，再过一个月就能生下一对小兔，并且此后每个月都生一对小兔，一年内没有发生死亡，</span></span><br><span class="line"><span class="comment">* 问：一对刚出生的兔子，一年内繁殖成多少对兔子?</span></span><br><span class="line"><span class="comment">* 1 1 2 3 5 8 13 21</span></span><br><span class="line"><span class="comment">* 1 = fun(1)</span></span><br><span class="line"><span class="comment">* 1 = fun(2)</span></span><br><span class="line"><span class="comment">* 2 = fun(1) + fun(2)</span></span><br><span class="line"><span class="comment">* 3 = fun(2) + fun(3)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">System.out.println(fun(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//用数组做不死神兔</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"><span class="comment">//数组中第一个元素和第二个元素都为1</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//遍历数组对其他元素赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">2</span>] + arr[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如何获取最后一个数</span></span><br><span class="line">System.out.println(arr[arr.length - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 用递归求斐波那契数列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span> || num == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fun(num - <span class="number">2</span>) + fun(num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Test6"><a href="#Test6" class="headerlink" title="Test6"></a>Test6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> *  需求:求出1000的阶乘所有零和尾部零的个数,不用递归做</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*int result = 1;</span></span><br><span class="line"><span class="comment">for(int i = 1; i &lt;= 1000; i++) &#123;</span></span><br><span class="line"><span class="comment">result = result * i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println(result);//因为1000的阶乘远远超出了int的取值范围</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">demo2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;<span class="comment">//获取1000的阶乘尾部有多少个零</span></span><br><span class="line">BigInteger bi1 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">BigInteger bi2 = <span class="keyword">new</span> BigInteger(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">bi1 = bi1.multiply(bi2);<span class="comment">//将bi1与bi2相乘的结果赋值给bi1</span></span><br><span class="line">&#125;</span><br><span class="line">String str = bi1.toString();<span class="comment">//获取字符串表现形式</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">str = sb.reverse().toString();<span class="comment">//链式编程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//定义计数器</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span> != str.charAt(i)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;<span class="comment">//求1000的阶乘中所有的零</span></span><br><span class="line">BigInteger bi1 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">BigInteger bi2 = <span class="keyword">new</span> BigInteger(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">bi1 = bi1.multiply(bi2);<span class="comment">//将bi1与bi2相乘的结果赋值给bi1</span></span><br><span class="line">&#125;</span><br><span class="line">String str = bi1.toString();<span class="comment">//获取字符串表现形式</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span> == str.charAt(i)) &#123;<span class="comment">//如果字符串中出现了0字符</span></span><br><span class="line">count++;<span class="comment">//计数器加1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Test7"><a href="#Test7" class="headerlink" title="Test7"></a>Test7</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 需求:求出1000的阶乘尾部零的个数,用递归做</span></span><br><span class="line"><span class="comment"> * 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100...1000  1000 / 5 = 200</span></span><br><span class="line"><span class="comment"> * 5 * 55 * 5 * 2 5 * 5 * 35 * 5 * 45 * 5 * 55 * 5 * 6200 / 5 = 40</span></span><br><span class="line"><span class="comment"> * 5 * 5 * 5 * 15 * 5 * 5 * 25 * 5 * 5 * 35 * 5 *  5 * 45 * 5 *  5 * 55 * 5 *  5 * 65 * 5 *  5 * 75 * 5 *  5 * 8</span></span><br><span class="line"><span class="comment">40 / 5 = 8</span></span><br><span class="line"><span class="comment">5 * 5 * 5 * 58 / 5 = 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(fun(<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num / <span class="number">5</span> + fun(num / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Test8"><a href="#Test8" class="headerlink" title="Test8"></a>Test8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 约瑟夫环</span></span><br><span class="line"><span class="comment"> * * 幸运数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(getLucklyNum(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取幸运数字</span></span><br><span class="line"><span class="comment"> * 1,返回值类型int</span></span><br><span class="line"><span class="comment"> * 2,参数列表int num</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLucklyNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//创建集合存储1到num的对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">list.add(i);<span class="comment">//将1到num存储在集合中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//用来数数的,只要是3的倍数就杀人</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; list.size() != <span class="number">1</span>; i++) &#123;<span class="comment">//只要集合中人数超过1,就要不断的杀</span></span><br><span class="line"><span class="keyword">if</span>(i == list.size()) &#123;<span class="comment">//如果i增长到集合最大的索引+1时</span></span><br><span class="line">i = <span class="number">0</span>;<span class="comment">//重新归零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count % <span class="number">3</span> == <span class="number">0</span>) &#123;<span class="comment">//如果是3的倍数</span></span><br><span class="line">list.remove(i--);<span class="comment">//就杀人</span></span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础22-IO其他流-Properties</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8022-IO%E5%85%B6%E4%BB%96%E6%B5%81-Properties/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8022-IO%E5%85%B6%E4%BB%96%E6%B5%81-Properties/</url>
      
        <content type="html"><![CDATA[<h3 id="22-01-IO流-序列流-了解"><a href="#22-01-IO流-序列流-了解" class="headerlink" title="22.01_IO流(序列流)(了解)"></a>22.01_IO流(序列流)(了解)</h3><ul><li><p>1.什么是序列流</p><ul><li>序列流可以把多个字节输入流整合成一个, 从序列流中读取数据时, 将从被整合的第一个流开始读, 读完一个之后继续读第二个, 以此类推.</li></ul></li><li><p>2.使用方式</p><ul><li><p>整合两个: SequenceInputStream(InputStream, InputStream)</p></li><li><pre><code>  FileInputStream fis1 = new FileInputStream(&quot;a.txt&quot;);            //创建输入流对象,关联a.txt  FileInputStream fis2 = new FileInputStream(&quot;b.txt&quot;);            //创建输入流对象,关联b.txt  SequenceInputStream sis = new SequenceInputStream(fis1, fis2);    //将两个流整合成一个流  FileOutputStream fos = new FileOutputStream(&quot;c.txt&quot;);            //创建输出流对象,关联c.txt  int b;  while((b = sis.read()) != -1) &#123;                                    //用整合后的读      fos.write(b);                                                //写到指定文件上  &#125;  sis.close();  fos.close(); </code></pre><h3 id="22-02-IO流-序列流整合多个-了解"><a href="#22-02-IO流-序列流整合多个-了解" class="headerlink" title="22.02_IO流(序列流整合多个)(了解)"></a>22.02_IO流(序列流整合多个)(了解)</h3></li></ul></li><li><p>整合多个: SequenceInputStream(Enumeration)</p></li><li><pre><code>  FileInputStream fis1 = new FileInputStream(&quot;a.txt&quot;);    //创建输入流对象,关联a.txt  FileInputStream fis2 = new FileInputStream(&quot;b.txt&quot;);    //创建输入流对象,关联b.txt  FileInputStream fis3 = new FileInputStream(&quot;c.txt&quot;);    //创建输入流对象,关联c.txt  Vector&lt;InputStream&gt; v = new Vector&lt;&gt;();                    //创建vector集合对象  v.add(fis1);                                            //将流对象添加  v.add(fis2);  v.add(fis3);  Enumeration&lt;InputStream&gt; en = v.elements();                //获取枚举引用  SequenceInputStream sis = new SequenceInputStream(en);    //传递给SequenceInputStream构造  FileOutputStream fos = new FileOutputStream(&quot;d.txt&quot;);  int b;  while((b = sis.read()) != -1) &#123;      fos.write(b);  &#125;  sis.close();  fos.close();</code></pre></li></ul><h3 id="22-03-IO流-内存输出流-掌握"><a href="#22-03-IO流-内存输出流-掌握" class="headerlink" title="22.03_IO流(内存输出流*****)(掌握)"></a>22.03_IO流(内存输出流*****)(掌握)</h3><ul><li><p>1.什么是内存输出流</p><ul><li>该输出流可以向内存中写数据, 把内存当作一个缓冲区, 写出之后可以一次性获取出所有数据</li></ul></li><li><p>2.使用方式</p><ul><li><p>创建对象: new ByteArrayOutputStream()</p></li><li><p>写出数据: write(int), write(byte[])</p></li><li><p>获取数据: toByteArray()</p></li><li><pre><code>  FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);  ByteArrayOutputStream baos = new ByteArrayOutputStream();  int b;  while((b = fis.read()) != -1) &#123;      baos.write(b);  &#125;  //byte[] newArr = baos.toByteArray();                //将内存缓冲区中所有的字节存储在newArr中  //System.out.println(new String(newArr));  System.out.println(baos);  fis.close();</code></pre><h3 id="22-04-IO流-内存输出流之黑马面试题-掌握"><a href="#22-04-IO流-内存输出流之黑马面试题-掌握" class="headerlink" title="22.04_IO流(内存输出流之黑马面试题)(掌握)"></a>22.04_IO流(内存输出流之黑马面试题)(掌握)</h3></li></ul></li><li><p>定义一个文件输入流,调用read(byte[] b)方法,将a.txt文件中的内容打印出来(byte数组大小限制为5)</p></li><li><pre><code>      FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);                //创建字节输入流,关联a.txt      ByteArrayOutputStream baos = new ByteArrayOutputStream();        //创建内存输出流      byte[] arr = new byte[5];                                        //创建字节数组,大小为5      int len;      while((len = fis.read(arr)) != -1) &#123;                            //将文件上的数据读到字节数组中          baos.write(arr, 0, len);                                    //将字节数组的数据写到内存缓冲区中      &#125;      System.out.println(baos);                                        //将内存缓冲区的内容转换为字符串打印      fis.close();</code></pre><h3 id="22-05-IO流-随机访问流概述和读写数据-了解"><a href="#22-05-IO流-随机访问流概述和读写数据-了解" class="headerlink" title="22.05_IO流(随机访问流概述和读写数据)(了解)"></a>22.05_IO流(随机访问流概述和读写数据)(了解)</h3></li><li><p>A:随机访问流概述</p><ul><li>RandomAccessFile概述</li><li>RandomAccessFile类不属于流，是Object类的子类。但它融合了InputStream和OutputStream的功能。</li><li>支持对随机访问文件的读取和写入。</li></ul></li><li><p>B:read(),write(),seek()</p></li></ul><h3 id="22-06-IO流-对象操作流ObjecOutputStream-了解"><a href="#22-06-IO流-对象操作流ObjecOutputStream-了解" class="headerlink" title="22.06_IO流(对象操作流ObjecOutputStream)(了解)"></a>22.06_IO流(对象操作流ObjecOutputStream)(了解)</h3><ul><li><p>1.什么是对象操作流</p><ul><li>该流可以将一个对象写出, 或者读取一个对象到程序中. 也就是执行了序列化和反序列化的操作.</li></ul></li><li><p>2.使用方式</p><ul><li><p>写出: new ObjectOutputStream(OutputStream), writeObject()</p><pre><code>  public class Demo3_ObjectOutputStream &#123;      /**       * @param args       * @throws IOException        * 将对象写出,序列化       */      public static void main(String[] args) throws IOException &#123;          Person p1 = new Person(&quot;张三&quot;, 23);          Person p2 = new Person(&quot;李四&quot;, 24);  //        FileOutputStream fos = new FileOutputStream(&quot;e.txt&quot;);  //        fos.write(p1);  //        FileWriter fw = new FileWriter(&quot;e.txt&quot;);  //        fw.write(p1);          //无论是字节输出流,还是字符输出流都不能直接写出对象          ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;e.txt&quot;));//创建对象输出流          oos.writeObject(p1);          oos.writeObject(p2);          oos.close();      &#125;  &#125;</code></pre><h3 id="22-07-IO流-对象操作流ObjectInputStream-了解"><a href="#22-07-IO流-对象操作流ObjectInputStream-了解" class="headerlink" title="22.07_IO流(对象操作流ObjectInputStream)(了解)"></a>22.07_IO流(对象操作流ObjectInputStream)(了解)</h3></li></ul></li><li><p>读取: new ObjectInputStream(InputStream), readObject()</p><ul><li><pre><code>  public class Demo3_ObjectInputStream &#123;      /**       * @param args       * @throws IOException        * @throws ClassNotFoundException        * @throws FileNotFoundException        * 读取对象,反序列化       */      public static void main(String[] args) throws IOException, ClassNotFoundException &#123;          ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;e.txt&quot;));          Person p1 = (Person) ois.readObject();          Person p2 = (Person) ois.readObject();          System.out.println(p1);          System.out.println(p2);          ois.close();      &#125;  &#125;</code></pre></li></ul></li></ul><h3 id="22-08-IO流-对象操作流优化-了解"><a href="#22-08-IO流-对象操作流优化-了解" class="headerlink" title="22.08_IO流(对象操作流优化)(了解)"></a>22.08_IO流(对象操作流优化)(了解)</h3><p>*　将对象存储在集合中写出</p><pre><code>Person p1 = new Person(&quot;张三&quot;, 23);Person p2 = new Person(&quot;李四&quot;, 24);Person p3 = new Person(&quot;马哥&quot;, 18);Person p4 = new Person(&quot;辉哥&quot;, 20);ArrayList&lt;Person&gt; list = new ArrayList&lt;&gt;();list.add(p1);list.add(p2);list.add(p3);list.add(p4);ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;f.txt&quot;));oos.writeObject(list);                                    //写出集合对象oos.close();</code></pre><ul><li><p>读取到的是一个集合对象</p><pre><code>  ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;f.txt&quot;));      ArrayList&lt;Person&gt; list = (ArrayList&lt;Person&gt;)ois.readObject();    //泛型在运行期会被擦除,索引运行期相当于没有泛型  //想去掉黄色可以加注解              @SuppressWarnings(&quot;unchecked&quot;)      for (Person person : list) &#123;          System.out.println(person);      &#125;  ois.close();</code></pre><h3 id="22-09-IO流-加上id号-了解"><a href="#22-09-IO流-加上id号-了解" class="headerlink" title="22.09_IO流(加上id号)(了解)"></a>22.09_IO流(加上id号)(了解)</h3></li><li><p>注意</p><ul><li>要写出的对象必须实现Serializable接口才能被序列化</li><li>不用必须加id号</li></ul></li></ul><h3 id="22-10-IO流-数据输入输出流-了解"><a href="#22-10-IO流-数据输入输出流-了解" class="headerlink" title="22.10_IO流(数据输入输出流)(了解)"></a>22.10_IO流(数据输入输出流)(了解)</h3><ul><li><p>1.什么是数据输入输出流</p><ul><li>DataInputStream, DataOutputStream可以按照基本数据类型大小读写数据</li><li>例如按Long大小写出一个数字, 写出时该数据占8字节. 读取的时候也可以按照Long类型读取, 一次读取8个字节.</li></ul></li><li><p>2.使用方式</p><ul><li><p>DataOutputStream(OutputStream), writeInt(), writeLong() </p><pre><code>  DataOutputStream dos = new DataOutputStream(new FileOutputStream(&quot;b.txt&quot;));  dos.writeInt(997);  dos.writeInt(998);  dos.writeInt(999);  dos.close();</code></pre></li><li><p>DataInputStream(InputStream), readInt(), readLong()</p><pre><code>  DataInputStream dis = new DataInputStream(new FileInputStream(&quot;b.txt&quot;));  int x = dis.readInt();  int y = dis.readInt();  int z = dis.readInt();  System.out.println(x);  System.out.println(y);  System.out.println(z);  dis.close();</code></pre></li></ul></li></ul><h3 id="22-11-IO流-打印流的概述和特点-掌握"><a href="#22-11-IO流-打印流的概述和特点-掌握" class="headerlink" title="22.11_IO流(打印流的概述和特点)(掌握)"></a>22.11_IO流(打印流的概述和特点)(掌握)</h3><ul><li><p>1.什么是打印流</p><ul><li><p>该流可以很方便的将对象的toString()结果输出, 并且自动加上换行, 而且可以使用自动刷出的模式</p></li><li><p>System.out就是一个PrintStream, 其默认向控制台输出信息</p><pre><code>  PrintStream ps = System.out;  ps.println(97);                    //其实底层用的是Integer.toString(x),将x转换为数字字符串打印  ps.println(&quot;xxx&quot;);  ps.println(new Person(&quot;张三&quot;, 23));  Person p = null;  ps.println(p);                    //如果是null,就返回null,如果不是null,就调用对象的toString()</code></pre></li></ul></li><li><p>2.使用方式</p><ul><li><p>打印: print(), println()</p></li><li><p>自动刷出: PrintWriter(OutputStream out, boolean autoFlush, String encoding) </p></li><li><p>打印流只操作数据目的</p><pre><code>  PrintWriter pw = new PrintWriter(new FileOutputStream(&quot;g.txt&quot;), true);  pw.write(97);  pw.print(&quot;大家好&quot;);  pw.println(&quot;你好&quot;);                //自动刷出,只针对的是println方法  pw.close();</code></pre></li></ul></li></ul><h3 id="22-12-IO流-标准输入输出流概述和输出语句"><a href="#22-12-IO流-标准输入输出流概述和输出语句" class="headerlink" title="22.12_IO流(标准输入输出流概述和输出语句)"></a>22.12_IO流(标准输入输出流概述和输出语句)</h3><ul><li><p>1.什么是标准输入输出流(掌握)</p><ul><li>System.in是InputStream, 标准输入流, 默认可以从键盘输入读取字节数据</li><li>System.out是PrintStream, 标准输出流, 默认可以向Console中输出字符和字节数据</li></ul></li><li><p>2.修改标准输入输出流(了解)</p><ul><li><p>修改输入流: System.setIn(InputStream)</p></li><li><p>修改输出流: System.setOut(PrintStream)</p></li><li><pre><code>  System.setIn(new FileInputStream(&quot;a.txt&quot;));                //修改标准输入流  System.setOut(new PrintStream(&quot;b.txt&quot;));                //修改标准输出流  InputStream in = System.in;                                //获取标准输入流  PrintStream ps = System.out;                            //获取标准输出流  int b;  while((b = in.read()) != -1) &#123;                            //从a.txt上读取数据      ps.write(b);                                        //将数据写到b.txt上  &#125;  in.close();  ps.close();</code></pre></li></ul></li></ul><h3 id="22-13-IO流-修改标准输入输出流拷贝图片-了解"><a href="#22-13-IO流-修改标准输入输出流拷贝图片-了解" class="headerlink" title="22.13_IO流(修改标准输入输出流拷贝图片)(了解)"></a>22.13_IO流(修改标准输入输出流拷贝图片)(了解)</h3><pre><code>    System.setIn(new FileInputStream(&quot;IO图片.png&quot;));        //改变标准输入流    System.setOut(new PrintStream(&quot;copy.png&quot;));         //改变标准输出流    InputStream is = System.in;                            //获取标准输入流    PrintStream ps = System.out;                        //获取标准输出流    int len;    byte[] arr = new byte[1024 * 8];    while((len = is.read(arr)) != -1) &#123;        ps.write(arr, 0, len);    &#125;    is.close();    ps.close();</code></pre><h3 id="22-14-IO流-两种方式实现键盘录入-了解"><a href="#22-14-IO流-两种方式实现键盘录入-了解" class="headerlink" title="22.14_IO流(两种方式实现键盘录入)(了解)"></a>22.14_IO流(两种方式实现键盘录入)(了解)</h3><ul><li>A:BufferedReader的readLine方法。<ul><li>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</li></ul></li><li>B:Scanner</li></ul><h3 id="22-15-IO流-Properties的概述和作为Map集合的使用-了解"><a href="#22-15-IO流-Properties的概述和作为Map集合的使用-了解" class="headerlink" title="22.15_IO流(Properties的概述和作为Map集合的使用)(了解)"></a>22.15_IO流(Properties的概述和作为Map集合的使用)(了解)</h3><ul><li>A:Properties的概述<ul><li>Properties 类表示了一个持久的属性集。</li><li>Properties 可保存在流中或从流中加载。</li><li>属性列表中每个键及其对应值都是一个字符串。 </li></ul></li><li>B:案例演示<ul><li>Properties作为Map集合的使用</li></ul></li></ul><h3 id="22-16-IO流-Properties的特殊功能使用-了解"><a href="#22-16-IO流-Properties的特殊功能使用-了解" class="headerlink" title="22.16_IO流(Properties的特殊功能使用)(了解)"></a>22.16_IO流(Properties的特殊功能使用)(了解)</h3><ul><li>A:Properties的特殊功能<ul><li>public Object setProperty(String key,String value)</li><li>public String getProperty(String key)</li><li>public Enumeration<String> stringPropertyNames()</li></ul></li><li>B:案例演示<ul><li>Properties的特殊功能</li></ul></li></ul><h3 id="22-17-IO流-Properties的load-和store-功能-了解"><a href="#22-17-IO流-Properties的load-和store-功能-了解" class="headerlink" title="22.17_IO流(Properties的load()和store()功能)(了解)"></a>22.17_IO流(Properties的load()和store()功能)(了解)</h3><ul><li>A:Properties的load()和store()功能</li><li>B:案例演示<ul><li>Properties的load()和store()功能</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础21-IO字符流</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8021-IO%E5%AD%97%E7%AC%A6%E6%B5%81/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8021-IO%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="21-01-IO流-字符流FileReader"><a href="#21-01-IO流-字符流FileReader" class="headerlink" title="21.01_IO流(字符流FileReader)"></a>21.01_IO流(字符流FileReader)</h2><ul><li><p>1.字符流是什么</p><ul><li>字符流是可以直接读写字符的IO流</li><li>字符流读取字符, 就要先读取到字节数据, 然后转为字符. 如果要写出字符, 需要把字符转为字节再写出.    </li></ul></li><li><p>2.FileReader</p><ul><li>FileReader类的read()方法可以按照字符大小读取</li></ul></li><li><pre><code>  FileReader fr = new FileReader(&quot;aaa.txt&quot;);                //创建输入流对象,关联aaa.txt  int ch;  while((ch = fr.read()) != -1) &#123;                            //将读到的字符赋值给ch      System.out.println((char)ch);                        //将读到的字符强转后打印  &#125;  fr.close();                                                //关流 </code></pre></li></ul><h2 id="21-02-IO流-字符流FileWriter"><a href="#21-02-IO流-字符流FileWriter" class="headerlink" title="21.02_IO流(字符流FileWriter)"></a>21.02_IO流(字符流FileWriter)</h2><ul><li><p>FileWriter类的write()方法可以自动把字符转为字节写出</p><pre><code>  FileWriter fw = new FileWriter(&quot;aaa.txt&quot;);  fw.write(&quot;aaa&quot;);  fw.close();</code></pre></li></ul><h2 id="21-03-IO流-字符流的拷贝"><a href="#21-03-IO流-字符流的拷贝" class="headerlink" title="21.03_IO流(字符流的拷贝)"></a>21.03_IO流(字符流的拷贝)</h2><pre><code>FileReader fr = new FileReader(&quot;a.txt&quot;);FileWriter fw = new FileWriter(&quot;b.txt&quot;);int ch;while((ch = fr.read()) != -1) &#123;    fw.write(ch);&#125;fr.close();fw.close();</code></pre><h3 id="21-04-IO流-什么情况下使用字符流"><a href="#21-04-IO流-什么情况下使用字符流" class="headerlink" title="21.04_IO流(什么情况下使用字符流)"></a>21.04_IO流(什么情况下使用字符流)</h3><ul><li>字符流也可以拷贝文本文件, 但不推荐使用. 因为读取时会把字节转为字符, 写出时还要把字符转回字节.</li><li>程序需要读取一段文本, 或者需要写出一段文本的时候可以使用字符流</li><li>读取的时候是按照字符的大小读取的,不会出现半个中文</li><li>写出的时候可以直接将字符串写出,不用转换为字节数组</li></ul><h3 id="21-05-IO流-字符流是否可以拷贝非纯文本的文件"><a href="#21-05-IO流-字符流是否可以拷贝非纯文本的文件" class="headerlink" title="21.05_IO流(字符流是否可以拷贝非纯文本的文件)"></a>21.05_IO流(字符流是否可以拷贝非纯文本的文件)</h3><ul><li>不可以拷贝非纯文本的文件</li><li>因为在读的时候会将字节转换为字符,在转换过程中,可能找不到对应的字符,就会用?代替,写出的时候会将字符转换成字节写出去</li><li>如果是?,直接写出,这样写出之后的文件就乱了,看不了了  </li></ul><h3 id="21-06-IO流-自定义字符数组的拷贝"><a href="#21-06-IO流-自定义字符数组的拷贝" class="headerlink" title="21.06_IO流(自定义字符数组的拷贝)"></a>21.06_IO流(自定义字符数组的拷贝)</h3><ul><li><p>   FileReader fr = new FileReader(“aaa.txt”);            //创建字符输入流,关联aaa.txt<br>   FileWriter fw = new FileWriter(“bbb.txt”);            //创建字符输出流,关联bbb.txt</p><p>   int len;<br>   char[] arr = new char[1024*8];                        //创建字符数组<br>   while((len = fr.read(arr)) != -1) {                    //将数据读到字符数组中</p><pre><code>   fw.write(arr, 0, len);                            //从字符数组将数据写到文件上</code></pre><p>   }</p><p>   fr.close();                                            //关流释放资源<br>   fw.close();    </p></li></ul><h3 id="21-07-IO流-带缓冲的字符流"><a href="#21-07-IO流-带缓冲的字符流" class="headerlink" title="21.07_IO流(带缓冲的字符流)"></a>21.07_IO流(带缓冲的字符流)</h3><ul><li><p>BufferedReader的read()方法读取字符时会一次读取若干字符到缓冲区, 然后逐个返回给程序, 降低读取文件的次数, 提高效率</p></li><li><p>BufferedWriter的write()方法写出字符时会先写到缓冲区, 缓冲区写满时才会写到文件, 降低写文件的次数, 提高效率</p></li><li><pre><code>  BufferedReader br = new BufferedReader(new FileReader(&quot;aaa.txt&quot;));    //创建字符输入流对象,关联aaa.txt  BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;bbb.txt&quot;));    //创建字符输出流对象,关联bbb.txt  int ch;                  while((ch = br.read()) != -1) &#123;        //read一次,会先将缓冲区读满,从缓冲去中一个一个的返给临时变量ch      bw.write(ch);                    //write一次,是将数据装到字符数组,装满后再一起写出去  &#125;  br.close();                            //关流  bw.close();  </code></pre></li></ul><h3 id="21-08-IO流-readLine-和newLine-方法"><a href="#21-08-IO流-readLine-和newLine-方法" class="headerlink" title="21.08_IO流(readLine()和newLine()方法)"></a>21.08_IO流(readLine()和newLine()方法)</h3><ul><li><p>BufferedReader的readLine()方法可以读取一行字符(不包含换行符号)</p></li><li><p>BufferedWriter的newLine()可以输出一个跨平台的换行符号”\r\n”</p></li><li><pre><code>  BufferedReader br = new BufferedReader(new FileReader(&quot;aaa.txt&quot;));  BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;bbb.txt&quot;));  String line;  while((line = br.readLine()) != null) &#123;      bw.write(line);      //bw.write(&quot;\r\n&quot;);                    //只支持windows系统      bw.newLine();                        //跨平台的  &#125;  br.close();  bw.close(); </code></pre></li></ul><h3 id="21-09-IO流-将文本反转"><a href="#21-09-IO流-将文本反转" class="headerlink" title="21.09_IO流(将文本反转)"></a>21.09_IO流(将文本反转)</h3><ul><li>将一个文本文档上的文本反转,第一行和倒数第一行交换,第二行和倒数第二行交换</li></ul><h3 id="21-10-IO流-LineNumberReader"><a href="#21-10-IO流-LineNumberReader" class="headerlink" title="21.10_IO流(LineNumberReader)"></a>21.10_IO流(LineNumberReader)</h3><ul><li><p>LineNumberReader是BufferedReader的子类, 具有相同的功能, 并且可以统计行号</p><ul><li>调用getLineNumber()方法可以获取当前行号</li><li>调用setLineNumber()方法可以设置当前行号</li></ul></li><li><pre><code>  LineNumberReader lnr = new LineNumberReader(new FileReader(&quot;aaa.txt&quot;));  String line;  lnr.setLineNumber(100);                                    //设置行号  while((line = lnr.readLine()) != null) &#123;      System.out.println(lnr.getLineNumber() + &quot;:&quot; + line);//获取行号  &#125;  lnr.close(); </code></pre></li></ul><h3 id="21-11-IO流-装饰设计模式"><a href="#21-11-IO流-装饰设计模式" class="headerlink" title="21.11_IO流(装饰设计模式)"></a>21.11_IO流(装饰设计模式)</h3><ul><li><pre><code>  interface Coder &#123;      public void code();  &#125;  class Student implements Coder &#123;      @Override      public void code() &#123;          System.out.println(&quot;javase&quot;);          System.out.println(&quot;javaweb&quot;);      &#125;  &#125;  class HeiMaStudent implements Coder &#123;      private Student s;                        //获取到被包装的类的引用      public HeiMaStudent(Student s) &#123;        //通过构造函数创建对象的时候,传入被包装的对象          this.s = s;      &#125;      @Override      public void code() &#123;                    //对其原有功能进行升级          s.code();          System.out.println(&quot;数据库&quot;);          System.out.println(&quot;ssh&quot;);          System.out.println(&quot;安卓&quot;);          System.out.println(&quot;.....&quot;);      &#125;  &#125; </code></pre></li></ul><h3 id="21-12-IO流-使用指定的码表读写字符"><a href="#21-12-IO流-使用指定的码表读写字符" class="headerlink" title="21.12_IO流(使用指定的码表读写字符)"></a>21.12_IO流(使用指定的码表读写字符)</h3><ul><li><p>FileReader是使用默认码表读取文件, 如果需要使用指定码表读取, 那么可以使用InputStreamReader(字节流,编码表)</p></li><li><p>FileWriter是使用默认码表写出文件, 如果需要使用指定码表写出, 那么可以使用OutputStreamWriter(字节流,编码表)</p></li><li><pre><code>  BufferedReader br =                                     //高效的用指定的编码表读          new BufferedReader(new InputStreamReader(new FileInputStream(&quot;UTF-8.txt&quot;), &quot;UTF-8&quot;));  BufferedWriter bw =                                     //高效的用指定的编码表写          new BufferedWriter(new OutputStreamWriter(new FileOutputStream(&quot;GBK.txt&quot;), &quot;GBK&quot;));  int ch;  while((ch = br.read()) != -1) &#123;      bw.write(ch);  &#125;  br.close();  bw.close();</code></pre><h3 id="21-13-IO流-转换流图解"><a href="#21-13-IO流-转换流图解" class="headerlink" title="21.13_IO流(转换流图解)"></a>21.13_IO流(转换流图解)</h3></li><li><p>画图分析转换流</p></li></ul><h3 id="21-14-IO流-获取文本上字符出现的次数"><a href="#21-14-IO流-获取文本上字符出现的次数" class="headerlink" title="21.14_IO流(获取文本上字符出现的次数)"></a>21.14_IO流(获取文本上字符出现的次数)</h3><ul><li>获取一个文本上每个字符出现的次数,将结果写在times.txt上</li></ul><h3 id="21-15-IO流-试用版软件"><a href="#21-15-IO流-试用版软件" class="headerlink" title="21.15_IO流(试用版软件)"></a>21.15_IO流(试用版软件)</h3><ul><li>当我们下载一个试用版软件,没有购买正版的时候,每执行一次就会提醒我们还有多少次使用机会用学过的IO流知识,模拟试用版软件,试用10次机会,执行一次就提示一次您还有几次机会,如果次数到了提示请购买正版</li></ul><h3 id="21-16-File类-递归"><a href="#21-16-File类-递归" class="headerlink" title="21.16_File类(递归)"></a>21.16_File类(递归)</h3><ul><li>5的阶乘    </li></ul><h3 id="21-17-File类-练习"><a href="#21-17-File类-练习" class="headerlink" title="21.17_File类(练习)"></a>21.17_File类(练习)</h3><ul><li>需求:从键盘输入接收一个文件夹路径,打印出该文件夹下所有的.java文件名</li></ul><h3 id="21-18-IO流-总结"><a href="#21-18-IO流-总结" class="headerlink" title="21.18_IO流(总结)"></a>21.18_IO流(总结)</h3><ul><li>1.会用BufferedReader读取GBK码表和UTF-8码表的字符</li><li>2.会用BufferedWriter写出字符到GBK码表和UTF-8码表的文件中</li><li>3.会使用BufferedReader从键盘读取一行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础20-IO字节流</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8020-IO%E5%AD%97%E8%8A%82%E6%B5%81/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8020-IO%E5%AD%97%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="20-01-IO流-IO流概述及其分类"><a href="#20-01-IO流-IO流概述及其分类" class="headerlink" title="20.01_IO流(IO流概述及其分类)"></a>20.01_IO流(IO流概述及其分类)</h3><ul><li>1.概念<ul><li>IO流用来处理设备之间的数据传输</li><li>Java对数据的操作是通过流的方式</li><li>Java用于操作流的类都在IO包中</li><li>流按流向分为两种：输入流，输出流。</li><li>流按操作类型分为两种：<ul><li><strong>字节流</strong> : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的</li><li><strong>字符流</strong> : 字符流只能操作纯字符数据，比较方便。</li></ul></li></ul></li><li>2.IO流常用父类<ul><li>字节流的抽象父类：<ul><li>InputStream </li><li>OutputStream</li></ul></li><li>字符流的抽象父类：<ul><li>Reader </li><li>Writer        </li></ul></li></ul></li><li>3.IO程序书写<ul><li>使用前，导入IO包中的类</li><li>使用时，进行IO异常处理</li><li>使用后，释放资源</li></ul></li></ul><h3 id="20-02-IO流-FileInputStream"><a href="#20-02-IO流-FileInputStream" class="headerlink" title="20.02_IO流(FileInputStream)"></a>20.02_IO流(FileInputStream)</h3><ul><li><p>read()一次读取一个字节</p></li><li><pre><code>  FileInputStream fis = new FileInputStream(&quot;aaa.txt&quot;);    //创建一个文件输入流对象,并关联aaa.txt  int b;                                                    //定义变量,记录每次读到的字节  while((b = fis.read()) != -1) &#123;                            //将每次读到的字节赋值给b并判断是否是-1      System.out.println(b);                                //打印每一个字节  &#125;  fis.close();                                            //关闭流释放资源</code></pre><h3 id="20-03-IO流-read-方法返回值为什么是int"><a href="#20-03-IO流-read-方法返回值为什么是int" class="headerlink" title="20.03_IO流(read()方法返回值为什么是int)"></a>20.03_IO流(read()方法返回值为什么是int)</h3></li><li><p>read()方法读取的是一个字节,为什么返回是int,而不是byte</p></li><li><pre><code>  因为字节输入流可以操作任意类型的文件,比如图片音频等,这些文件底层都是以二进制形式的存储的,如果每次读取都返回byte,有可能在读到中间的时候遇到111111111  那么这11111111是byte类型的-1,我们的程序是遇到-1就会停止不读了,后面的数据就读不到了,所以在读取的时候用int类型接收,如果11111111会在其前面补上  24个0凑足4个字节,那么byte类型的-1就变成int类型的255了这样可以保证整个数据读完,而结束标记的-1就是int类型</code></pre><h3 id="20-04-IO流-FileOutputStream"><a href="#20-04-IO流-FileOutputStream" class="headerlink" title="20.04_IO流(FileOutputStream)"></a>20.04_IO流(FileOutputStream)</h3></li><li><p>write()一次写出一个字节</p></li><li><pre><code>  FileOutputStream fos = new FileOutputStream(&quot;bbb.txt&quot;);    //如果没有bbb.txt,会创建出一个  //fos.write(97);                        //虽然写出的是一个int数,但是在写出的时候会将前面的24个0去掉,所以写出的是一个byte  fos.write(98);  fos.write(99);  fos.close();</code></pre><h3 id="20-05-IO流-FileOutputStream追加"><a href="#20-05-IO流-FileOutputStream追加" class="headerlink" title="20.05_IO流(FileOutputStream追加)"></a>20.05_IO流(FileOutputStream追加)</h3></li><li><p>A:案例演示</p><ul><li>FileOutputStream的构造方法写出数据如何实现数据的追加写入</li></ul></li><li><pre><code>  FileOutputStream fos = new FileOutputStream(&quot;bbb.txt&quot;,true);    //如果没有bbb.txt,会创建出一个  //fos.write(97);                        //虽然写出的是一个int数,但是在写出的时候会将前面的24个0去掉,所以写出的一个byte  fos.write(98);  fos.write(99);  fos.close();</code></pre></li></ul><h3 id="20-06-IO流-拷贝图片"><a href="#20-06-IO流-拷贝图片" class="headerlink" title="20.06_IO流(拷贝图片)"></a>20.06_IO流(拷贝图片)</h3><ul><li><p>FileInputStream读取</p></li><li><p>FileOutputStream写出</p><pre><code>  FileInputStream fis = new FileInputStream(&quot;致青春.mp3&quot;);    //创建输入流对象,关联致青春.mp3  FileOutputStream fos = new FileOutputStream(&quot;copy.mp3&quot;);//创建输出流对象,关联copy.mp3  int b;  while((b = fis.read()) != -1) &#123;      fos.write(b);  &#125;  fis.close();  fos.close();</code></pre></li></ul><h3 id="20-07-IO流-拷贝音频文件画原理图"><a href="#20-07-IO流-拷贝音频文件画原理图" class="headerlink" title="20.07_IO流(拷贝音频文件画原理图)"></a>20.07_IO流(拷贝音频文件画原理图)</h3><ul><li>A:案例演示<ul><li>字节流一次读写一个字节复制音频</li></ul></li><li>弊端:效率太低</li></ul><h3 id="20-08-IO流-字节数组拷贝之available-方法"><a href="#20-08-IO流-字节数组拷贝之available-方法" class="headerlink" title="20.08_IO流(字节数组拷贝之available()方法)"></a>20.08_IO流(字节数组拷贝之available()方法)</h3><ul><li><p>A:案例演示</p><ul><li>int read(byte[] b):一次读取一个字节数组</li><li>write(byte[] b):一次写出一个字节数组</li><li>available()获取读的文件所有的字节个数</li></ul></li><li><p>弊端:有可能会内存溢出 </p><pre><code>  FileInputStream fis = new FileInputStream(&quot;致青春.mp3&quot;);  FileOutputStream fos = new FileOutputStream(&quot;copy.mp3&quot;);  byte[] arr = new byte[fis.available()];                    //根据文件大小做一个字节数组  fis.read(arr);                                            //将文件上的所有字节读取到数组中  fos.write(arr);                                            //将数组中的所有字节一次写到了文件上  fis.close();  fos.close();</code></pre></li></ul><h3 id="20-09-IO流-定义小数组"><a href="#20-09-IO流-定义小数组" class="headerlink" title="20.09_IO流(定义小数组)"></a>20.09_IO流(定义小数组)</h3><ul><li>write(byte[] b)</li><li>write(byte[] b, int off, int len)写出有效的字节个数</li></ul><h3 id="20-10-IO流-定义小数组的标准格式"><a href="#20-10-IO流-定义小数组的标准格式" class="headerlink" title="20.10_IO流(定义小数组的标准格式)"></a>20.10_IO流(定义小数组的标准格式)</h3><ul><li><p>A:案例演示</p><ul><li><p>字节流一次读写一个字节数组复制图片和视频<br>  FileInputStream fis = new FileInputStream(“致青春.mp3”);<br>  FileOutputStream fos = new FileOutputStream(“copy.mp3”);<br>  int len;<br>  byte[] arr = new byte[1024 * 8];                    //自定义字节数组</p><p>  while((len = fis.read(arr)) != -1) {</p><pre><code>  //fos.write(arr);  fos.write(arr, 0, len);                            //写出字节数组写出有效个字节个数</code></pre><p>  }</p><p>  fis.close();<br>  fos.close();</p><h3 id="20-11-IO流-BufferedInputStream和BufferOutputStream拷贝"><a href="#20-11-IO流-BufferedInputStream和BufferOutputStream拷贝" class="headerlink" title="20.11_IO流(BufferedInputStream和BufferOutputStream拷贝)"></a>20.11_IO流(BufferedInputStream和BufferOutputStream拷贝)</h3></li></ul></li><li><p>A:缓冲思想</p><ul><li>字节流一次读写一个数组的速度明显比一次读写一个字节的速度快很多，</li><li>这是加入了数组这样的缓冲区效果，java本身在设计的时候，</li><li>也考虑到了这样的设计思想(装饰设计模式后面讲解)，所以提供了字节缓冲区流</li></ul></li><li><p>B.BufferedInputStream</p><ul><li>BufferedInputStream内置了一个缓冲区(数组)</li><li>从BufferedInputStream中读取一个字节时</li><li>BufferedInputStream会一次性从文件中读取8192个, 存在缓冲区中, 返回给程序一个</li><li>程序再次读取时, 就不用找文件了, 直接从缓冲区中获取</li><li>直到缓冲区中所有的都被使用过, 才重新从文件中读取8192个</li></ul></li><li><p>C.BufferedOutputStream</p><ul><li>BufferedOutputStream也内置了一个缓冲区(数组)</li><li>程序向流中写出字节时, 不会直接写到文件, 先写到缓冲区中</li><li>直到缓冲区写满, BufferedOutputStream才会把缓冲区中的数据一次性写到文件里</li></ul></li><li><p>D.拷贝的代码 </p><pre><code>  FileInputStream fis = new FileInputStream(&quot;致青春.mp3&quot;);        //创建文件输入流对象,关联致青春.mp3  BufferedInputStream bis = new BufferedInputStream(fis);            //创建缓冲区对fis装饰  FileOutputStream fos = new FileOutputStream(&quot;copy.mp3&quot;);        //创建输出流对象,关联copy.mp3  BufferedOutputStream bos = new BufferedOutputStream(fos);        //创建缓冲区对fos装饰  int b;  while((b = bis.read()) != -1) &#123;              bos.write(b);  &#125;  bis.close();                        //只关装饰后的对象即可  bos.close();</code></pre></li><li><p>E.小数组的读写和带Buffered的读取哪个更快?</p><ul><li>定义小数组如果是8192个字节大小和Buffered比较的话</li><li>定义小数组会略胜一筹,因为读和写操作的是同一个数组</li><li>而Buffered操作的是两个数组</li></ul></li></ul><h3 id="20-12-IO流-flush和close方法的区别"><a href="#20-12-IO流-flush和close方法的区别" class="headerlink" title="20.12_IO流(flush和close方法的区别)"></a>20.12_IO流(flush和close方法的区别)</h3><ul><li>flush()方法<ul><li>用来刷新缓冲区的,刷新后可以再次写出 </li></ul></li><li>close()方法<ul><li>用来关闭流释放资源的的,如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出 <h3 id="20-13-IO流-字节流读写中文"><a href="#20-13-IO流-字节流读写中文" class="headerlink" title="20.13_IO流(字节流读写中文)"></a>20.13_IO流(字节流读写中文)</h3></li></ul></li><li>字节流读取中文的问题<ul><li>字节流在读中文的时候有可能会读到半个中文,造成乱码 </li></ul></li><li>字节流写出中文的问题<ul><li>字节流直接操作的字节,所以写出中文必须将字符串转换成字节数组 </li><li>写出回车换行 write(“\r\n”.getBytes());</li></ul></li></ul><h3 id="20-14-IO流-流的标准处理异常代码1-6版本及其以前"><a href="#20-14-IO流-流的标准处理异常代码1-6版本及其以前" class="headerlink" title="20.14_IO流(流的标准处理异常代码1.6版本及其以前)"></a>20.14_IO流(流的标准处理异常代码1.6版本及其以前)</h3><ul><li><p>try finally嵌套</p><pre><code>  FileInputStream fis = null;  FileOutputStream fos = null;  try &#123;      fis = new FileInputStream(&quot;aaa.txt&quot;);      fos = new FileOutputStream(&quot;bbb.txt&quot;);      int b;      while((b = fis.read()) != -1) &#123;          fos.write(b);      &#125;  &#125; finally &#123;      try &#123;          if(fis != null)              fis.close();      &#125;finally &#123;          if(fos != null)              fos.close();      &#125;  &#125;</code></pre></li></ul><h3 id="20-15-IO流-流的标准处理异常代码1-7版本"><a href="#20-15-IO流-流的标准处理异常代码1-7版本" class="headerlink" title="20.15_IO流(流的标准处理异常代码1.7版本)"></a>20.15_IO流(流的标准处理异常代码1.7版本)</h3><ul><li><p>try close</p><pre><code>  try(      FileInputStream fis = new FileInputStream(&quot;aaa.txt&quot;);      FileOutputStream fos = new FileOutputStream(&quot;bbb.txt&quot;);      MyClose mc = new MyClose();  )&#123;      int b;      while((b = fis.read()) != -1) &#123;          fos.write(b);      &#125;  &#125;</code></pre></li><li><p>原理</p><ul><li>在try()中创建的流对象必须实现了AutoCloseable这个接口,</li><li>如果实现了,在try后面的{}(读写代码)执行后就会自动调用,流对象的close方法将流关掉 </li></ul></li></ul><h3 id="20-16-IO流-图片加密"><a href="#20-16-IO流-图片加密" class="headerlink" title="20.16_IO流(图片加密)"></a>20.16_IO流(图片加密)</h3><ul><li><p>给图片加密</p><pre><code>  BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;a.jpg&quot;));  BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;b.jpg&quot;));  int b;  while((b = bis.read()) != -1) &#123;      bos.write(b ^ 123);  &#125;  bis.close();  bos.close();</code></pre></li></ul><h3 id="20-17-IO流-拷贝文件"><a href="#20-17-IO流-拷贝文件" class="headerlink" title="20.17_IO流(拷贝文件)"></a>20.17_IO流(拷贝文件)</h3><ul><li><p>在控制台录入文件的路径,将文件拷贝到当前项目下</p><pre><code>  Scanner sc = new Scanner(System.in);  System.out.println(&quot;请输入一个文件路径&quot;);  String line = sc.nextLine();                //将键盘录入的文件路径存储在line中  File file = new File(line);                    //封装成File对象  FileInputStream fis = new FileInputStream(file);  FileOutputStream fos = new FileOutputStream(file.getName());  int len;  byte[] arr = new byte[8192];                //定义缓冲区  while((len = fis.read(arr)) != -1) &#123;      fos.write(arr,0,len);  &#125;  fis.close();  fos.close();</code></pre></li></ul><h3 id="20-18-IO流-录入数据拷贝到文件"><a href="#20-18-IO流-录入数据拷贝到文件" class="headerlink" title="20.18_IO流(录入数据拷贝到文件)"></a>20.18_IO流(录入数据拷贝到文件)</h3><ul><li><p>将键盘录入的数据拷贝到当前项目下的text.txt文件中,键盘录入数据当遇到quit时就退出</p><pre><code>  Scanner sc = new Scanner(System.in);  FileOutputStream fos = new FileOutputStream(&quot;text.txt&quot;);  System.out.println(&quot;请输入:&quot;);  while(true) &#123;      String line = sc.nextLine();      if(&quot;quit&quot;.equals(line))          break;      fos.write(line.getBytes());      fos.write(&quot;\r\n&quot;.getBytes());  &#125;  fos.close();</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础19-异常-IO流</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8019-%E5%BC%82%E5%B8%B8-IO%E6%B5%81/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8019-%E5%BC%82%E5%B8%B8-IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="19-01-异常-异常的概述和分类"><a href="#19-01-异常-异常的概述和分类" class="headerlink" title="19.01_异常(异常的概述和分类)"></a>19.01_异常(异常的概述和分类)</h2><ul><li>A:异常的概述<ul><li>异常就是Java程序在运行过程中出现的错误。</li></ul></li><li>B:异常的分类<ul><li>通过API查看Throwable</li><li>Error<ul><li>服务器宕机,数据库崩溃等</li></ul></li><li>Exception<br>C:异常的继承体系</li><li>Throwable<ul><li>Error    </li><li>Exception<ul><li>RuntimeException</li></ul></li></ul></li></ul></li></ul><h2 id="19-02-异常-JVM默认是如何处理异常的"><a href="#19-02-异常-JVM默认是如何处理异常的" class="headerlink" title="19.02_异常(JVM默认是如何处理异常的)"></a>19.02_异常(JVM默认是如何处理异常的)</h2><ul><li>A:JVM默认是如何处理异常的<ul><li>main函数收到这个问题时,有两种处理方式:</li><li>a:自己将该问题处理,然后继续运行</li><li>b:自己没有针对的处理方式,只有交给调用main的jvm来处理</li><li>jvm有一个默认的异常处理机制,就将该异常进行处理.</li><li>并将该异常的名称,异常的信息.异常出现的位置打印在了控制台上,同时将程序停止运行</li></ul></li><li>B:案例演示<ul><li>JVM默认如何处理异常</li></ul></li></ul><h3 id="19-03-异常-try…catch的方式处理异常1"><a href="#19-03-异常-try…catch的方式处理异常1" class="headerlink" title="19.03_异常(try…catch的方式处理异常1)"></a>19.03_异常(try…catch的方式处理异常1)</h3><ul><li>A:异常处理的两种方式<ul><li>a:try…catch…finally<ul><li>try catch</li><li>try catch finally</li><li>try finally </li></ul></li><li>b:throws</li></ul></li><li>B:try…catch处理异常的基本格式<ul><li>try…catch…finally</li></ul></li><li>C:案例演示<ul><li>try…catch的方式处理1个异常</li></ul></li></ul><h2 id="19-04-异常-try…catch的方式处理异常2"><a href="#19-04-异常-try…catch的方式处理异常2" class="headerlink" title="19.04_异常(try…catch的方式处理异常2)"></a>19.04_异常(try…catch的方式处理异常2)</h2><ul><li>A:案例演示<ul><li>try…catch的方式处理多个异常</li><li>JDK7以后处理多个异常的方式及注意事项</li></ul></li></ul><h2 id="19-05-异常-编译期异常和运行期异常的区别"><a href="#19-05-异常-编译期异常和运行期异常的区别" class="headerlink" title="19.05_异常(编译期异常和运行期异常的区别)"></a>19.05_异常(编译期异常和运行期异常的区别)</h2><ul><li><p>A:编译期异常和运行期异常的区别</p><ul><li><p>Java中的异常被分为两大类：编译时异常和运行时异常。</p></li><li><p>所有的RuntimeException类及其子类的实例被称为运行时异常，其他的异常就是编译时异常</p></li><li><p>编译时异常</p><ul><li>Java程序必须显示处理，否则程序就会发生错误，无法通过编译</li></ul></li><li><p>运行时异常</p><ul><li>无需显示处理，也可以和编译时异常一样处理</li></ul></li></ul></li><li><p>B:案例演示</p><ul><li>编译期异常和运行期异常的区别</li></ul></li></ul><h3 id="19-06-异常-Throwable的几个常见方法"><a href="#19-06-异常-Throwable的几个常见方法" class="headerlink" title="19.06_异常(Throwable的几个常见方法)"></a>19.06_异常(Throwable的几个常见方法)</h3><ul><li>A:Throwable的几个常见方法<ul><li>a:getMessage()<ul><li>获取异常信息，返回字符串。</li></ul></li><li>b:toString()<ul><li>获取异常类名和异常信息，返回字符串。</li></ul></li><li>c:printStackTrace()<ul><li>获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。</li></ul></li></ul></li><li>B:案例演示<ul><li>Throwable的几个常见方法的基本使用</li></ul></li></ul><h3 id="19-07-异常-throws的方式处理异常"><a href="#19-07-异常-throws的方式处理异常" class="headerlink" title="19.07_异常(throws的方式处理异常)"></a>19.07_异常(throws的方式处理异常)</h3><ul><li>A:throws的方式处理异常<ul><li>定义功能方法时，需要把出现的问题暴露出来让调用者去处理。</li><li>那么就通过throws在方法上标识。</li></ul></li><li>B:案例演示<ul><li>举例分别演示编译时异常和运行时异常的抛出</li></ul></li></ul><h3 id="19-08-异常-throw的概述以及和throws的区别"><a href="#19-08-异常-throw的概述以及和throws的区别" class="headerlink" title="19.08_异常(throw的概述以及和throws的区别)"></a>19.08_异常(throw的概述以及和throws的区别)</h3><ul><li>A:throw的概述<ul><li>在功能方法内部出现某种情况，程序不能继续运行，需要进行跳转时，就用throw把异常对象抛出。</li></ul></li><li>B:案例演示    <ul><li>分别演示编译时异常对象和运行时异常对象的抛出</li></ul></li><li>C:throws和throw的区别<ul><li>a:throws<ul><li>用在方法声明后面，跟的是异常类名</li><li>可以跟多个异常类名，用逗号隔开</li><li>表示抛出异常，由该方法的调用者来处理</li></ul></li><li>b:throw<ul><li>用在方法体内，跟的是异常对象名</li><li>只能抛出一个异常对象名</li><li>表示抛出异常，由方法体内的语句处理</li></ul></li></ul></li></ul><h3 id="19-09-异常-finally关键字的特点及作用"><a href="#19-09-异常-finally关键字的特点及作用" class="headerlink" title="19.09_异常(finally关键字的特点及作用)"></a>19.09_异常(finally关键字的特点及作用)</h3><ul><li>A:finally的特点<ul><li>被finally控制的语句体一定会执行</li><li>特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))</li></ul></li><li>B:finally的作用<ul><li>用于释放资源，在IO流操作和数据库操作中会见到</li></ul></li><li>C:案例演示<ul><li>finally关键字的特点及作用</li></ul></li></ul><h3 id="19-10-异常-finally关键字的面试题"><a href="#19-10-异常-finally关键字的面试题" class="headerlink" title="19.10_异常(finally关键字的面试题)"></a>19.10_异常(finally关键字的面试题)</h3><ul><li>A:面试题1<ul><li>final,finally和finalize的区别</li></ul></li><li>B:面试题2<ul><li>如果catch里面有return语句，请问finally的代码还会执行吗?如果会，请问是在return前还是return后。</li></ul></li></ul><h3 id="19-11-异常-自定义异常概述和基本使用"><a href="#19-11-异常-自定义异常概述和基本使用" class="headerlink" title="19.11_异常(自定义异常概述和基本使用)"></a>19.11_异常(自定义异常概述和基本使用)</h3><ul><li>A:为什么需要自定义异常<ul><li>举例：人的年龄</li></ul></li><li>B:自定义异常概述<ul><li>继承自Exception</li><li>继承自RuntimeException</li></ul></li><li>C:案例演示<ul><li>自定义异常的基本使用</li></ul></li></ul><h3 id="19-12-异常-异常的注意事项及如何使用异常处理"><a href="#19-12-异常-异常的注意事项及如何使用异常处理" class="headerlink" title="19.12_异常(异常的注意事项及如何使用异常处理)"></a>19.12_异常(异常的注意事项及如何使用异常处理)</h3><ul><li><p>A:异常注意事项</p><ul><li>a:子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。(父亲坏了,儿子不能比父亲更坏)</li><li>b:如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者是他的子集,子类不能抛出父类没有的异常</li><li>c:如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常,如果子类方法内有异常发生,那么子类只能try,不能throws</li></ul></li><li><p>B:如何使用异常处理</p><ul><li><p>原则:如果该功能内部可以将问题处理,用try,如果处理不了,交由调用者处理,这是用throws</p></li><li><p>区别:</p><ul><li>后续程序需要继续运行就try</li><li>后续程序不需要继续运行就throws</li></ul></li><li><p>如果JDK没有提供对应的异常，需要自定义异常。</p></li></ul></li></ul><h3 id="19-13-异常-练习"><a href="#19-13-异常-练习" class="headerlink" title="19.13_异常(练习)"></a>19.13_异常(练习)</h3><ul><li>键盘录入一个int类型的整数,对其求二进制表现形式<ul><li>如果录入的整数过大,给予提示,录入的整数过大请重新录入一个整数BigInteger</li><li>如果录入的是小数,给予提示,录入的是小数,请重新录入一个整数</li><li>如果录入的是其他字符,给予提示,录入的是非法字符,请重新录入一个整数</li></ul></li></ul><h3 id="19-14-File类-File类的概述和构造方法"><a href="#19-14-File类-File类的概述和构造方法" class="headerlink" title="19.14_File类(File类的概述和构造方法)"></a>19.14_File类(File类的概述和构造方法)</h3><ul><li>A:File类的概述<ul><li>File更应该叫做一个路径<ul><li>文件路径或者文件夹路径  </li><li>路径分为绝对路径和相对路径</li><li>绝对路径是一个固定的路径,从盘符开始</li><li>相对路径相对于某个位置,在eclipse下是指当前项目下,在dos下</li></ul></li><li>查看API指的是当前路径</li><li>文件和目录路径名的抽象表示形式</li></ul></li><li>B:构造方法<ul><li>File(String pathname)：根据一个路径得到File对象</li><li>File(String parent, String child):根据一个目录和一个子文件/目录得到File对象</li><li>File(File parent, String child):根据一个父File对象和一个子文件/目录得到File对象</li></ul></li><li>C:案例演示<ul><li>File类的构造方法</li></ul></li></ul><h3 id="19-15-File类-File类的创建功能"><a href="#19-15-File类-File类的创建功能" class="headerlink" title="19.15_File类(File类的创建功能)"></a>19.15_File类(File类的创建功能)</h3><ul><li><p>A:创建功能</p><ul><li>public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了</li><li>public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了</li><li>public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来</li></ul></li><li><p>B:案例演示</p><ul><li><p>File类的创建功能</p></li><li><p>注意事项：</p><ul><li>如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。</li></ul></li></ul></li></ul><h3 id="19-16-File类-File类的重命名和删除功能"><a href="#19-16-File类-File类的重命名和删除功能" class="headerlink" title="19.16_File类(File类的重命名和删除功能)"></a>19.16_File类(File类的重命名和删除功能)</h3><ul><li>A:重命名和删除功能<ul><li>public boolean renameTo(File dest):把文件重命名为指定的文件路径</li><li>public boolean delete():删除文件或者文件夹</li></ul></li><li>B:重命名注意事项<ul><li>如果路径名相同，就是改名。</li><li>如果路径名不同，就是改名并剪切。</li></ul></li><li>C:删除注意事项：<ul><li>Java中的删除不走回收站。</li><li>要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹</li></ul></li></ul><h3 id="19-17-File类-File类的判断功能"><a href="#19-17-File类-File类的判断功能" class="headerlink" title="19.17_File类(File类的判断功能)"></a>19.17_File类(File类的判断功能)</h3><ul><li>A:判断功能<ul><li>public boolean isDirectory():判断是否是目录</li><li>public boolean isFile():判断是否是文件</li><li>public boolean exists():判断是否存在</li><li>public boolean canRead():判断是否可读</li><li>public boolean canWrite():判断是否可写</li><li>public boolean isHidden():判断是否隐藏</li></ul></li><li>B:案例演示<ul><li>File类的判断功能</li></ul></li></ul><h3 id="19-18-File类-File类的获取功能"><a href="#19-18-File类-File类的获取功能" class="headerlink" title="19.18_File类(File类的获取功能)"></a>19.18_File类(File类的获取功能)</h3><ul><li>A:获取功能<ul><li>public String getAbsolutePath()：获取绝对路径</li><li>public String getPath():获取路径</li><li>public String getName():获取名称</li><li>public long length():获取长度。字节数</li><li>public long lastModified():获取最后一次的修改时间，毫秒值</li><li>public String[] list():获取指定目录下的所有文件或者文件夹的名称数组</li><li>public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组 </li></ul></li><li>B:案例演示<ul><li>File类的获取功能</li></ul></li></ul><h3 id="19-19-File类-输出指定目录下指定后缀的文件名"><a href="#19-19-File类-输出指定目录下指定后缀的文件名" class="headerlink" title="19.19_File类(输出指定目录下指定后缀的文件名)"></a>19.19_File类(输出指定目录下指定后缀的文件名)</h3><ul><li>A:案例演示<ul><li>需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称</li></ul></li></ul><h3 id="19-20-File类-文件名称过滤器的概述及使用"><a href="#19-20-File类-文件名称过滤器的概述及使用" class="headerlink" title="19.20_File类(文件名称过滤器的概述及使用)"></a>19.20_File类(文件名称过滤器的概述及使用)</h3><ul><li>A:文件名称过滤器的概述<ul><li>public String[] list(FilenameFilter filter)</li><li>public File[] listFiles(FileFilter filter)</li></ul></li><li>B:文件名称过滤器的使用<ul><li>需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称</li></ul></li><li>C:源码分析<ul><li>带文件名称过滤器的list()方法的源码</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础18-Map集合</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8018-Map%E9%9B%86%E5%90%88/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8018-Map%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="18-01-集合框架-Map集合概述和特点"><a href="#18-01-集合框架-Map集合概述和特点" class="headerlink" title="18.01_集合框架(Map集合概述和特点)"></a>18.01_集合框架(Map集合概述和特点)</h2><ul><li>A:Map接口概述<ul><li>查看API可以知道：<ul><li>将键映射到值的对象</li><li>一个映射不能包含重复的键</li><li>每个键最多只能映射到一个值</li></ul></li></ul></li><li>B:<strong>Map接口和Collection接口的不同</strong><ul><li>Map是双列的,Collection是单列的</li><li>Map的键唯一,Collection的子体系Set是唯一的</li><li>Map集合的数据结构值针对键有效，跟值无关;Collection集合的数据结构是针对元素有效</li></ul></li></ul><h2 id="18-02-集合框架-Map集合的功能概述"><a href="#18-02-集合框架-Map集合的功能概述" class="headerlink" title="18.02_集合框架(Map集合的功能概述)"></a>18.02_集合框架(Map集合的功能概述)</h2><ul><li>A:Map集合的功能概述<ul><li>a:添加功能<ul><li>V put(K key,V value):添加元素。<ul><li>如果键是第一次存储，就直接存储元素，返回null</li><li>如果键不是第一次存在，就用值把以前的值替换掉，返回以前的值</li></ul></li></ul></li><li>b:删除功能<ul><li>void clear():移除所有的键值对元素</li><li>V remove(Object key)：根据键删除键值对元素，并把值返回</li></ul></li><li>c:判断功能<ul><li>boolean containsKey(Object key)：判断集合是否包含指定的键</li><li>boolean containsValue(Object value):判断集合是否包含指定的值</li><li>boolean isEmpty()：判断集合是否为空</li></ul></li><li>d:获取功能<ul><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet():</li><li>V get(Object key):根据键获取值</li><li>Set<K> keySet():获取集合中所有键的集合</li><li>Collection<V> values():获取集合中所有值的集合</li></ul></li><li>e:长度功能<ul><li>int size()：返回集合中的键值对的个数</li></ul></li></ul></li></ul><h3 id="18-03-集合框架-Map集合的遍历之键找值"><a href="#18-03-集合框架-Map集合的遍历之键找值" class="headerlink" title="18.03_集合框架(Map集合的遍历之键找值)"></a>18.03_集合框架(Map集合的遍历之键找值)</h3><ul><li><p>A:键找值思路：</p><ul><li>获取所有键的集合</li><li>遍历键的集合，获取到每一个键</li><li>根据键找值</li></ul></li><li><p>B:案例演示</p><ul><li><p>Map集合的遍历之键找值</p><pre><code>  HashMap&lt;String, Integer&gt; hm = new HashMap&lt;&gt;();  hm.put(&quot;张三&quot;, 23);  hm.put(&quot;李四&quot;, 24);  hm.put(&quot;王五&quot;, 25);  hm.put(&quot;赵六&quot;, 26);  /*Set&lt;String&gt; keySet = hm.keySet();            //获取集合中所有的键  Iterator&lt;String&gt; it = keySet.iterator();    //获取迭代器  while(it.hasNext()) &#123;                        //判断单列集合中是否有元素      String key = it.next();                    //获取集合中的每一个元素,其实就是双列集合中的键      Integer value = hm.get(key);            //根据键获取值      System.out.println(key + &quot;=&quot; + value);    //打印键值对  &#125;*/  for(String key : hm.keySet()) &#123;                //增强for循环迭代双列集合第一种方式      System.out.println(key + &quot;=&quot; + hm.get(key));  &#125;</code></pre></li></ul></li></ul><h3 id="18-04-集合框架-Map集合的遍历之键值对对象找键和值"><a href="#18-04-集合框架-Map集合的遍历之键值对对象找键和值" class="headerlink" title="18.04_集合框架(Map集合的遍历之键值对对象找键和值)"></a>18.04_集合框架(Map集合的遍历之键值对对象找键和值)</h3><ul><li><p>A:键值对对象找键和值思路：</p><ul><li>获取所有键值对对象的集合</li><li>遍历键值对对象的集合，获取到每一个键值对对象</li><li>根据键值对对象找键和值</li></ul></li><li><p>B:案例演示</p><ul><li><p>Map集合的遍历之键值对对象找键和值</p><pre><code>  HashMap&lt;String, Integer&gt; hm = new HashMap&lt;&gt;();  hm.put(&quot;张三&quot;, 23);  hm.put(&quot;李四&quot;, 24);  hm.put(&quot;王五&quot;, 25);  hm.put(&quot;赵六&quot;, 26);  /*Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entrySet = hm.entrySet();    //获取所有的键值对象的集合  Iterator&lt;Entry&lt;String, Integer&gt;&gt; it = entrySet.iterator();//获取迭代器  while(it.hasNext()) &#123;      Entry&lt;String, Integer&gt; en = it.next();                //获取键值对对象      String key = en.getKey();                                //根据键值对对象获取键      Integer value = en.getValue();                            //根据键值对对象获取值      System.out.println(key + &quot;=&quot; + value);  &#125;*/  for(Entry&lt;String,Integer&gt; en : hm.entrySet()) &#123;      System.out.println(en.getKey() + &quot;=&quot; + en.getValue());  &#125;</code></pre></li></ul></li></ul><p>C:源码分析</p><h3 id="18-05-集合框架-HashMap集合键是Student值是String的案例"><a href="#18-05-集合框架-HashMap集合键是Student值是String的案例" class="headerlink" title="18.05_集合框架(HashMap集合键是Student值是String的案例)"></a>18.05_集合框架(HashMap集合键是Student值是String的案例)</h3><ul><li>A:案例演示<ul><li>HashMap集合键是Student值是String的案例</li></ul></li></ul><h3 id="18-06-集合框架-LinkedHashMap的概述和使用"><a href="#18-06-集合框架-LinkedHashMap的概述和使用" class="headerlink" title="18.06_集合框架(LinkedHashMap的概述和使用)"></a>18.06_集合框架(LinkedHashMap的概述和使用)</h3><ul><li>A:案例演示<ul><li>LinkedHashMap的特点<ul><li>底层是链表实现的可以保证怎么存就怎么取</li></ul></li></ul></li></ul><h3 id="18-07-集合框架-TreeMap集合键是Student值是String的案例"><a href="#18-07-集合框架-TreeMap集合键是Student值是String的案例" class="headerlink" title="18.07_集合框架(TreeMap集合键是Student值是String的案例)"></a>18.07_集合框架(TreeMap集合键是Student值是String的案例)</h3><ul><li>A:案例演示<ul><li>TreeMap集合键是Student值是String的案例</li></ul></li></ul><h3 id="18-08-集合框架-统计字符串中每个字符出现的次数"><a href="#18-08-集合框架-统计字符串中每个字符出现的次数" class="headerlink" title="18.08_集合框架(统计字符串中每个字符出现的次数)"></a>18.08_集合框架(统计字符串中每个字符出现的次数)</h3><ul><li><p>A:案例演示</p><ul><li><p>需求：统计字符串中每个字符出现的次数</p><pre><code>  String str = &quot;aaaabbbcccccccccc&quot;;  char[] arr = str.toCharArray();                        //将字符串转换成字符数组  HashMap&lt;Character, Integer&gt; hm = new HashMap&lt;&gt;();    //创建双列集合存储键和值  for(char c : arr) &#123;                                    //遍历字符数组      /*if(!hm.containsKey(c)) &#123;                        //如果不包含这个键          hm.put(c, 1);                                //就将键和值为1添加      &#125;else &#123;                                            //如果包含这个键          hm.put(c, hm.get(c) + 1);                    //就将键和值再加1添加进来      &#125;      //hm.put(c, !hm.containsKey(c) ? 1 : hm.get(c) + 1);      Integer i = !hm.containsKey(c) ? hm.put(c, 1) : hm.put(c, hm.get(c) + 1);              &#125;  for (Character key : hm.keySet()) &#123;                    //遍历双列集合      System.out.println(key + &quot;=&quot; + hm.get(key));  &#125;</code></pre></li></ul></li></ul><h3 id="18-09-集合框架-集合嵌套之HashMap嵌套HashMap"><a href="#18-09-集合框架-集合嵌套之HashMap嵌套HashMap" class="headerlink" title="18.09_集合框架(集合嵌套之HashMap嵌套HashMap)"></a>18.09_集合框架(集合嵌套之HashMap嵌套HashMap)</h3><ul><li>A:案例演示<ul><li>集合嵌套之HashMap嵌套HashMap</li></ul></li></ul><h3 id="18-10-集合框架-HashMap和Hashtable的区别"><a href="#18-10-集合框架-HashMap和Hashtable的区别" class="headerlink" title="18.10_集合框架(HashMap和Hashtable的区别)"></a>18.10_集合框架(HashMap和Hashtable的区别)</h3><ul><li>A:面试题<ul><li>HashMap和Hashtable的区别<ul><li>Hashtable是JDK1.0版本出现的,是线程安全的,效率低,HashMap是JDK1.2版本出现的,是线程不安全的,效率高</li><li>Hashtable不可以存储null键和null值,HashMap可以存储null键和null值</li></ul></li></ul></li><li>B:案例演示    <ul><li>HashMap和Hashtable的区别</li></ul></li></ul><h3 id="18-11-集合框架-Collections工具类的概述和常见方法讲解"><a href="#18-11-集合框架-Collections工具类的概述和常见方法讲解" class="headerlink" title="18.11_集合框架(Collections工具类的概述和常见方法讲解)"></a>18.11_集合框架(Collections工具类的概述和常见方法讲解)</h3><ul><li>A:Collections类概述<ul><li>针对集合操作 的工具类</li></ul></li><li>B:Collections成员方法</li><li><pre><code>  public static &lt;T&gt; void sort(List&lt;T&gt; list)  public static &lt;T&gt; int binarySearch(List&lt;?&gt; list,T key)  public static &lt;T&gt; T max(Collection&lt;?&gt; coll)  public static void reverse(List&lt;?&gt; list)  public static void shuffle(List&lt;?&gt; list)</code></pre></li></ul><h3 id="18-12-集合框架-模拟斗地主洗牌和发牌"><a href="#18-12-集合框架-模拟斗地主洗牌和发牌" class="headerlink" title="18.12_集合框架(模拟斗地主洗牌和发牌)"></a>18.12_集合框架(模拟斗地主洗牌和发牌)</h3><ul><li><p>A:案例演示</p><ul><li><p>模拟斗地主洗牌和发牌，牌没有排序</p><pre><code>  //买一副扑克  String[] num = &#123;&quot;A&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;,&quot;J&quot;,&quot;Q&quot;,&quot;K&quot;&#125;;  String[] color = &#123;&quot;方片&quot;,&quot;梅花&quot;,&quot;红桃&quot;,&quot;黑桃&quot;&#125;;  ArrayList&lt;String&gt; poker = new ArrayList&lt;&gt;();  for(String s1 : color) &#123;      for(String s2 : num) &#123;          poker.add(s1.concat(s2));      &#125;  &#125;  poker.add(&quot;小王&quot;);  poker.add(&quot;大王&quot;);  //洗牌  Collections.shuffle(poker);  //发牌  ArrayList&lt;String&gt; gaojin = new ArrayList&lt;&gt;();  ArrayList&lt;String&gt; longwu = new ArrayList&lt;&gt;();  ArrayList&lt;String&gt; me = new ArrayList&lt;&gt;();  ArrayList&lt;String&gt; dipai = new ArrayList&lt;&gt;();  for(int i = 0; i &lt; poker.size(); i++) &#123;      if(i &gt;= poker.size() - 3) &#123;          dipai.add(poker.get(i));      &#125;else if(i % 3 == 0) &#123;          gaojin.add(poker.get(i));      &#125;else if(i % 3 == 1) &#123;          longwu.add(poker.get(i));      &#125;else &#123;          me.add(poker.get(i));      &#125;  &#125;  //看牌  System.out.println(gaojin);  System.out.println(longwu);  System.out.println(me);  System.out.println(dipai);</code></pre></li></ul></li></ul><h3 id="18-13-集合框架-模拟斗地主洗牌和发牌并对牌进行排序的原理图解"><a href="#18-13-集合框架-模拟斗地主洗牌和发牌并对牌进行排序的原理图解" class="headerlink" title="18.13_集合框架(模拟斗地主洗牌和发牌并对牌进行排序的原理图解)"></a>18.13_集合框架(模拟斗地主洗牌和发牌并对牌进行排序的原理图解)</h3><ul><li>A:画图演示<ul><li>画图说明排序原理</li></ul></li></ul><h3 id="18-14-集合框架-模拟斗地主洗牌和发牌并对牌进行排序的代码实现"><a href="#18-14-集合框架-模拟斗地主洗牌和发牌并对牌进行排序的代码实现" class="headerlink" title="18.14_集合框架(模拟斗地主洗牌和发牌并对牌进行排序的代码实现)"></a>18.14_集合框架(模拟斗地主洗牌和发牌并对牌进行排序的代码实现)</h3><ul><li><p>A:案例演示</p><ul><li>模拟斗地主洗牌和发牌并对牌进行排序的代码实现</li></ul></li><li><pre><code>      //买一副牌      String[] num = &#123;&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;,&quot;J&quot;,&quot;Q&quot;,&quot;K&quot;,&quot;A&quot;,&quot;2&quot;&#125;;      String[] color = &#123;&quot;方片&quot;,&quot;梅花&quot;,&quot;红桃&quot;,&quot;黑桃&quot;&#125;;      HashMap&lt;Integer, String&gt; hm = new HashMap&lt;&gt;();            //存储索引和扑克牌      ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();            //存储索引      int index = 0;                                            //索引的开始值      for(String s1 : num) &#123;          for(String s2 : color) &#123;              hm.put(index, s2.concat(s1));                    //将索引和扑克牌添加到HashMap中              list.add(index);                                //将索引添加到ArrayList集合中              index++;          &#125;      &#125;      hm.put(index, &quot;小王&quot;);      list.add(index);      index++;      hm.put(index, &quot;大王&quot;);      list.add(index);      //洗牌      Collections.shuffle(list);      //发牌      TreeSet&lt;Integer&gt; gaojin = new TreeSet&lt;&gt;();      TreeSet&lt;Integer&gt; longwu = new TreeSet&lt;&gt;();      TreeSet&lt;Integer&gt; me = new TreeSet&lt;&gt;();      TreeSet&lt;Integer&gt; dipai = new TreeSet&lt;&gt;();      for(int i = 0; i &lt; list.size(); i++) &#123;          if(i &gt;= list.size() - 3) &#123;              dipai.add(list.get(i));                         //将list集合中的索引添加到TreeSet集合中会自动排序          &#125;else if(i % 3 == 0) &#123;              gaojin.add(list.get(i));          &#125;else if(i % 3 == 1) &#123;              longwu.add(list.get(i));          &#125;else &#123;              me.add(list.get(i));          &#125;      &#125;      //看牌      lookPoker(&quot;高进&quot;, gaojin, hm);      lookPoker(&quot;龙五&quot;, longwu, hm);      lookPoker(&quot;冯佳&quot;, me, hm);      lookPoker(&quot;底牌&quot;, dipai, hm);  &#125;  public static void lookPoker(String name,TreeSet&lt;Integer&gt; ts,HashMap&lt;Integer, String&gt; hm) &#123;      System.out.print(name + &quot;的牌是:&quot;);      for (Integer index : ts) &#123;          System.out.print(hm.get(index) + &quot; &quot;);      &#125;      System.out.println();  &#125;</code></pre><h3 id="18-15-集合框架-泛型固定下边界"><a href="#18-15-集合框架-泛型固定下边界" class="headerlink" title="18.15_集合框架(泛型固定下边界)"></a>18.15_集合框架(泛型固定下边界)</h3></li><li><p>? super E</p></li></ul><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/18-Map%E9%9B%86%E5%90%88/%E6%A0%B9%E6%8D%AE%E9%94%AE%E8%8E%B7%E5%8F%96%E5%80%BC.png" alt="根据键获取值"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/18-Map%E9%9B%86%E5%90%88/%E6%A0%B9%E6%8D%AE%E9%94%AE%E5%80%BC%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96.png" alt="根据键值对象获取"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/18-Map%E9%9B%86%E5%90%88/%E6%96%97%E5%9C%B0%E4%B8%BB.png" alt="斗地主"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础17-Set集合</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8017-Set%E9%9B%86%E5%90%88/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8017-Set%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Demo1-HashSet"><a href="#Demo1-HashSet" class="headerlink" title="Demo1_HashSet"></a>Demo1_HashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_HashSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * **Set集合,无索引,不可以重复,无序(存取不一致)**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">HashSet&lt;Person&gt; hs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">hs.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">hs.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">hs.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line">hs.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line">hs.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line">hs.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(hs.size());</span></span><br><span class="line">System.out.println(hs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HashSet&lt;String&gt; hs = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//创建HashSet对象</span></span><br><span class="line"><span class="keyword">boolean</span> b1 = hs.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b2 = hs.add(<span class="string">&quot;a&quot;</span>);<span class="comment">//当向set集合中存储重复元素的时候返回为false</span></span><br><span class="line">hs.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">hs.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">hs.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">System.out.println(hs);<span class="comment">//HashSet的继承体系中有重写toString方法</span></span><br><span class="line">System.out.println(b1);</span><br><span class="line">System.out.println(b2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : hs) &#123;<span class="comment">//只要能用迭代器迭代的,就可以使用增强for循环遍历</span></span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Demo2-LinkedHashSet"><a href="#Demo2-LinkedHashSet" class="headerlink" title="Demo2_LinkedHashSet"></a>Demo2_LinkedHashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_LinkedHashSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * LinkedHashSet</span></span><br><span class="line"><span class="comment"> * 底层是链表实现的,是set集合中唯一一个能保证怎么存就怎么取的集合对象</span></span><br><span class="line"><span class="comment"> * 因为是HashSet的子类,所以也是保证元素唯一的,与HashSet的原理一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">LinkedHashSet&lt;String&gt; lhs = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">lhs.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">lhs.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">lhs.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">lhs.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">lhs.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">lhs.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">lhs.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">System.out.println(lhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Demo3-TreeSet"><a href="#Demo3-TreeSet" class="headerlink" title="Demo3_TreeSet"></a>Demo3_TreeSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_TreeSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * TreeSet集合是用来对象元素进行排序的,同样他也可以保证元素的唯一</span></span><br><span class="line"><span class="comment"> * 当compareTo方法返回0的时候集合中只有一个元素</span></span><br><span class="line"><span class="comment"> * 当compareTo方法返回正数的时候集合会怎么存就怎么取</span></span><br><span class="line"><span class="comment"> * 当compareTo方法返回负数的时候集合会倒序存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line"><span class="comment">//demo3();</span></span><br><span class="line"><span class="comment">//demo4();</span></span><br><span class="line"><span class="comment">//需求:将字符串按照长度排序</span></span><br><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> CompareByLen());<span class="comment">//Comparator c = new CompareByLen();</span></span><br><span class="line">ts.add(<span class="string">&quot;aaaaaaaa&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;wc&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;nba&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;cba&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(ts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TreeSet&lt;Person&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;lisi&quot;</span>, <span class="number">13</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;wangwu&quot;</span>, <span class="number">33</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;zhaoliu&quot;</span>, <span class="number">43</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;aaaa&quot;</span>, <span class="number">53</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(ts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TreeSet&lt;Person&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>, <span class="number">43</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;赵六&quot;</span>, <span class="number">33</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&#x27;张&#x27;</span> + <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&#x27;李&#x27;</span> + <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&#x27;王&#x27;</span> + <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&#x27;赵&#x27;</span> + <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(ts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TreeSet&lt;Person&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;周七&quot;</span>, <span class="number">13</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>, <span class="number">43</span>));</span><br><span class="line">ts.add(<span class="keyword">new</span> Person(<span class="string">&quot;赵六&quot;</span>, <span class="number">33</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(ts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">ts.add(<span class="number">3</span>);</span><br><span class="line">ts.add(<span class="number">1</span>);</span><br><span class="line">ts.add(<span class="number">1</span>);</span><br><span class="line">ts.add(<span class="number">2</span>);</span><br><span class="line">ts.add(<span class="number">2</span>);</span><br><span class="line">ts.add(<span class="number">3</span>);</span><br><span class="line">ts.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(ts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareByLen</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;<span class="comment">//按照字符串的长度比较</span></span><br><span class="line"><span class="keyword">int</span> num = s1.length() - s2.length();<span class="comment">//长度为主要条件</span></span><br><span class="line"><span class="keyword">return</span> num == <span class="number">0</span> ? s1.compareTo(s2) : num;<span class="comment">//内容为次要条件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础16-List集合</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8016-List%E9%9B%86%E5%90%88/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8016-List%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="16-01-集合框架-去除ArrayList中重复字符串元素方式-掌握"><a href="#16-01-集合框架-去除ArrayList中重复字符串元素方式-掌握" class="headerlink" title="16.01_集合框架(去除ArrayList中重复字符串元素方式)(掌握)"></a>16.01_集合框架(<strong>去除ArrayList中重复字符串元素方式</strong>)(掌握)</h2><ul><li><p>A:案例演示</p><ul><li>需求：ArrayList去除集合中字符串的重复值(字符串的内容相同)</li></ul></li><li><p>思路：创建新集合方式</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  A:案例演示</span></span><br><span class="line"><span class="comment"> * 需求：ArrayList去除集合中字符串的重复值(字符串的内容相同)</span></span><br><span class="line"><span class="comment"> * 思路：创建新集合方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line">ArrayList newList = getSingle(list);</span><br><span class="line">System.out.println(newList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 去除重复</span></span><br><span class="line"><span class="comment"> * 1,返回ArrayList</span></span><br><span class="line"><span class="comment"> * 2,参数列表ArrayList</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">getSingle</span><span class="params">(ArrayList list)</span> </span>&#123;</span><br><span class="line">ArrayList newList = <span class="keyword">new</span> ArrayList();<span class="comment">//创建一个新集合</span></span><br><span class="line">Iterator it = list.iterator();<span class="comment">//获取迭代器</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;<span class="comment">//判断老集合中是否有元素</span></span><br><span class="line">String temp = (String)it.next();<span class="comment">//将每一个元素临时记录住</span></span><br><span class="line"><span class="keyword">if</span>(!newList.contains(temp)) &#123;<span class="comment">//如果新集合中不包含该元素</span></span><br><span class="line">newList.add(temp);<span class="comment">//将该元素添加到新集合中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newList;<span class="comment">//将新集合返回</span></span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="16-02-集合框架-去除ArrayList中重复自定义对象元素-掌握"><a href="#16-02-集合框架-去除ArrayList中重复自定义对象元素-掌握" class="headerlink" title="16.02_集合框架(去除ArrayList中重复自定义对象元素)(掌握)"></a>16.02_集合框架(去除ArrayList中重复自定义对象元素)(掌握)</h2><ul><li>A:案例演示<ul><li>需求：ArrayList去除集合中自定义对象元素的重复值(对象的成员变量值相同)</li></ul></li><li>B:注意事项<ul><li>重写equals()方法的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_ArrayList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment">* 需求：ArrayList去除集合中自定义对象元素的重复值(对象的成员变量值相同)</span></span><br><span class="line"><span class="comment">* B:注意事项</span></span><br><span class="line"><span class="comment">* 重写equals()方法的</span></span><br><span class="line"><span class="comment">contains方法判断是否包含,底层依赖的是equals方法</span></span><br><span class="line"><span class="comment">remove方法判断是否删除,底层依赖的是equals方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();<span class="comment">//创建集合对象</span></span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ArrayList newList = getSingle(list);//调用方法去除重复</span></span><br><span class="line"><span class="comment">//System.out.println(newList);</span></span><br><span class="line">list.remove(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建新集合将重复元素去掉</span></span><br><span class="line"><span class="comment"> * 1,明确返回值类型,返回ArrayList</span></span><br><span class="line"><span class="comment"> * 2,明确参数列表ArrayList</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析:</span></span><br><span class="line"><span class="comment"> * 1,创建新集合</span></span><br><span class="line"><span class="comment"> * 2,根据传入的集合(老集合)获取迭代器</span></span><br><span class="line"><span class="comment"> * 3,遍历老集合</span></span><br><span class="line"><span class="comment"> * 4,通过新集合判断是否包含老集合中的元素,如果包含就不添加,如果不包含就添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">getSingle</span><span class="params">(ArrayList list)</span> </span>&#123;</span><br><span class="line">ArrayList newList = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//1,创建新集合</span></span><br><span class="line">Iterator it = list.iterator();<span class="comment">//2,根据传入的集合(老集合)获取迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;<span class="comment">//3,遍历老集合</span></span><br><span class="line">Object obj = it.next();<span class="comment">//记录住每一个元素</span></span><br><span class="line"><span class="keyword">if</span>(!newList.contains(obj)) &#123;<span class="comment">//如果新集合中不包含老集合中的元素</span></span><br><span class="line">newList.add(obj);<span class="comment">//将该元素添加</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="16-03-集合框架-LinkedList的特有功能-掌握"><a href="#16-03-集合框架-LinkedList的特有功能-掌握" class="headerlink" title="16.03_集合框架(LinkedList的特有功能)(掌握)"></a>16.03_集合框架(LinkedList的特有功能)(掌握)</h3></li></ul></li><li>A:LinkedList类概述</li><li>B:LinkedList类特有功能<ul><li>public void addFirst(E e)及addLast(E e)</li><li>public E getFirst()及getLast()</li><li>public E removeFirst()及public E removeLast()</li><li>public E get(int index);</li></ul></li></ul><h3 id="16-04-集合框架-栈和队列数据结构-掌握"><a href="#16-04-集合框架-栈和队列数据结构-掌握" class="headerlink" title="16.04_集合框架(栈和队列数据结构)(掌握)"></a>16.04_集合框架(栈和队列数据结构)(掌握)</h3><ul><li><p>栈</p><ul><li>先进后出 </li></ul></li><li><p>队列</p><ul><li>先进先出<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用LinkedList模拟栈结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">Stack s = <span class="keyword">new</span> Stack();</span><br><span class="line">s.in(<span class="string">&quot;a&quot;</span>);<span class="comment">//进栈</span></span><br><span class="line">s.in(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">s.in(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">s.in(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!s.isEmpty()) &#123;<span class="comment">//判断栈结构是否为空</span></span><br><span class="line">System.out.println(s.out());<span class="comment">//弹栈</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList();<span class="comment">//创建集合对象</span></span><br><span class="line">list.addLast(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.addLast(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.addLast(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.addLast(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*System.out.println(list.removeLast());</span></span><br><span class="line"><span class="comment">System.out.println(list.removeLast());</span></span><br><span class="line"><span class="comment">System.out.println(list.removeLast());</span></span><br><span class="line"><span class="comment">System.out.println(list.removeLast());*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!list.isEmpty()) &#123;</span><br><span class="line">System.out.println(list.removeLast());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="16-05-集合框架-用LinkedList模拟栈数据结构的集合并测试-掌握"><a href="#16-05-集合框架-用LinkedList模拟栈数据结构的集合并测试-掌握" class="headerlink" title="16.05_集合框架(用LinkedList模拟栈数据结构的集合并测试)(掌握)"></a>16.05_集合框架(用LinkedList模拟栈数据结构的集合并测试)(掌握)</h3></li></ul></li><li><p>A:案例演示</p><ul><li><p>需求：请用LinkedList模拟栈数据结构的集合，并测试</p></li><li><p>创建一个类将Linked中的方法封装</p></li><li><pre><code>  public class Stack &#123;      private LinkedList list = new LinkedList();        //创建LinkedList对象</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void in(Object obj) &#123;</span><br><span class="line">list.addLast(obj);&#x2F;&#x2F;封装addLast()方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Object out() &#123;</span><br><span class="line">return list.removeLast();&#x2F;&#x2F;封装removeLast()方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">return list.isEmpty();&#x2F;&#x2F;封装isEmpty()方法</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="16-06-集合框架-泛型概述和基本使用-掌握"><a href="#16-06-集合框架-泛型概述和基本使用-掌握" class="headerlink" title="16.06_集合框架(泛型概述和基本使用)(掌握)"></a>16.06_集合框架(泛型概述和基本使用)(掌握)</h3><ul><li>A:泛型概述</li><li>B:泛型好处<ul><li>提高安全性(将运行期的错误转换到编译期) </li><li>省去强转的麻烦</li></ul></li><li>C:泛型基本使用<ul><li>&lt;&gt;中放的必须是引用数据类型 </li></ul></li><li>D:泛型使用注意事项<ul><li>前后的泛型必须一致,或者后面的泛型可以省略不写(1.7的新特性菱形泛型)  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_Generic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//int[] arr = new byte[5];//数组要保证前后的数据类型一致</span></span><br><span class="line"><span class="comment">//ArrayList&lt;Object&gt; list = new ArrayList&lt;Person&gt;();//集合的泛型要保证前后的数据类型一致</span></span><br><span class="line"><span class="comment">//ArrayList&lt;Object&gt; list = new ArrayList&lt;&gt;();//1.7版本的新特性,菱形泛型</span></span><br><span class="line">ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//泛型最好不要定义成Object,没有意义</span></span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"><span class="comment">//list.add(110);</span></span><br><span class="line"><span class="comment">//list.add(true);</span></span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">Iterator&lt;Person&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line"><span class="comment">//System.out.println(it.next());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(it.next().getName() + &quot;...&quot; + it.next().getAge());//next方法只能调用一次,如果调用多次会将指针向后移动多次</span></span><br><span class="line">Person p = it.next();</span><br><span class="line">System.out.println(p.getName() + <span class="string">&quot;...&quot;</span> + p.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-07-集合框架-ArrayList存储字符串和自定义对象并遍历泛型版-掌握"><a href="#16-07-集合框架-ArrayList存储字符串和自定义对象并遍历泛型版-掌握" class="headerlink" title="16.07_集合框架(ArrayList存储字符串和自定义对象并遍历泛型版)(掌握)"></a>16.07_集合框架(ArrayList存储字符串和自定义对象并遍历泛型版)(掌握)</h3></li></ul></li><li>A:案例演示<ul><li>ArrayList存储字符串并遍历泛型版<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment"> * ArrayList存储字符串并遍历泛型版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>, <span class="number">25</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>));</span><br><span class="line"></span><br><span class="line">Iterator&lt;Person&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">Person p = it.next();<span class="comment">//将集合中的每一个元素用Person记录</span></span><br><span class="line">System.out.println(p.getName() + <span class="string">&quot;...&quot;</span> + p.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//创建集合对象</span></span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="16-08-集合框架-泛型的由来-了解"><a href="#16-08-集合框架-泛型的由来-了解" class="headerlink" title="16.08_集合框架(泛型的由来)(了解)"></a>16.08_集合框架(泛型的由来)(了解)</h3></li></ul></li><li>A:案例演示<ul><li>泛型的由来:通过Object转型问题引入</li><li><strong>早期的Object类型可以接收任意的对象类型，但是在实际的使用中，会有类型转换的问题。<br>也就存在这隐患，所以Java提供了泛型来解决这个安全问题。</strong></li></ul></li></ul><h3 id="16-09-集合框架-泛型类的概述及使用-了解"><a href="#16-09-集合框架-泛型类的概述及使用-了解" class="headerlink" title="16.09_集合框架(泛型类的概述及使用)(了解)"></a>16.09_集合框架(泛型类的概述及使用)(了解)</h3><ul><li>A:泛型类概述<T><ul><li>把泛型定义在类上</li></ul></li><li>B:定义格式<ul><li>public class 类名&lt;泛型类型1,…&gt;</li></ul></li><li>C:注意事项    <ul><li>泛型类型必须是引用类型</li></ul></li><li>D:案例演示<ul><li>泛型类的使用</li></ul></li></ul><h3 id="16-10-集合框架-泛型方法的概述和使用-了解"><a href="#16-10-集合框架-泛型方法的概述和使用-了解" class="headerlink" title="16.10_集合框架(泛型方法的概述和使用)(了解)"></a>16.10_集合框架(泛型方法的概述和使用)(了解)</h3><ul><li>A:泛型方法概述<ul><li>把泛型定义在方法上</li></ul></li><li>B:定义格式    <ul><li>public &lt;泛型类型&gt; 返回类型 方法名(泛型类型 变量名)</li></ul></li><li>C:案例演示<ul><li>泛型方法的使用</li></ul></li></ul><h3 id="16-11-集合框架-泛型接口的概述和使用-了解"><a href="#16-11-集合框架-泛型接口的概述和使用-了解" class="headerlink" title="16.11_集合框架(泛型接口的概述和使用)(了解)"></a>16.11_集合框架(泛型接口的概述和使用)(了解)</h3><ul><li>A:泛型接口概述<ul><li>把泛型定义在接口上</li></ul></li><li>B:定义格式    <ul><li>public interface 接口名&lt;泛型类型&gt;</li></ul></li><li>C:案例演示<ul><li>泛型接口的使用</li></ul></li></ul><h3 id="16-12-集合框架-泛型高级之通配符-了解"><a href="#16-12-集合框架-泛型高级之通配符-了解" class="headerlink" title="16.12_集合框架(泛型高级之通配符)(了解)"></a>16.12_集合框架(泛型高级之通配符)(了解)</h3><ul><li>A:泛型通配符&lt;?&gt;<ul><li>任意类型，如果没有明确，那么就是Object以及任意的Java类了</li></ul></li><li>B:? extends E<ul><li>向下限定，E及其子类</li></ul></li><li>C:? super E<ul><li>向上限定，E及其父类</li></ul></li></ul><h3 id="16-13-集合框架-增强for的概述和使用-掌握"><a href="#16-13-集合框架-增强for的概述和使用-掌握" class="headerlink" title="16.13_集合框架(增强for的概述和使用)(掌握)"></a>16.13_集合框架(增强for的概述和使用)(掌握)</h3><ul><li>A:增强for概述<ul><li>简化数组和Collection集合的遍历</li></ul></li><li>B:格式：</li><li><pre><code>  for(元素数据类型 变量 : 数组或者Collection集合) &#123;      使用变量即可，该变量就是元素  &#125;</code></pre></li><li>C:案例演示<ul><li>数组，集合存储元素用增强for遍历</li></ul></li><li>D:好处<ul><li>简化遍历</li></ul></li></ul><h3 id="16-14-集合框架-ArrayList存储字符串和自定义对象并遍历增强for版-掌握"><a href="#16-14-集合框架-ArrayList存储字符串和自定义对象并遍历增强for版-掌握" class="headerlink" title="16.14_集合框架(ArrayList存储字符串和自定义对象并遍历增强for版)(掌握)"></a>16.14_集合框架(ArrayList存储字符串和自定义对象并遍历增强for版)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li><p>ArrayList存储字符串并遍历增强for版</p></li><li><pre><code>  ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();  list.add(&quot;a&quot;);  list.add(&quot;b&quot;);  list.add(&quot;c&quot;);  list.add(&quot;d&quot;);  for(String s : list) &#123;      System.out.println(s);  &#125;</code></pre><h3 id="16-15-集合框架-三种迭代的能否删除-掌握"><a href="#16-15-集合框架-三种迭代的能否删除-掌握" class="headerlink" title="16.15_集合框架(三种迭代的能否删除)(掌握)"></a>16.15_集合框架(三种迭代的能否删除)(掌握)</h3></li></ul></li><li><p>普通for循环,可以删除,但是索引要–</p></li><li><p>迭代器,可以删除,但是必须使用迭代器自身的remove方法,否则会出现并发修改异常</p></li><li><p>增强for循环不能删除</p></li></ul><h3 id="16-16-集合框架-静态导入的概述和使用-了解"><a href="#16-16-集合框架-静态导入的概述和使用-了解" class="headerlink" title="16.16_集合框架(静态导入的概述和使用)(了解)"></a>16.16_集合框架(静态导入的概述和使用)(了解)</h3><ul><li>A:静态导入概述</li><li>B:格式：<ul><li>import static 包名….类名.方法名;</li><li>可以直接导入到方法的级别</li></ul></li><li>C:注意事项<ul><li>方法必须是静态的,如果有多个同名的静态方法，容易不知道使用谁?<br>这个时候要使用，必须加前缀。由此可见，意义不大，所以一般不用，但是要能看懂。</li></ul></li></ul><h3 id="16-17-集合框架-可变参数的概述和使用-掌握"><a href="#16-17-集合框架-可变参数的概述和使用-掌握" class="headerlink" title="16.17_集合框架(可变参数的概述和使用)(掌握)"></a>16.17_集合框架(可变参数的概述和使用)(掌握)</h3><ul><li>A:可变参数概述<ul><li>定义方法的时候不知道该定义多少个参数</li></ul></li><li>B:格式<ul><li>修饰符 返回值类型 方法名(数据类型…  变量名){}</li></ul></li><li>C:注意事项：<ul><li>这里的变量其实是一个数组</li><li>如果一个方法有可变参数，并且有多个参数，那么，可变参数肯定是最后一个</li></ul></li></ul><h3 id="16-18-集合框架-Arrays工具类的asList-方法的使用-掌握"><a href="#16-18-集合框架-Arrays工具类的asList-方法的使用-掌握" class="headerlink" title="16.18_集合框架(Arrays工具类的asList()方法的使用)(掌握)"></a>16.18_集合框架(Arrays工具类的asList()方法的使用)(掌握)</h3><ul><li>A:案例演示<ul><li>Arrays工具类的asList()方法的使用</li><li>Collection中toArray(T[] a)泛型版的集合转数组</li></ul></li></ul><h3 id="16-19-集合框架-集合嵌套之ArrayList嵌套ArrayList-掌握"><a href="#16-19-集合框架-集合嵌套之ArrayList嵌套ArrayList-掌握" class="headerlink" title="16.19_集合框架(集合嵌套之ArrayList嵌套ArrayList)(掌握)"></a>16.19_集合框架(集合嵌套之ArrayList嵌套ArrayList)(掌握)</h3><ul><li>A:案例演示<ul><li>集合嵌套之ArrayList嵌套ArrayList</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础15-Colletion集合</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8015-Colletion%E9%9B%86%E5%90%88/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8015-Colletion%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="15-01-集合框架-对象数组的概述和使用"><a href="#15-01-集合框架-对象数组的概述和使用" class="headerlink" title="15.01_集合框架(对象数组的概述和使用)"></a>15.01_集合框架(对象数组的概述和使用)</h3><ul><li><p>A:案例演示</p><ul><li>需求：我有5个学生，请把这个5个学生的信息存储到数组中，并遍历数组，获取得到每一个学生信息。</li></ul></li><li><pre><code>  Student[] arr = new Student[5];                    //存储学生对象  arr[0] = new Student(&quot;张三&quot;, 23);  arr[1] = new Student(&quot;李四&quot;, 24);  arr[2] = new Student(&quot;王五&quot;, 25);  arr[3] = new Student(&quot;赵六&quot;, 26);  arr[4] = new Student(&quot;马哥&quot;, 20);  for (int i = 0; i &lt; arr.length; i++) &#123;      System.out.println(arr[i]);  &#125;</code></pre></li><li><p>B:画图演示</p><ul><li>把学生数组的案例画图讲解</li><li>数组和集合存储引用数据类型,存的都是地址值。</li></ul></li></ul><h3 id="15-02-集合框架-集合的由来及集合继承体系图"><a href="#15-02-集合框架-集合的由来及集合继承体系图" class="headerlink" title="15.02_集合框架(集合的由来及集合继承体系图)"></a>15.02_集合框架(集合的由来及集合继承体系图)</h3><ul><li>A:集合的由来<ul><li>数组长度是固定,当添加的元素超过了数组的长度时需要对数组重新定义,太麻烦,java内部给我们提供了集合类,能存储任意对象,长度是可以改变的,随着元素的增加而增加,随着元素的减少而减少 </li></ul></li><li>B:<strong>数组和集合的区别</strong><ul><li>区别1 : <ul><li>数组既可以存储基本数据类型,又可以存储引用数据类型,基本数据类型存储的是值,引用数据类型存储的是地址值</li><li>集合只能存储引用数据类型(对象)集合中也可以存储基本数据类型,但是在存储的时候会自动装箱变成对象</li></ul></li><li>区别2:<ul><li>数组长度是固定的,不能自动增长</li><li>集合的长度的是可变的,可以根据元素的增加而增长</li></ul></li></ul></li><li>C:数组和集合什么时候用<pre><code>  * 1,如果元素个数是固定的推荐用数组  * 2,如果元素个数不是固定的推荐用集合</code></pre></li><li>D:集合继承体系图</li></ul><h3 id="15-03-集合框架-Collection集合的基本功能测试"><a href="#15-03-集合框架-Collection集合的基本功能测试" class="headerlink" title="15.03_集合框架(Collection集合的基本功能测试)"></a>15.03_集合框架(Collection集合的基本功能测试)</h3><ul><li><p>A:案例演示    </p></li><li><pre><code>  基本功能演示  boolean add(E e)  boolean remove(Object o)  void clear()  boolean contains(Object o)  boolean isEmpty()  int size()</code></pre></li><li><p>B:注意:</p></li><li><pre><code>  collectionXxx.java使用了未经检查或不安全的操作.  注意:要了解详细信息,请使用 -Xlint:unchecked重新编译.  java编译器认为该程序存在安全隐患  温馨提示:这不是编译失败,所以先不用理会,等学了泛型你就知道了</code></pre></li></ul><h3 id="15-04-集合框架-集合的遍历之集合转数组遍历"><a href="#15-04-集合框架-集合的遍历之集合转数组遍历" class="headerlink" title="15.04_集合框架(集合的遍历之集合转数组遍历)"></a>15.04_集合框架(集合的遍历之集合转数组遍历)</h3><ul><li><p>A:集合的遍历</p><ul><li>其实就是依次获取集合中的每一个元素。</li></ul></li><li><p>B:案例演示</p><ul><li><p>把集合转成数组，可以实现集合的遍历</p></li><li><p>toArray()</p></li><li><pre><code>   Collection coll = new ArrayList();   coll.add(new Student(&quot;张三&quot;,23));        //Object obj = new Student(&quot;张三&quot;,23);   coll.add(new Student(&quot;李四&quot;,24));   coll.add(new Student(&quot;王五&quot;,25));   coll.add(new Student(&quot;赵六&quot;,26));   Object[] arr = coll.toArray();                //将集合转换成数组   for (int i = 0; i &lt; arr.length; i++) &#123;       Student s = (Student)arr[i];            //强转成Student       System.out.println(s.getName() + &quot;,&quot; + s.getAge());   &#125;</code></pre></li></ul></li></ul><h3 id="15-05-集合框架-Collection集合的带All功能测试"><a href="#15-05-集合框架-Collection集合的带All功能测试" class="headerlink" title="15.05_集合框架(Collection集合的带All功能测试)"></a>15.05_集合框架(Collection集合的带All功能测试)</h3><ul><li><p>A:案例演示</p></li><li><pre><code>  带All的功能演示  boolean addAll(Collection c)  boolean removeAll(Collection c)  boolean containsAll(Collection c)  boolean retainAll(Collection c)</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_CollectionAll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">带All的功能演示</span></span><br><span class="line"><span class="comment">boolean addAll(Collection c)</span></span><br><span class="line"><span class="comment">boolean removeAll(Collection c)</span></span><br><span class="line"><span class="comment">boolean containsAll(Collection c)</span></span><br><span class="line"><span class="comment">boolean retainAll(Collection c)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line"><span class="comment">//demo2();</span></span><br><span class="line"><span class="comment">//demo3();</span></span><br><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取交集,如果调用的集合改变就返回true,如果调用的集合不变就返回false</span></span><br><span class="line"><span class="keyword">boolean</span> b = c1.retainAll(c2);<span class="comment">//取交集</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;z&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = c1.containsAll(c2);<span class="comment">//判断调用的集合是否包含传入的集合</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;z&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = c1.removeAll(c2);<span class="comment">//删除的是交集</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();<span class="comment">//alt + shift + r改名</span></span><br><span class="line">c2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//c1.addAll(c2);//将c2中的每一个元素添加到c1中</span></span><br><span class="line">c1.add(c2);<span class="comment">//将c2看成一个对象添加到c1中</span></span><br><span class="line">System.out.println(c1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###15.06_集合框架(集合的遍历之迭代器遍历)</p><ul><li><p>A:迭代器概述</p><ul><li>集合是用来存储元素,存储的元素需要查看,那么就需要迭代(遍历) </li></ul></li><li><p>B:案例演示</p><ul><li><p>迭代器的使用</p><pre><code>  Collection c = new ArrayList();  c.add(&quot;a&quot;);  c.add(&quot;b&quot;);  c.add(&quot;c&quot;);  c.add(&quot;d&quot;);  Iterator it = c.iterator();                        //获取迭代器的引用  while(it.hasNext()) &#123;                            //集合中的迭代方法(遍历)      System.out.println(it.next());  &#125;</code></pre></li></ul></li></ul><h3 id="15-07-集合框架-Collection存储自定义对象并遍历"><a href="#15-07-集合框架-Collection存储自定义对象并遍历" class="headerlink" title="15.07_集合框架(Collection存储自定义对象并遍历)"></a>15.07_集合框架(Collection存储自定义对象并遍历)</h3><ul><li><p>A:案例演示</p><ul><li><p>Collection存储自定义对象并用迭代器遍历</p></li><li><pre><code>  Collection c = new ArrayList();  c.add(new Student(&quot;张三&quot;,23));  c.add(new Student(&quot;李四&quot;,24));  c.add(new Student(&quot;王五&quot;,25));  c.add(new Student(&quot;赵六&quot;,26));  c.add(new Student(&quot;赵六&quot;,26));  for(Iterator it = c.iterator();it.hasNext();) &#123;      Student s = (Student)it.next();                        //向下转型      System.out.println(s.getName() + &quot;,&quot; + s.getAge());    //获取对象中的姓名和年龄  &#125;  System.out.println(&quot;------------------------------&quot;);  Iterator it = c.iterator();                                //获取迭代器  while(it.hasNext()) &#123;                                    //判断集合中是否有元素      //System.out.println(((Student)(it.next())).getName() + &quot;,&quot; + ((Student)(it.next())).getAge());      Student s = (Student)it.next();                        //向下转型      System.out.println(s.getName() + &quot;,&quot; + s.getAge());    //获取对象中的姓名和年龄  &#125;</code></pre></li></ul></li></ul><h3 id="15-08-集合框架-迭代器的原理及源码解析-了解"><a href="#15-08-集合框架-迭代器的原理及源码解析-了解" class="headerlink" title="15.08_集合框架(迭代器的原理及源码解析)(了解)"></a>15.08_集合框架(迭代器的原理及源码解析)(了解)</h3><ul><li>A:迭代器原理<ul><li>迭代器原理:迭代器是对集合进行遍历,而每一个集合内部的存储结构都是不同的, </li><li>所以每一个集合存和取都是不一样,那么就需要在每一个类中定义hasNext()和next()方法,</li><li>这样做是可以的,但是会让整个集合体系过于臃肿,迭代器是将这样的方法向上抽取出接口,</li><li>然后在每个类的内部,定义自己迭代方式,这样做的好处有二,</li><li>第一规定了整个集合体系的遍历方式都是hasNext()和next()方法,</li><li>第二,代码有底层内部实现,使用者不用管怎么实现的,会用即可 </li></ul></li><li>B:迭代器源码解析<ul><li>1,在eclipse中ctrl + shift + t找到ArrayList类</li><li>2,ctrl+o查找iterator()方法</li><li>3,查看返回值类型是new Itr(),说明Itr这个类实现Iterator接口</li><li>4,查找Itr这个内部类,发现重写了Iterator中的所有抽象方法 </li></ul></li></ul><h3 id="15-09-集合框架-List集合的特有功能概述和测试"><a href="#15-09-集合框架-List集合的特有功能概述和测试" class="headerlink" title="15.09_集合框架(List集合的特有功能概述和测试)"></a>15.09_集合框架(List集合的特有功能概述和测试)</h3><ul><li>A:List集合的特有功能概述<ul><li>void add(int index,E element)</li><li>E remove(int index)</li><li>E get(int index)</li><li>E set(int index,E element)</li></ul></li></ul><h3 id="15-10-集合框架-List集合存储学生对象并遍历"><a href="#15-10-集合框架-List集合存储学生对象并遍历" class="headerlink" title="15.10_集合框架(List集合存储学生对象并遍历)"></a>15.10_集合框架(List集合存储学生对象并遍历)</h3><ul><li><p>A:案例演示</p><ul><li><p>通过size()和get()方法结合使用遍历。</p><pre><code>  List list = new ArrayList();  list.add(new Student(&quot;张三&quot;, 18));  list.add(new Student(&quot;李四&quot;, 18));  list.add(new Student(&quot;王五&quot;, 18));  list.add(new Student(&quot;赵六&quot;, 18));  for(int i = 0; i &lt; list.size(); i++) &#123;      Student s = (Student)list.get(i);      System.out.println(s.getName() + &quot;,&quot; + s.getAge());  &#125;</code></pre></li></ul></li></ul><h3 id="15-11-集合框架-并发修改异常产生的原因及解决方案"><a href="#15-11-集合框架-并发修改异常产生的原因及解决方案" class="headerlink" title="15.11_集合框架(并发修改异常产生的原因及解决方案)"></a>15.11_集合框架(并发修改异常产生的原因及解决方案)</h3><ul><li><p>A:案例演示</p><ul><li><p>需求：我有一个集合，请问，我想判断里面有没有”world”这个元素，如果有，我就添加一个”javaee”元素，请写代码实现。</p><pre><code>  List list = new ArrayList();  list.add(&quot;a&quot;);  list.add(&quot;b&quot;);  list.add(&quot;world&quot;);  list.add(&quot;d&quot;);  list.add(&quot;e&quot;);  /*Iterator it = list.iterator();  while(it.hasNext()) &#123;      String str = (String)it.next();      if(str.equals(&quot;world&quot;)) &#123;          list.add(&quot;javaee&quot;);            //这里会抛出ConcurrentModificationException并发修改异常      &#125;  &#125;*/</code></pre></li></ul></li></ul><ul><li><p>B:ConcurrentModificationException出现</p><ul><li>迭代器遍历，集合修改集合</li></ul></li><li><p>C:解决方案</p><ul><li><p>a:迭代器迭代元素，迭代器修改元素(ListIterator的特有功能add)</p></li><li><p>b:集合遍历元素，集合修改元素</p><pre><code>  ListIterator lit = list.listIterator();        //如果想在遍历的过程中添加元素,可以用ListIterator中的add方法  while(lit.hasNext()) &#123;      String str = (String)lit.next();      if(str.equals(&quot;world&quot;)) &#123;          lit.add(&quot;javaee&quot;);              //list.add(&quot;javaee&quot;);      &#125;  &#125;</code></pre></li></ul></li></ul><h3 id="15-12-集合框架-ListIterator-了解"><a href="#15-12-集合框架-ListIterator-了解" class="headerlink" title="15.12_集合框架(ListIterator)(了解)"></a>15.12_集合框架(ListIterator)(了解)</h3><ul><li>boolean hasNext()是否有下一个</li><li>boolean hasPrevious()是否有前一个</li><li>Object next()返回下一个元素</li><li>Object previous();返回上一个元素</li></ul><h3 id="15-13-集合框架-Vector的特有功能-了解"><a href="#15-13-集合框架-Vector的特有功能-了解" class="headerlink" title="15.13_集合框架(Vector的特有功能)(了解)"></a>15.13_集合框架(Vector的特有功能)(了解)</h3><ul><li><p>A:Vector类概述</p></li><li><p>B:Vector类特有功能</p><ul><li>public void addElement(E obj)</li><li>public E elementAt(int index)</li><li>public Enumeration elements()</li></ul></li><li><p>C:案例演示    </p><ul><li><p>Vector的迭代</p><pre><code>  Vector v = new Vector();                //创建集合对象,List的子类  v.addElement(&quot;a&quot;);  v.addElement(&quot;b&quot;);  v.addElement(&quot;c&quot;);  v.addElement(&quot;d&quot;);  //Vector迭代  Enumeration en = v.elements();            //获取枚举  while(en.hasMoreElements()) &#123;            //判断集合中是否有元素      System.out.println(en.nextElement());//获取集合中的元素  &#125;</code></pre></li></ul></li></ul><h3 id="15-14-集合框架-数据结构之数组和链表"><a href="#15-14-集合框架-数据结构之数组和链表" class="headerlink" title="15.14_集合框架(数据结构之数组和链表)"></a>15.14_集合框架(数据结构之数组和链表)</h3><ul><li>A:数组<ul><li>查询快修改也快</li><li>增删慢</li></ul></li><li>B:链表<ul><li>查询慢,修改也慢</li><li>增删快</li></ul></li></ul><h3 id="15-15-集合框架-List的三个子类的特点"><a href="#15-15-集合框架-List的三个子类的特点" class="headerlink" title="15.15_集合框架(List的三个子类的特点)"></a>15.15_集合框架(List的三个子类的特点)</h3><ul><li><p>A:List的三个子类的特点</p></li><li><pre><code>  ArrayList:      底层数据结构是数组，查询快，增删慢。      线程不安全，效率高。  Vector:      底层数据结构是数组，查询快，增删慢。      线程安全，效率低。  Vector相对ArrayList查询慢(线程安全的)  Vector相对LinkedList增删慢(数组结构)  LinkedList:      底层数据结构是链表，查询慢，增删快。      线程不安全，效率高。  Vector和ArrayList的区别      Vector是线程安全的,效率低      ArrayList是线程不安全的,效率高  共同点:都是数组实现的  ArrayList和LinkedList的区别      ArrayList底层是数组结果,查询和修改快      LinkedList底层是链表结构的,增和删比较快,查询和修改比较慢  共同点:都是线程不安全的</code></pre></li><li><p>B:List有三个儿子，我们到底使用谁呢?</p><pre><code>  查询多用ArrayList  增删多用LinkedList  如果都多ArrayList</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础14-正则表达式</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8014-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8014-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="14-01-常见对象-正则表达式的概述和简单使用"><a href="#14-01-常见对象-正则表达式的概述和简单使用" class="headerlink" title="14.01_常见对象(正则表达式的概述和简单使用)"></a>14.01_常见对象(正则表达式的概述和简单使用)</h3><ul><li><p>A:正则表达式</p><ul><li>是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串。其实就是一种规则。有自己特殊的应用。</li><li>作用:比如注册邮箱,邮箱有用户名和密码,一般会对其限制长度,这个限制长度的事情就是正则表达式做的</li></ul></li><li><p>B:案例演示</p><ul><li><p>需求：校验qq号码.</p><ul><li>1:要求必须是5-15位数字</li><li>2:0不能开头</li><li>3:必须都是数字</li></ul></li><li><p>a:非正则表达式实现</p></li><li><p>b:正则表达式实现</p></li></ul></li></ul><h3 id="14-02-常见对象-字符类演示"><a href="#14-02-常见对象-字符类演示" class="headerlink" title="14.02_常见对象(字符类演示)"></a>14.02_常见对象(字符类演示)</h3><ul><li>A:字符类<ul><li>[abc] a、b 或 c（简单类） </li><li>[^abc] 任何字符，除了 a、b 或 c（否定） </li><li>[a-zA-Z] a到 z 或 A到 Z，两头的字母包括在内（范围） </li><li>[0-9] 0到9的字符都包括<h3 id="14-03-常见对象-预定义字符类演示"><a href="#14-03-常见对象-预定义字符类演示" class="headerlink" title="14.03_常见对象(预定义字符类演示)"></a>14.03_常见对象(预定义字符类演示)</h3></li></ul></li><li>A:预定义字符类<ul><li>. 任何字符。</li><li>\d 数字：[0-9]</li><li>\w 单词字符：[a-zA-Z_0-9]<h3 id="14-04-常见对象-数量词"><a href="#14-04-常见对象-数量词" class="headerlink" title="14.04_常见对象(数量词)"></a>14.04_常见对象(数量词)</h3></li></ul></li><li>A:Greedy 数量词 <ul><li>X? X，一次或一次也没有</li><li>X* X，零次或多次</li><li>X+ X，一次或多次</li><li>X{n} X，恰好 n 次 </li><li>X{n,} X，至少 n 次 </li><li>X{n,m} X，至少 n 次，但是不超过 m 次 </li></ul></li></ul><h3 id="14-05-常见对象-正则表达式的分割功能"><a href="#14-05-常见对象-正则表达式的分割功能" class="headerlink" title="14.05_常见对象(正则表达式的分割功能)"></a>14.05_常见对象(正则表达式的分割功能)</h3><ul><li>A:正则表达式的分割功能<ul><li>String类的功能：public String[] split(String regex)</li></ul></li><li>B:案例演示<ul><li>正则表达式的分割功能</li></ul></li></ul><h3 id="14-06-常见对象-把给定字符串中的数字排序"><a href="#14-06-常见对象-把给定字符串中的数字排序" class="headerlink" title="14.06_常见对象(把给定字符串中的数字排序)"></a>14.06_常见对象(把给定字符串中的数字排序)</h3><ul><li>A:案例演示<ul><li>需求：我有如下一个字符串:”91 27 46 38 50”，<br>请写代码实现最终输出结果是：”27 38 46 50 91”</li></ul></li></ul><h3 id="14-07-常见对象-正则表达式的替换功能"><a href="#14-07-常见对象-正则表达式的替换功能" class="headerlink" title="14.07_常见对象(正则表达式的替换功能)"></a>14.07_常见对象(正则表达式的替换功能)</h3><ul><li>A:正则表达式的替换功能<ul><li>String类的功能：public String replaceAll(String regex,String replacement)</li></ul></li><li>B:案例演示<ul><li>正则表达式的替换功能</li></ul></li></ul><h3 id="14-08-常见对象-正则表达式的分组功能"><a href="#14-08-常见对象-正则表达式的分组功能" class="headerlink" title="14.08_常见对象(正则表达式的分组功能)"></a>14.08_常见对象(正则表达式的分组功能)</h3><ul><li><p>A:正则表达式的分组功能</p><ul><li>捕获组可以通过从左到右计算其开括号来编号。例如，在表达式 ((A)(B(C))) 中，存在四个这样的组： </li></ul></li><li><pre><code>  1     ((A)(B(C)))   2     (A   3     (B(C))   4     (C)   组零始终代表整个表达式。</code></pre></li><li><p>B:案例演示<br>  a:切割</p><pre><code>  需求：请按照叠词切割： &quot;sdqqfgkkkhjppppkl&quot;;</code></pre><p>  b:替换</p><pre><code>  需求：我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程  将字符串还原成:“我要学编程”。</code></pre><h3 id="14-09-常见对象-Pattern和Matcher的概述"><a href="#14-09-常见对象-Pattern和Matcher的概述" class="headerlink" title="14.09_常见对象(Pattern和Matcher的概述)"></a>14.09_常见对象(Pattern和Matcher的概述)</h3></li><li><p>A:Pattern和Matcher的概述</p></li><li><p>B:模式和匹配器的典型调用顺序</p><ul><li><p>通过JDK提供的API，查看Pattern类的说明</p></li><li><p>典型的调用顺序是 </p></li><li><p>Pattern p = Pattern.compile(“a*b”);</p></li><li><p>Matcher m = p.matcher(“aaaaab”);</p></li><li><p>boolean b = m.matches();</p></li></ul></li></ul><h3 id="14-10-常见对象-正则表达式的获取功能"><a href="#14-10-常见对象-正则表达式的获取功能" class="headerlink" title="14.10_常见对象(正则表达式的获取功能)"></a>14.10_常见对象(正则表达式的获取功能)</h3><ul><li>A:正则表达式的获取功能<ul><li>Pattern和Matcher的结合使用</li></ul></li><li>B:案例演示<ul><li>需求：把一个字符串中的手机号码获取出来</li></ul></li></ul><h3 id="14-11-常见对象-Math类概述和方法使用"><a href="#14-11-常见对象-Math类概述和方法使用" class="headerlink" title="14.11_常见对象(Math类概述和方法使用)"></a>14.11_常见对象(Math类概述和方法使用)</h3><ul><li>A:Math类概述<ul><li>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。 </li></ul></li><li>B:成员方法<ul><li>public static int abs(int a)</li><li>public static double ceil(double a)</li><li>public static double floor(double a)</li><li>public static int max(int a,int b) min自学</li><li>public static double pow(double a,double b)</li><li>public static double random()</li><li>public static int round(float a) 参数为double的自学</li><li>public static double sqrt(double a)</li></ul></li></ul><h3 id="14-12-常见对象-Random类的概述和方法使用"><a href="#14-12-常见对象-Random类的概述和方法使用" class="headerlink" title="14.12_常见对象(Random类的概述和方法使用)"></a>14.12_常见对象(Random类的概述和方法使用)</h3><ul><li>A:Random类的概述<ul><li>此类用于产生随机数如果用相同的种子创建两个 Random 实例，</li><li>则对每个实例进行相同的方法调用序列，它们将生成并返回相同的数字序列。</li></ul></li><li>B:构造方法<ul><li>public Random()</li><li>public Random(long seed)</li></ul></li><li>C:成员方法<ul><li>public int nextInt()</li><li>public int nextInt(int n)(重点掌握)</li></ul></li></ul><h3 id="14-13-常见对象-System类的概述和方法使用"><a href="#14-13-常见对象-System类的概述和方法使用" class="headerlink" title="14.13_常见对象(System类的概述和方法使用)"></a>14.13_常见对象(System类的概述和方法使用)</h3><ul><li>A:System类的概述<ul><li>System 类包含一些有用的类字段和方法。它不能被实例化。 </li></ul></li><li>B:成员方法<ul><li>public static void gc()</li><li>public static void exit(int status)</li><li>public static long currentTimeMillis()</li><li>pubiic static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) </li></ul></li><li>C:案例演示<ul><li>System类的成员方法使用</li></ul></li></ul><h3 id="14-14-常见对象-BigInteger类的概述和方法使用"><a href="#14-14-常见对象-BigInteger类的概述和方法使用" class="headerlink" title="14.14_常见对象(BigInteger类的概述和方法使用)"></a>14.14_常见对象(BigInteger类的概述和方法使用)</h3><ul><li>A:BigInteger的概述<ul><li>可以让超过Integer范围内的数据进行运算</li></ul></li><li>B:构造方法<ul><li>public BigInteger(String val)</li></ul></li><li>C:成员方法<ul><li>public BigInteger add(BigInteger val)</li><li>public BigInteger subtract(BigInteger val)</li><li>public BigInteger multiply(BigInteger val)</li><li>public BigInteger divide(BigInteger val)</li><li>public BigInteger[] divideAndRemainder(BigInteger val)</li></ul></li></ul><h3 id="14-15-常见对象-BigDecimal类的概述和方法使用"><a href="#14-15-常见对象-BigDecimal类的概述和方法使用" class="headerlink" title="14.15_常见对象(BigDecimal类的概述和方法使用)"></a>14.15_常见对象(BigDecimal类的概述和方法使用)</h3><ul><li><p>A:BigDecimal的概述</p><ul><li><p>由于在运算的时候，float类型和double很容易丢失精度，演示案例。</p></li><li><p>所以，为了能精确的表示、计算浮点数，Java提供了BigDecimal</p></li><li><p>不可变的、任意精度的有符号十进制数。</p></li></ul></li><li><p>B:构造方法</p><ul><li>public BigDecimal(String val)</li></ul></li><li><p>C:成员方法</p><ul><li>public BigDecimal add(BigDecimal augend)</li><li>public BigDecimal subtract(BigDecimal subtrahend)</li><li>public BigDecimal multiply(BigDecimal multiplicand)</li><li>public BigDecimal divide(BigDecimal divisor)</li></ul></li><li><p>D:案例演示</p><ul><li>BigDecimal类的构造方法和成员方法使用</li></ul></li></ul><h3 id="14-16-常见对象-Date类的概述和方法使用-掌握"><a href="#14-16-常见对象-Date类的概述和方法使用-掌握" class="headerlink" title="14.16_常见对象(Date类的概述和方法使用)(掌握)"></a>14.16_常见对象(Date类的概述和方法使用)(掌握)</h3><ul><li>A:Date类的概述<ul><li>类 Date 表示特定的瞬间，精确到毫秒。 </li></ul></li><li>B:构造方法<ul><li>public Date()</li><li>public Date(long date)</li></ul></li><li>C:成员方法<ul><li>public long getTime()</li><li>public void setTime(long time)</li></ul></li></ul><h3 id="14-17-常见对象-SimpleDateFormat类实现日期和字符串的相互转换-掌握"><a href="#14-17-常见对象-SimpleDateFormat类实现日期和字符串的相互转换-掌握" class="headerlink" title="14.17_常见对象(SimpleDateFormat类实现日期和字符串的相互转换)(掌握)"></a>14.17_常见对象(SimpleDateFormat类实现日期和字符串的相互转换)(掌握)</h3><ul><li>A:DateFormat类的概述<ul><li>DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。是抽象类，所以使用其子类SimpleDateFormat</li></ul></li><li>B:SimpleDateFormat构造方法<ul><li>public SimpleDateFormat()</li><li>public SimpleDateFormat(String pattern)</li></ul></li><li>C:成员方法<ul><li>public final String format(Date date)</li><li>public Date parse(String source)</li></ul></li></ul><h3 id="14-18-常见对象-你来到这个世界多少天案例-掌握"><a href="#14-18-常见对象-你来到这个世界多少天案例-掌握" class="headerlink" title="14.18_常见对象(你来到这个世界多少天案例)(掌握)"></a>14.18_常见对象(你来到这个世界多少天案例)(掌握)</h3><ul><li>A:案例演示<ul><li>需求：算一下你来到这个世界多少天?</li></ul></li></ul><p>###14.19_常见对象(Calendar类的概述和获取日期的方法)(掌握)</p><ul><li>A:Calendar类的概述<ul><li>Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。</li></ul></li><li>B:成员方法<ul><li>public static Calendar getInstance()</li><li>public int get(int field)</li></ul></li></ul><h3 id="14-20-常见对象-Calendar类的add-和set-方法-掌握"><a href="#14-20-常见对象-Calendar类的add-和set-方法-掌握" class="headerlink" title="14.20_常见对象(Calendar类的add()和set()方法)(掌握)"></a>14.20_常见对象(Calendar类的add()和set()方法)(掌握)</h3><ul><li>A:成员方法<ul><li>public void add(int field,int amount)</li><li>public final void set(int year,int month,int date)</li></ul></li><li>B:案例演示<ul><li>Calendar类的成员方法使用</li></ul></li></ul><h3 id="14-21-常见对象-如何获取任意年份是平年还是闰年-掌握"><a href="#14-21-常见对象-如何获取任意年份是平年还是闰年-掌握" class="headerlink" title="14.21_常见对象(如何获取任意年份是平年还是闰年)(掌握)"></a>14.21_常见对象(如何获取任意年份是平年还是闰年)(掌握)</h3><ul><li>A:案例演示<ul><li>需求：键盘录入任意一个年份，判断该年是闰年还是平年</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础13-StringBuffer</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8013-StringBuffer/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8013-StringBuffer/</url>
      
        <content type="html"><![CDATA[<h2 id="Demo1-StringBuffer"><a href="#Demo1-StringBuffer" class="headerlink" title="Demo1_StringBuffer"></a>Demo1_StringBuffer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_StringBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:StringBuffer的构造方法：</span></span><br><span class="line"><span class="comment">* public StringBuffer():无参构造方法</span></span><br><span class="line"><span class="comment">* public StringBuffer(int capacity):指定容量的字符串缓冲区对象</span></span><br><span class="line"><span class="comment">* public StringBuffer(String str):指定字符串内容的字符串缓冲区对象</span></span><br><span class="line"><span class="comment">* B:StringBuffer的方法：</span></span><br><span class="line"><span class="comment">* public int capacity()：返回当前容量。理论值(不掌握)</span></span><br><span class="line"><span class="comment">* public int length():返回长度（字符数）。 实际值</span></span><br><span class="line"><span class="comment">* C:案例演示</span></span><br><span class="line"><span class="comment">* 构造方法和长度方法的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">System.out.println(sb.length());<span class="comment">//容器中的字符个数,实际值</span></span><br><span class="line">System.out.println(sb.capacity());<span class="comment">//容器的初始容量,理论值</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="number">10</span>);</span><br><span class="line">System.out.println(sb2.length());</span><br><span class="line">System.out.println(sb2.capacity());</span><br><span class="line"></span><br><span class="line">StringBuffer sb3 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;ligong&quot;</span>);</span><br><span class="line">System.out.println(sb3.length());<span class="comment">//实际字符的个数</span></span><br><span class="line">System.out.println(sb3.capacity());<span class="comment">//字符串的length + 初始容量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo2-StringBuffer"><a href="#Demo2-StringBuffer" class="headerlink" title="Demo2_StringBuffer"></a>Demo2_StringBuffer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_StringBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:StringBuffer的添加功能</span></span><br><span class="line"><span class="comment">* public StringBuffer append(String str):</span></span><br><span class="line"><span class="comment">* 可以把任意类型数据添加到字符串缓冲区里面,并返回字符串缓冲区本身</span></span><br><span class="line"><span class="comment">* public StringBuffer insert(int offset,String str):</span></span><br><span class="line"><span class="comment">* 在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓冲区本身</span></span><br><span class="line"><span class="comment">StringBuffer是字符串缓冲区,当new的时候是在堆内存创建了一个对象,底层是一个长度为16的字符数组</span></span><br><span class="line"><span class="comment">当调用添加的方法时,不会再重新创建对象,在不断向原缓冲区添加字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">sb.insert(<span class="number">3</span>, <span class="string">&quot;heima&quot;</span>);<span class="comment">//在指定位置添加元素,如果没有指定位置的索引就会报索引越界异常</span></span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">StringBuffer sb2 = sb.append(<span class="keyword">true</span>);</span><br><span class="line">StringBuffer sb3 = sb.append(<span class="string">&quot;hadasf&quot;</span>);</span><br><span class="line">StringBuffer sb4 = sb.append(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(sb.toString());<span class="comment">//StringBuffer类中重写了toString方法,显示的是对象中的属性值</span></span><br><span class="line">System.out.println(sb2.toString());</span><br><span class="line">System.out.println(sb3.toString());</span><br><span class="line">System.out.println(sb4.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Demo3-StringBuffer"><a href="#Demo3-StringBuffer" class="headerlink" title="Demo3_StringBuffer"></a>Demo3_StringBuffer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_StringBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:StringBuffer的删除功能</span></span><br><span class="line"><span class="comment">* public StringBuffer deleteCharAt(int index):</span></span><br><span class="line"><span class="comment">* 删除指定位置的字符，并返回本身</span></span><br><span class="line"><span class="comment">* public StringBuffer delete(int start,int end):</span></span><br><span class="line"><span class="comment">* 删除从指定位置开始指定位置结束的内容，并返回本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">//sb.deleteCharAt(5);//当缓冲区中这个索引上没有元素的时候就会报StringIndexOutOfBoundsException</span></span><br><span class="line">sb.append(<span class="string">&quot;qianyu&quot;</span>);</span><br><span class="line"><span class="comment">//sb.deleteCharAt(4);//根据索引删除掉索引位置上对应的字符</span></span><br><span class="line"><span class="comment">//sb.delete(0, 2);//删除的时候是包含头,不包含尾</span></span><br><span class="line"><span class="comment">//System.out.println(sb);</span></span><br><span class="line"><span class="comment">//sb.delete(0, sb.length());//清空缓冲区</span></span><br><span class="line"><span class="comment">//System.out.println(sb);</span></span><br><span class="line"></span><br><span class="line">sb = <span class="keyword">new</span> StringBuffer();<span class="comment">//不要用这种方式清空缓冲区,原来的会变成垃圾,浪费内存</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Demo4-StringBufferMethod"><a href="#Demo4-StringBufferMethod" class="headerlink" title="Demo4_StringBufferMethod"></a>Demo4_StringBufferMethod</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4_StringBufferMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:StringBuffer的替换功能</span></span><br><span class="line"><span class="comment">* public StringBuffer replace(int start,int end,String str):</span></span><br><span class="line"><span class="comment">* 从start开始到end用str替换</span></span><br><span class="line"><span class="comment">* B:StringBuffer的反转功能</span></span><br><span class="line"><span class="comment">* public StringBuffer reverse():</span></span><br><span class="line"><span class="comment">* 字符串反转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;我爱总复习&quot;</span>);</span><br><span class="line"><span class="comment">//sb.replace(0, 3, &quot;bai&quot;);//替换</span></span><br><span class="line"><span class="comment">//System.out.println(sb);</span></span><br><span class="line"></span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_StringBufferMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:StringBuffer的截取功能</span></span><br><span class="line"><span class="comment">* public String substring(int start):</span></span><br><span class="line"><span class="comment">* 从指定位置截取到末尾</span></span><br><span class="line"><span class="comment">* public String substring(int start,int end):</span></span><br><span class="line"><span class="comment">* 截取从指定位置开始到结束位置，包括开始位置，不包括结束位置</span></span><br><span class="line"><span class="comment">* B:注意事项</span></span><br><span class="line"><span class="comment">* 注意:返回值类型不再是StringBuffer本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;woaiheima&quot;</span>);</span><br><span class="line"><span class="comment">//String str = sb.substring(4);</span></span><br><span class="line"><span class="comment">//System.out.println(str);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(sb);</span></span><br><span class="line"></span><br><span class="line">String str3 = sb.substring(<span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">System.out.println(str3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Demo6-StringBuffer"><a href="#Demo6-StringBuffer" class="headerlink" title="Demo6_StringBuffer"></a>Demo6_StringBuffer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6_StringBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:String -- StringBuffer</span></span><br><span class="line"><span class="comment">* a:通过构造方法</span></span><br><span class="line"><span class="comment">* b:通过append()方法</span></span><br><span class="line"><span class="comment">* B:StringBuffer -- String</span></span><br><span class="line"><span class="comment">* a:通过构造方法</span></span><br><span class="line"><span class="comment">* b:通过toString()方法</span></span><br><span class="line"><span class="comment">* c:通过subString(0,length);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//demo1();</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;qianyu&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s1 = <span class="keyword">new</span> String(sb);<span class="comment">//通过构造将StringBuffer转换为String</span></span><br><span class="line">System.out.println(s1);</span><br><span class="line"></span><br><span class="line">String s2 = sb.toString();<span class="comment">//通过toString方法将StringBuffer转换为String</span></span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">String s3 = sb.substring(<span class="number">0</span>, sb.length());<span class="comment">//通过截取子字符串将StringBuffer转换为String</span></span><br><span class="line">System.out.println(s3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;heima&quot;</span>);<span class="comment">//通过构造方法将字符串转换为StringBuffer对象</span></span><br><span class="line">System.out.println(sb1);</span><br><span class="line"></span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb2.append(<span class="string">&quot;nateshao&quot;</span>);<span class="comment">//通过append方法将字符串转换为StringBuffer对象</span></span><br><span class="line">System.out.println(sb2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Demo7-StringBuffer"><a href="#Demo7-StringBuffer" class="headerlink" title="Demo7_StringBuffer"></a>Demo7_StringBuffer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7_StringBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:形式参数问题</span></span><br><span class="line"><span class="comment">* String作为参数传递</span></span><br><span class="line"><span class="comment">* StringBuffer作为参数传递 </span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* String和StringBuffer分别作为参数传递问题</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">基本数据类型的值传递,不改变其值</span></span><br><span class="line"><span class="comment">引用数据类型的值传递,改变其值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String类虽然是引用数据类型,但是他当作参数传递时和基本数据类型是一样的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">&quot;qianyu&quot;</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">change(s);</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(<span class="string">&quot;qianyu&quot;</span>);</span><br><span class="line">System.out.println(sb);</span><br><span class="line">change(sb);</span><br><span class="line">System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer sb)</span> </span>&#123;</span><br><span class="line">sb.append(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">s += <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础12-String类</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8012-String%E7%B1%BB/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8012-String%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="12-01-常见对象-Scanner的概述和方法介绍-掌握"><a href="#12-01-常见对象-Scanner的概述和方法介绍-掌握" class="headerlink" title="12.01_常见对象(Scanner的概述和方法介绍)(掌握)"></a>12.01_常见对象(Scanner的概述和方法介绍)(掌握)</h2><ul><li><p>A:Scanner的概述</p></li><li><p>B:Scanner的构造方法原理</p><ul><li>Scanner(InputStream source)</li><li>System类下有一个静态的字段：<ul><li>public static final InputStream in; 标准的输入流，对应着键盘录入。</li></ul></li></ul></li><li><p>C:一般方法</p><ul><li>hasNextXxx()  判断是否还有下一个输入项,其中Xxx可以是Int,Double等。如果需要判断是否包含下一个字符串，则可以省略Xxx</li><li>nextXxx()  获取下一个输入项。Xxx的含义和上个方法中的Xxx相同,默认情况下，Scanner使用空格，回车等作为分隔符</li></ul></li></ul><h2 id="12-02-常见对象-Scanner获取数据出现的小问题及解决方案-掌握"><a href="#12-02-常见对象-Scanner获取数据出现的小问题及解决方案-掌握" class="headerlink" title="12.02_常见对象(Scanner获取数据出现的小问题及解决方案)(掌握)"></a>12.02_常见对象(Scanner获取数据出现的小问题及解决方案)(掌握)</h2><ul><li>A:两个常用的方法：<ul><li>public int nextInt():获取一个int类型的值</li><li>public String nextLine():获取一个String类型的值</li></ul></li><li>B:案例演示<ul><li>a:先演示获取多个int值，多个String值的情况</li><li>b:再演示先获取int值，然后获取String值出现问题</li><li>c:问题解决方案<ul><li>第一种：先获取一个数值后，在创建一个新的键盘录入对象获取字符串。</li><li>第二种：把所有的数据都先按照字符串获取，然后要什么，你就对应的转换为什么。(后面讲)</li></ul></li></ul></li></ul><h2 id="12-03-常见对象-String类的概述-掌握"><a href="#12-03-常见对象-String类的概述-掌握" class="headerlink" title="12.03_常见对象(String类的概述)(掌握)"></a>12.03_常见对象(String类的概述)(掌握)</h2><ul><li><p>A:String类的概述    </p><ul><li><p>通过JDK提供的API，查看String类的说明</p></li><li><p>可以看到这样的两句话。</p><ul><li>a:字符串字面值”abc”也可以看成是一个字符串对象。</li><li>b:字符串是常量，一旦被赋值，就不能被改变。</li></ul></li></ul></li></ul><h2 id="12-04-常见对象-String类的构造方法-掌握"><a href="#12-04-常见对象-String类的构造方法-掌握" class="headerlink" title="12.04_常见对象(String类的构造方法)(掌握)"></a>12.04_常见对象(String类的构造方法)(掌握)</h2><ul><li>A:常见构造方法<ul><li>public String():空构造</li><li>public String(byte[] bytes):把字节数组转成字符串</li><li>public String(byte[] bytes,int index,int length):把字节数组的一部分转成字符串</li><li>public String(char[] value):把字符数组转成字符串</li><li>public String(char[] value,int index,int count):把字符数组的一部分转成字符串</li><li>public String(String original):把字符串常量值转成字符串</li></ul></li><li>B:案例演示    <ul><li>演示String类的常见构造方法</li></ul></li></ul><h3 id="12-05-常见对象-String类的常见面试题-掌握"><a href="#12-05-常见对象-String类的常见面试题-掌握" class="headerlink" title="12.05_常见对象(String类的常见面试题)(掌握)"></a>12.05_常见对象(String类的常见面试题)(掌握)</h3><ul><li>1.判断定义为String类型的s1和s2是否相等<ul><li>String s1 = “abc”;</li><li>String s2 = “abc”;</li><li>System.out.println(s1 == s2);         true            </li><li>System.out.println(s1.equals(s2));     true    </li></ul></li><li>2.下面这句话在内存中创建了几个对象?<ul><li>String s1 = new String(“abc”);        2    </li></ul></li><li>3.判断定义为String类型的s1和s2是否相等<ul><li>String s1 = new String(“abc”);            </li><li>String s2 = “abc”;</li><li>System.out.println(s1 == s2);            false</li><li>System.out.println(s1.equals(s2));    true</li></ul></li><li>4.判断定义为String类型的s1和s2是否相等<ul><li>String s1 = “a” + “b” + “c”;</li><li>String s2 = “abc”;                    </li><li>System.out.println(s1 == s2);            true</li><li>System.out.println(s1.equals(s2));    true</li></ul></li><li>5.判断定义为String类型的s1和s2是否相等<ul><li>String s1 = “ab”;</li><li>String s2 = “abc”;</li><li>String s3 = s1 + “c”;</li><li>System.out.println(s3 == s2);         false</li><li>System.out.println(s3.equals(s2));    true</li></ul></li></ul><h3 id="12-06-常见对象-String类的判断功能-掌握"><a href="#12-06-常见对象-String类的判断功能-掌握" class="headerlink" title="12.06_常见对象(String类的判断功能)(掌握)"></a>12.06_常见对象(<strong>String类的判断功能</strong>)(掌握)</h3><ul><li>A:String类的判断功能<ul><li>boolean equals(Object obj):比较字符串的内容是否相同,区分大小写</li><li>boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</li><li>boolean contains(String str):判断大字符串中是否包含小字符串</li><li>boolean startsWith(String str):判断字符串是否以某个指定的字符串开头</li><li>boolean endsWith(String str):判断字符串是否以某个指定的字符串结尾</li><li>boolean isEmpty():判断字符串是否为空。</li></ul></li></ul><h3 id="12-07-常见对象-模拟用户登录-掌握"><a href="#12-07-常见对象-模拟用户登录-掌握" class="headerlink" title="12.07_常见对象(模拟用户登录)(掌握)"></a>12.07_常见对象(模拟用户登录)(掌握)</h3><ul><li>A:案例演示<ul><li>需求：模拟登录,给三次机会,并提示还有几次。</li><li>用户名和密码都是admin<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment">* 需求：模拟登录,给三次机会,并提示还有几次。</span></span><br><span class="line"><span class="comment">* 用户名和密码都是admin</span></span><br><span class="line"><span class="comment">* 分析:</span></span><br><span class="line"><span class="comment">* 1,模拟登录,需要键盘录入,Scanner</span></span><br><span class="line"><span class="comment">* 2,给三次机会,需要循环,for</span></span><br><span class="line"><span class="comment">* 3,并提示有几次,需要判断,if</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建键盘录入对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">String userName = sc.nextLine();<span class="comment">//将键盘录入的用户名存储在userName中</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line">String password = sc.nextLine();<span class="comment">//将键盘录入的密码存储在password中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是字符串常量和字符串变量比较,通常都是字符串常量调用方法,将变量当作参数传递,防止空指针异常</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(userName) &amp;&amp; <span class="string">&quot;admin&quot;</span>.equals(password)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;欢迎&quot;</span> + userName + <span class="string">&quot;登录&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;您的错误次数已到,请明天再来吧&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;录入错误,您还有&quot;</span> + (<span class="number">2</span>-i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12-08-常见对象-String类的获取功能-掌握"><a href="#12-08-常见对象-String类的获取功能-掌握" class="headerlink" title="12.08_常见对象(String类的获取功能)(掌握)"></a>12.08_常见对象(String类的获取功能)(掌握)</h3></li></ul></li><li>A:String类的获取功能<ul><li>int length():获取字符串的长度。</li><li>char charAt(int index):获取指定索引位置的字符</li><li>int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。</li><li>int indexOf(String str):返回指定字符串在此字符串中第一次出现处的索引。</li><li>int indexOf(int ch,int fromIndex):返回指定字符在此字符串中从指定位置后第一次出现处的索引。</li><li>int indexOf(String str,int fromIndex):返回指定字符串在此字符串中从指定位置后第一次出现处的索引。</li><li>lastIndexOf</li><li>String substring(int start):从指定位置开始截取字符串,默认到末尾。</li><li>String substring(int start,int end):从指定位置开始到指定位置结束截取字符串。</li></ul></li></ul><h3 id="12-09-常见对象-字符串的遍历-掌握"><a href="#12-09-常见对象-字符串的遍历-掌握" class="headerlink" title="12.09_常见对象(字符串的遍历)(掌握)"></a>12.09_常见对象(字符串的遍历)(掌握)</h3><ul><li>A:案例演示<ul><li>需求：遍历字符串</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * A:案例演示</span></span><br><span class="line"><span class="comment"> * 需求：遍历字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">&quot;nateshao&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;<span class="comment">//通过for循环获取到字符串中每个字符的索引</span></span><br><span class="line"><span class="comment">/*char c = s.charAt(i);</span></span><br><span class="line"><span class="comment">System.out.println(c);*/</span></span><br><span class="line">System.out.println(s.charAt(i));<span class="comment">//通过索引获取每一个字符</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-10-常见对象-统计不同类型字符个数-掌握"><a href="#12-10-常见对象-统计不同类型字符个数-掌握" class="headerlink" title="12.10_常见对象(统计不同类型字符个数)(掌握)"></a>12.10_常见对象(统计不同类型字符个数)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li>需求：统计一个字符串中大写字母字符，小写字母字符，数字字符出现的次数,其他字符出现的次数。</li><li>ABCDEabcd123456!@#$%^<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A:案例演示</span></span><br><span class="line"><span class="comment">* 需求：统计一个字符串中大写字母字符，小写字母字符，数字字符出现的次数,其他字符出现的次数。</span></span><br><span class="line"><span class="comment">* ABCDEabcd123456!@#$%^</span></span><br><span class="line"><span class="comment">* 分析:字符串是有字符组成的,而字符的值都是有范围的,通过范围来判断是否包含该字符</span></span><br><span class="line"><span class="comment">* 如果包含就让计数器变量自增</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">&quot;ABCDEabcd123456!@#$%^&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> big = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> small = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> other = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//1,获取每一个字符,通过for循环遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">char</span> c = s.charAt(i);<span class="comment">//通过索引获取每一个字符</span></span><br><span class="line"><span class="comment">//2,判断字符是否在这个范围内</span></span><br><span class="line"><span class="keyword">if</span>(c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">big++;<span class="comment">//如果满足是大写字母,就让其对应的变量自增</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">small++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">other++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3,打印每一个计数器的结果</span></span><br><span class="line">System.out.println(s + <span class="string">&quot;中大写字母有:&quot;</span> + big + <span class="string">&quot;个,小写字母有:&quot;</span> + small + <span class="string">&quot;个,数字字符:&quot;</span> </span><br><span class="line">+ num + <span class="string">&quot;个,其他字符:&quot;</span> + other + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-11-常见对象-String类的转换功能-掌握"><a href="#12-11-常见对象-String类的转换功能-掌握" class="headerlink" title="12.11_常见对象(String类的转换功能)(掌握)"></a>12.11_常见对象(String类的转换功能)(掌握)</h3></li></ul></li><li><p>A:String的转换功能：</p><ul><li><p>byte[] getBytes():把字符串转换为字节数组。</p></li><li><p>char[] toCharArray():把字符串转换为字符数组。</p></li><li><p>static String valueOf(char[] chs):把字符数组转成字符串。</p></li><li><p>static String valueOf(int i):把int类型的数据转成字符串。</p><ul><li>注意：String类的valueOf方法可以把任意类型的数据转成字符串</li></ul></li><li><p>String toLowerCase():把字符串转成小写。(了解)</p></li><li><p>String toUpperCase():把字符串转成大写。</p></li><li><p>String concat(String str):把字符串拼接。</p></li></ul></li></ul><h3 id="12-12-常见对象-按要求转换字符-链式编程掌握"><a href="#12-12-常见对象-按要求转换字符-链式编程掌握" class="headerlink" title="12.12_常见对象(按要求转换字符)(链式编程掌握)"></a>12.12_常见对象(按要求转换字符)(链式编程掌握)</h3><ul><li>A:案例演示<ul><li>需求：把一个字符串的首字母转成大写，其余为小写。(只考虑英文大小写字母字符)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">&quot;woaiHEImaniaima&quot;</span>;</span><br><span class="line">String s2 = s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase().concat(s.substring(<span class="number">1</span>).toLowerCase());</span><br><span class="line">System.out.println(s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12-13-常见对象-把数组转成字符串"><a href="#12-13-常见对象-把数组转成字符串" class="headerlink" title="12.13_常见对象(把数组转成字符串)"></a>12.13_常见对象(把数组转成字符串)</h3><ul><li>A:案例演示<ul><li>需求：把数组中的数据按照指定个格式拼接成一个字符串<ul><li>举例：<ul><li>int[] arr = {1,2,3};    </li></ul></li><li>输出结果：<ul><li>“[1, 2, 3]”<h3 id="12-14-常见对象-String类的其他功能"><a href="#12-14-常见对象-String类的其他功能" class="headerlink" title="12.14_常见对象(String类的其他功能)"></a>12.14_常见对象(String类的其他功能)</h3></li></ul></li></ul></li></ul></li><li>A:String的替换功能及案例演示<ul><li>String replace(char old,char new)</li><li>String replace(String old,String new)</li></ul></li><li>B:String的去除字符串两空格及案例演示<ul><li>String trim()</li></ul></li><li>C:String的按字典顺序比较两个字符串及案例演示<ul><li>int compareTo(String str)(暂时不用掌握)</li><li>int compareToIgnoreCase(String str)(了解)</li></ul></li></ul><h3 id="12-15-常见对象-字符串反转"><a href="#12-15-常见对象-字符串反转" class="headerlink" title="12.15_常见对象(字符串反转)"></a>12.15_常见对象(字符串反转)</h3><ul><li>A:案例演示<ul><li>需求：把字符串反转<ul><li>举例：键盘录入”abc”        </li><li>输出结果：”cba”</li></ul></li></ul></li></ul><h3 id="12-16-常见对象-在大串中查找小串出现的次数思路图解"><a href="#12-16-常见对象-在大串中查找小串出现的次数思路图解" class="headerlink" title="12.16_常见对象(在大串中查找小串出现的次数思路图解)"></a>12.16_常见对象(在大串中查找小串出现的次数思路图解)</h3><ul><li>A:画图演示<ul><li>需求：统计大串中小串出现的次数</li><li>这里的大串和小串可以自己根据情况给出</li></ul></li></ul><h3 id="12-17-常见对象-在大串中查找小串出现的次数代码实现"><a href="#12-17-常见对象-在大串中查找小串出现的次数代码实现" class="headerlink" title="12.17_常见对象(在大串中查找小串出现的次数代码实现)"></a>12.17_常见对象(在大串中查找小串出现的次数代码实现)</h3><ul><li>A:案例演示    <ul><li>统计大串中小串出现的次数</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础11-Eclipse-Object</title>
      <link href="/2020/06/16/Java%E5%9F%BA%E7%A1%8011-Eclipse-Object/"/>
      <url>/2020/06/16/Java%E5%9F%BA%E7%A1%8011-Eclipse-Object/</url>
      
        <content type="html"><![CDATA[<h3 id="11-01-Java开发工具-常见开发工具介绍-了解"><a href="#11-01-Java开发工具-常见开发工具介绍-了解" class="headerlink" title="11.01_Java开发工具(常见开发工具介绍)(了解)"></a>11.01_Java开发工具(常见开发工具介绍)(了解)</h3><ul><li>A:操作系统自带的记事本软件</li><li>B:高级记事本软件</li><li>C:集成开发环境 IDE<ul><li>(Integrated Development Environment)</li></ul></li><li>D:Eclipse和MyEclipse的区别<ul><li>a:Eclipse是一种可扩展的开放源代码的IDE。</li><li>b:Eclipse的特点描述<ul><li>免费</li><li>纯Java语言编写</li><li>免安装</li><li>扩展性强</li></ul></li><li>c:MyEclipse<ul><li>在Eclipse基础上追加的功能性插件，对插件<strong>收费</strong></li><li>在WEB开发中提供强大的系统架构平台</li></ul></li></ul></li><li>E:下载 <a href="http://eclipse.org/">http://eclipse.org/</a><ul><li>org是非盈利团体 </li></ul></li><li>F:安装<ul><li>绿色版    解压就可以使用(Eclipse)</li><li>安装版   双击运行,一路next即可(JDK)</li></ul></li><li>G:卸载<ul><li>绿色版    直接删除文件夹即可</li><li>安装版 专业卸载软件或者控制面板添加删除程序</li></ul></li></ul><h3 id="11-02-Java开发工具-Eclipse中HelloWorld案例以及汉化-了解"><a href="#11-02-Java开发工具-Eclipse中HelloWorld案例以及汉化-了解" class="headerlink" title="11.02_Java开发工具(Eclipse中HelloWorld案例以及汉化)(了解)"></a>11.02_Java开发工具(Eclipse中HelloWorld案例以及汉化)(了解)</h3><ul><li>A:选择工作空间<ul><li>工作空间  其实就是我们写的源代码所在的目录</li></ul></li><li>B:用Eclipse来完成一个HelloWorld案例<ul><li>代码以项目为基本单位</li><li>创建项目</li><li>创建包</li><li>创建类</li><li>编写代码</li></ul></li><li>C:编译和运行</li><li>D:Eclipse的汉化<ul><li>从Eclipse3.5开始，安装目录下就多了一个dropins目录,只要将插件解压后放到到该目录即可。</li><li>同理，这种方式卸载插件也是特别的方便，推荐这种方式</li></ul></li><li>E:语法检查提示<ul><li>红色波浪线<ul><li>必须处理,否则编译通不过</li></ul></li><li>黄色波浪线    <ul><li>可以不搭理他 </li></ul></li></ul></li></ul><h3 id="11-03-Java开发工具-Eclipse的视窗和视图概述-了解"><a href="#11-03-Java开发工具-Eclipse的视窗和视图概述-了解" class="headerlink" title="11.03_Java开发工具(Eclipse的视窗和视图概述)(了解)"></a>11.03_Java开发工具(Eclipse的视窗和视图概述)(了解)</h3><ul><li>A:视窗  每一个基本的窗体被称为视窗<ul><li>PackageExplorer  显示项目结构，包，类，及资源</li><li>Outline   显示类的结构，方便查找，识别，修改</li><li>Console  程序运行的结果在该窗口显示</li><li>Hierarchy 显示Java继承层次结构，选中类后F4</li></ul></li><li>B:视图  是由某些视窗的组合而成的<ul><li>Java视图</li><li>Debug视图</li></ul></li></ul><h3 id="11-04-Java开发工具-Eclipse工作空间的基本配置-掌握"><a href="#11-04-Java开发工具-Eclipse工作空间的基本配置-掌握" class="headerlink" title="11.04_Java开发工具(Eclipse工作空间的基本配置)(掌握)"></a>11.04_Java开发工具(Eclipse工作空间的基本配置)(掌握)</h3><ul><li>A:程序的编译和运行的环境配置(一般不改)<ul><li>window – Preferences – Java</li><li>编译环境：Compiler    默认选中的就是最高版本。</li><li>运行环境：Installed JREs    默认会找你安装的那个JDK。建议配置了Java的环境变量。</li><li>问题：<ul><li>低编译，高运行。可以。</li><li>高编译，低运行。不可以。</li><li>建议，编译和运行的版本一致。</li></ul></li></ul></li><li>B:如何去掉默认注释?<ul><li>window – Preferences – Java – Code Style – Code Templates</li><li>选择你不想要的内容，通过右边Edit编辑。</li><li>注意：请只删除注释部分，不是注释部分的不要删除。</li></ul></li><li>C:行号的显示和隐藏<ul><li>显示：在代码区域的最左边的空白区域，右键 – Show Line Numbers即可。</li><li>隐藏：把上面的动作再做一次。</li></ul></li><li>D:字体大小及颜色<ul><li>a:Java代码区域的字体大小和颜色：<ul><li>window – Preferences – General – Appearance – Colors And Fonts –Java修改 – Java Edit Text Font</li></ul></li><li>b:控制台<ul><li>window – Preferences – General – Appearance – Colors And Fonts – Debug – Console font</li></ul></li><li>c:其他文件<ul><li>window – Preferences – General – Appearance – Colors And Fonts – Basic – Text Font</li></ul></li></ul></li><li>E:窗体给弄乱了，怎么办?<ul><li>window – Reset Perspective</li></ul></li><li>F:控制台找不到了，怎么办?<ul><li>Window–Show View—Console</li></ul></li><li>G:取消悬浮提示<ul><li>window – Preferences – Java–Editor–Hovers。右边将Combined Hover勾去掉。</li><li>这样代码的悬浮框就不会自动出现了。如果想看提示，将光标悬浮在代码上，按F2即可。</li></ul></li></ul><h3 id="11-05-Java开发工具-Eclipse中内容辅助键的使用-掌握"><a href="#11-05-Java开发工具-Eclipse中内容辅助键的使用-掌握" class="headerlink" title="11.05_Java开发工具(Eclipse中内容辅助键的使用)(掌握)"></a>11.05_Java开发工具(Eclipse中内容辅助键的使用)(掌握)</h3><ul><li>A:Alt+/ 起提示作用</li><li>B:main+alt+/,syso+alt+/,给出其他提示</li><li>C:补充输出语句,选中需要输出的部分,alt+/选择最后一项即可</li><li>C:定义自己的alt + /<ul><li>windows–perference-Java-Editor-Templates–New</li></ul></li></ul><h3 id="11-06-Java开发工具-Eclipse中快捷键的使用-掌握"><a href="#11-06-Java开发工具-Eclipse中快捷键的使用-掌握" class="headerlink" title="11.06_Java开发工具(Eclipse中快捷键的使用)(掌握)"></a>11.06_Java开发工具(Eclipse中快捷键的使用)(掌握)</h3><ul><li>A:新建 ctrl + n</li><li>B:格式化  ctrl+shift+f</li><li>C:导入包  ctrl+shift+o </li><li>D:注释  ctrl+/,ctrl+shift+/,ctrl+shift+\</li><li>E:代码上下移动 选中代码alt+上/下箭头</li><li>F:查看源码  选中类名(F3或者Ctrl+鼠标点击)</li><li>G:查找具体的类 ctrl + shift + t</li><li>H:查找具体类的具体方法 ctrl + o</li><li>I:给建议 ctrl+1,根据右边生成左边的数据类型,生成方法</li><li>J:删除代码 ctrl + d</li><li>K:抽取方法alt + shift + m </li><li>L:改名alt + shift + r </li><li></li></ul><h3 id="11-07-Java开发工具-Eclipse中如何提高开发效率-掌握"><a href="#11-07-Java开发工具-Eclipse中如何提高开发效率-掌握" class="headerlink" title="11.07_Java开发工具(Eclipse中如何提高开发效率)(掌握)"></a>11.07_Java开发工具(Eclipse中如何提高开发效率)(掌握)</h3><ul><li>alt + shift + s</li><li>A:自动生成构造方法</li><li>B:自动生成get/set方法</li></ul><h3 id="11-08-Java开发工具-Eclipse中一个标准学生类及其测试-掌握"><a href="#11-08-Java开发工具-Eclipse中一个标准学生类及其测试-掌握" class="headerlink" title="11.08_Java开发工具(Eclipse中一个标准学生类及其测试)(掌握)"></a>11.08_Java开发工具(Eclipse中一个标准学生类及其测试)(掌握)</h3><ul><li>A:案例演示<ul><li>用Eclipse实现标准学生类及其测试</li></ul></li></ul><h3 id="11-09-Java开发工具-Eclipse中接口抽象类具体类代码体现-掌握"><a href="#11-09-Java开发工具-Eclipse中接口抽象类具体类代码体现-掌握" class="headerlink" title="11.09_Java开发工具(Eclipse中接口抽象类具体类代码体现)(掌握)"></a>11.09_Java开发工具(Eclipse中接口抽象类具体类代码体现)(掌握)</h3><ul><li>A:案例演示<ul><li>用Eclipse实现接口抽象类具体类代码</li></ul></li></ul><h3 id="11-10-Java开发工具-Eclipse中如何生成jar包并导入到项目中-了解"><a href="#11-10-Java开发工具-Eclipse中如何生成jar包并导入到项目中-了解" class="headerlink" title="11.10_Java开发工具(Eclipse中如何生成jar包并导入到项目中)(了解)"></a>11.10_Java开发工具(Eclipse中如何生成jar包并导入到项目中)(了解)</h3><ul><li>A:<strong>jar是什么</strong>?<ul><li>jar是多个class文件的压缩包。</li></ul></li><li>B:<strong>jar有什么用</strong>?<ul><li>用别人写好的东西    </li></ul></li><li>C:打jar包<ul><li>选中项目–右键–Export–Java–Jar–自己指定一个路径和一个名称–Finish</li></ul></li><li>D:导入jar包<ul><li>复制到项目路径下并添加至构建路径。</li></ul></li></ul><p>###11.11_Java开发工具(Eclipse中如何删除项目和导入项目)(掌握)</p><ul><li>A:删除项目<ul><li>选中项目 – 右键 – 删除<ul><li>从项目区域中删除</li><li>从硬盘上删除</li></ul></li></ul></li><li>B:导入项目<ul><li>在项目区域右键找到import</li><li>找到General，展开，并找到</li><li>Existing Projects into Workspace</li><li>点击next,然后选择你要导入的项目</li><li>注意：这里选择的是项目名称</li></ul></li></ul><h3 id="11-12-Java开发工具-Eclipse中断点调试的基本使用-了解"><a href="#11-12-Java开发工具-Eclipse中断点调试的基本使用-了解" class="headerlink" title="11.12_Java开发工具(Eclipse中断点调试的基本使用)(了解)"></a>11.12_Java开发工具(Eclipse中断点调试的基本使用)(了解)</h3><ul><li><p>A:Debug的作用</p><ul><li>调试程序</li><li>查看程序执行流程</li></ul></li><li><p>B:如何查看程序执行流程        </p><ul><li><p>什么是断点：</p><ul><li>就是一个标记，从哪里开始。</li></ul></li><li><p>如何设置断点：</p><ul><li>你想看哪里的程序，你就在那个有效程序的左边双击即可。</li></ul></li><li><p>在哪里设置断点：</p><ul><li>哪里不会点哪里。</li><li>目前：我们就在每个方法的第一条有效语句上都加。</li></ul></li><li><p>如何运行设置断点后的程序：</p><ul><li>右键 – Debug as – Java Application</li></ul></li><li><p>看哪些地方：</p><ul><li>Debug：断点测试的地方<ul><li>在这个地方，记住F6，或者点击也可以。一次看一行的执行过程。</li></ul></li><li>Variables：查看程序的变量变化</li><li>ForDemo：被查看的源文件</li><li>Console：控制台</li></ul></li><li><p>如何去断点：</p><ul><li>a:再次双击即可</li><li>b:找到Debug视图，Variables界面，找到Breakpoints，并点击，然后看到所有的断点，最后点击那个双叉。</li></ul></li></ul></li></ul><h3 id="11-13-Java开发工具-Eclipse查看Java中参数传递问题-了解"><a href="#11-13-Java开发工具-Eclipse查看Java中参数传递问题-了解" class="headerlink" title="11.13_Java开发工具(Eclipse查看Java中参数传递问题)(了解)"></a>11.13_Java开发工具(Eclipse查看Java中参数传递问题)(了解)</h3><ul><li>A:断点演示<ul><li>断点查看Java中参数传递问题</li></ul></li></ul><h3 id="11-14-常见对象-API概述-了解"><a href="#11-14-常见对象-API概述-了解" class="headerlink" title="11.14_常见对象(API概述)(了解)"></a>11.14_常见对象(API概述)(了解)</h3><ul><li>A:API(Application Programming Interface) <ul><li>应用程序编程接口</li></ul></li><li>B:Java API<ul><li>就是Java提供给我们使用的类，这些类将底层的实现封装了起来，</li><li>我们不需要关心这些类是如何实现的，只需要学习这些类如何使用。</li></ul></li></ul><h3 id="11-15-常见对象-Object类的概述-了解"><a href="#11-15-常见对象-Object类的概述-了解" class="headerlink" title="11.15_常见对象(Object类的概述)(了解)"></a>11.15_常见对象(Object类的概述)(了解)</h3><ul><li>A:Object类概述<ul><li>类层次结构的根类</li><li>所有类都直接或者间接的继承自该类</li></ul></li><li>B:构造方法<ul><li>public Object()</li><li>回想面向对象中为什么说：</li><li>子类的构造方法默认访问的是父类的无参构造方法</li></ul></li></ul><h3 id="11-16-常见对象-Object类的hashCode-方法-了解"><a href="#11-16-常见对象-Object类的hashCode-方法-了解" class="headerlink" title="11.16_常见对象(Object类的hashCode()方法)(了解)"></a>11.16_常见对象(Object类的hashCode()方法)(了解)</h3><ul><li>A:案例演示<ul><li>public int hashCode()</li><li>a:返回该对象的哈希码值。默认情况下，该方法会根据对象的地址来计算。</li><li>b:不同对象的，hashCode()一般来说不会相同。但是，同一个对象的hashCode()值肯定相同。</li></ul></li></ul><h3 id="11-17-常见对象-Object类的getClass-方法-在反射的时候掌握"><a href="#11-17-常见对象-Object类的getClass-方法-在反射的时候掌握" class="headerlink" title="11.17_常见对象(Object类的getClass()方法)(在反射的时候掌握)"></a>11.17_常见对象(Object类的getClass()方法)(在反射的时候掌握)</h3><ul><li>A:案例演示<ul><li>public final Class getClass()</li><li>a:返回此 Object 的运行时类。</li><li>b:可以通过Class类中的一个方法，获取对象的真实类的全名称。    <ul><li>public String getName()</li></ul></li></ul></li></ul><h3 id="11-18-常见对象-Object类的toString-方法-掌握"><a href="#11-18-常见对象-Object类的toString-方法-掌握" class="headerlink" title="11.18_常见对象(Object类的toString()方法)(掌握)"></a>11.18_常见对象(Object类的toString()方法)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li>public String toString()</li><li>a:返回该对象的字符串表示。</li></ul></li><li><pre><code>  public Stirng toString() &#123;      return name + &quot;,&quot; + age;  &#125;</code></pre><ul><li>b:它的值等于： <ul><li>getClass().getName() + “@” + Integer.toHexString(hashCode()) </li></ul></li><li>c:由于默认情况下的数据对我们来说没有意义，一般建议重写该方法。</li></ul></li><li><p>B:最终版</p><ul><li>自动生成</li></ul></li></ul><h3 id="11-19-常见对象-Object类的equals-方法-掌握"><a href="#11-19-常见对象-Object类的equals-方法-掌握" class="headerlink" title="11.19_常见对象(Object类的equals()方法)(掌握)"></a>11.19_常见对象(Object类的equals()方法)(掌握)</h3><ul><li>A:案例演示<ul><li>a:指示其他某个对象是否与此对象“相等”。 </li><li>b:默认情况下比较的是对象的引用是否相同。</li><li>c:由于比较对象的引用没有意义，一般建议重写该方法。</li></ul></li></ul><h3 id="11-20-常见对象-号和equals方法的区别-掌握"><a href="#11-20-常见对象-号和equals方法的区别-掌握" class="headerlink" title="11.20_常见对象(==号和equals方法的区别)(掌握)"></a>11.20_常见对象(<strong>==号和equals方法的区别</strong>)(掌握)</h3><ul><li>==是一个比较运算符号,既可以比较基本数据类型,也可以比较引用数据类型,基本数据类型比较的是值,引用数据类型比较的是地址值</li><li>equals方法是一个方法,只能比较引用数据类型,所有的对象都会继承Object类中的方法,如果没有重写Object类中的equals方法,equals方法和==号比较引用数据类型无区别,重写后的equals方法比较的是对象中的属性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础10-面向对象-匿名内部类</title>
      <link href="/2020/06/15/Java%E5%9F%BA%E7%A1%8010-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2020/06/15/Java%E5%9F%BA%E7%A1%8010-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%A4%9A%E6%80%81%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%A4%9A%E6%80%81%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.png"></p><h2 id="10-01-面向对象-package关键字的概述及作用"><a href="#10-01-面向对象-package关键字的概述及作用" class="headerlink" title="10.01_面向对象(package关键字的概述及作用)"></a>10.01_面向对象(package关键字的概述及作用)</h2><ul><li><p>A:为什么要有包</p><ul><li>将字节码(.class)进行分类存放 </li><li>包其实就是文件夹</li></ul></li><li><p>B:包的概述</p></li><li><p>  举例：</p><pre><code>  学生：增加，删除，修改，查询  老师：增加，删除，修改，查询  ...  方案1：按照功能分      com.stj.add          AddStudent          AddTeacher      com.stj.delete          DeleteStudent          DeleteTeacher      com.stj.update          UpdateStudent          UpdateTeacher      com.stj.find          FindStudent          FindTeacher  方案2：按照模块分      com.heima.teacher          AddTeacher          DeleteTeacher          UpdateTeacher          FindTeacher      com.stj.student          AddStudent          DeleteStudent          UpdateStudent          FindStudent</code></pre><h3 id="10-02-面向对象-包的定义及注意事项-掌握"><a href="#10-02-面向对象-包的定义及注意事项-掌握" class="headerlink" title="10.02_面向对象(包的定义及注意事项)(掌握)"></a>10.02_面向对象(包的定义及注意事项)(掌握)</h3></li><li><p>A:定义包的格式</p><ul><li>package 包名;</li><li>多级包用.分开即可</li></ul></li><li><p>B:定义包的注意事项</p><ul><li>A:package语句必须是程序的第一条可执行的代码</li><li>B:package语句在一个java文件中只能有一个</li><li>C:如果没有package，默认表示无包名</li></ul></li><li><p>C:案例演示</p><ul><li>包的定义及注意事项</li></ul></li></ul><h3 id="10-03-面向对象-带包的类编译和运行-掌握"><a href="#10-03-面向对象-带包的类编译和运行-掌握" class="headerlink" title="10.03_面向对象(带包的类编译和运行)(掌握)"></a>10.03_面向对象(带包的类编译和运行)(掌握)</h3><ul><li>A:如何编译运行带包的类<ul><li>a:javac编译的时候带上-d即可<ul><li>javac -d . HelloWorld.java</li></ul></li><li>b:通过java命令执行。<ul><li>java 包名.HellWord<h3 id="10-04-面向对象-不同包下类之间的访问-掌握"><a href="#10-04-面向对象-不同包下类之间的访问-掌握" class="headerlink" title="10.04_面向对象(不同包下类之间的访问)(掌握)"></a>10.04_面向对象(不同包下类之间的访问)(掌握)</h3></li></ul></li></ul></li><li>A:案例演示<ul><li>不同包下类之间的访问</li></ul></li></ul><h3 id="10-05-面向对象-import关键字的概述和使用-掌握"><a href="#10-05-面向对象-import关键字的概述和使用-掌握" class="headerlink" title="10.05_面向对象(import关键字的概述和使用)(掌握)"></a>10.05_面向对象(import关键字的概述和使用)(掌握)</h3><ul><li>A:案例演示<ul><li>为什么要有import<ul><li>其实就是让有包的类对调用者可见,不用写全类名了 </li></ul></li></ul></li><li>B:导包格式<ul><li>import 包名;</li><li>注意：</li><li>这种方式导入是到类的名称。</li><li>虽然可以最后写*，但是不建议。</li></ul></li><li>C:package,import,class有没有顺序关系(面试题)</li></ul><h3 id="10-06-面向对象-四种权限修饰符的测试-掌握"><a href="#10-06-面向对象-四种权限修饰符的测试-掌握" class="headerlink" title="10.06_面向对象(四种权限修饰符的测试)(掌握)"></a>10.06_面向对象(四种权限修饰符的测试)(掌握)</h3><ul><li>A:案例演示<ul><li>四种权限修饰符</li></ul></li><li>B:结论</li><li><pre><code>              本类     同一个包下(子类和无关类)    不同包下(子类)    不同包下(无关类)  private     Y          默认            Y        Y  protected    Y        Y                            Y  public        Y        Y                            Y                Y</code></pre></li></ul><h3 id="10-07-面向对象-类及其组成所使用的常见修饰符-掌握"><a href="#10-07-面向对象-类及其组成所使用的常见修饰符-掌握" class="headerlink" title="10.07_面向对象(类及其组成所使用的常见修饰符)(掌握)"></a>10.07_面向对象(类及其组成所使用的常见修饰符)(掌握)</h3><ul><li><p>A:修饰符：</p><ul><li>权限修饰符：private，默认的，protected，public</li><li>状态修饰符：static，final</li><li>抽象修饰符：abstract</li></ul></li><li><p>B:类：</p><ul><li><p>权限修饰符：默认修饰符，public</p></li><li><p>状态修饰符：final</p></li><li><p>抽象修饰符：abstract</p></li><li><p>用的最多的就是：public</p></li></ul></li><li><p>C:成员变量：</p><ul><li><p>权限修饰符：private，默认的，protected，public</p></li><li><p>状态修饰符：static，final</p></li><li><p>用的最多的就是：private</p></li></ul></li><li><p>D:构造方法：</p><ul><li><p>权限修饰符：private，默认的，protected，public</p></li><li><p>用的最多的就是：public</p></li></ul></li><li><p>E:成员方法：</p><ul><li><p>权限修饰符：private，默认的，protected，public</p></li><li><p>状态修饰符：static，final</p></li><li><p>抽象修饰符：abstract</p></li><li><p>用的最多的就是：public</p></li></ul></li><li><p>F:除此以外的组合规则：</p><ul><li>成员变量：public static final 接口</li><li>成员方法：<ul><li>public static </li><li>public abstract</li><li>public final</li></ul></li></ul></li></ul><h3 id="10-08-面向对象-内部类概述和访问特点-了解"><a href="#10-08-面向对象-内部类概述和访问特点-了解" class="headerlink" title="10.08_面向对象(内部类概述和访问特点)(了解)"></a>10.08_面向对象(内部类概述和访问特点)(了解)</h3><ul><li>A:内部类概述</li><li>B:内部类访问特点<ul><li>a:内部类可以直接访问外部类的成员，包括私有。</li><li>b:外部类要访问内部类的成员，必须创建对象。</li><li>外部类名.内部类名 对象名 = 外部类对象.内部类对象;</li></ul></li><li>C:案例演示<ul><li>内部类极其访问特点</li></ul></li></ul><h3 id="10-09-面向对象-成员内部类私有使用-了解"><a href="#10-09-面向对象-成员内部类私有使用-了解" class="headerlink" title="10.09_面向对象(成员内部类私有使用)(了解)"></a>10.09_面向对象(成员内部类私有使用)(了解)</h3><ul><li>private</li></ul><h3 id="10-10-面向对象-静态成员内部类-了解"><a href="#10-10-面向对象-静态成员内部类-了解" class="headerlink" title="10.10_面向对象(静态成员内部类)(了解)"></a>10.10_面向对象(静态成员内部类)(了解)</h3><ul><li>static</li><li>B:成员内部类被静态修饰后的访问方式是:<ul><li>外部类名.内部类名 对象名 = 外部类名.内部类对象;</li></ul></li></ul><h3 id="10-11-面向对象-成员内部类的面试题-掌握"><a href="#10-11-面向对象-成员内部类的面试题-掌握" class="headerlink" title="10.11_面向对象(成员内部类的面试题)(掌握)"></a>10.11_面向对象(成员内部类的面试题)(掌握)</h3><ul><li><p>A:面试题</p></li><li><pre><code>  要求：使用已知的变量，在控制台输出30，20，10。  class Outer &#123;      public int num = 10;      class Inner &#123;          public int num = 20;          public void show() &#123;              int num = 30;              System.out.println(?);              System.out.println(??);              System.out.println(???);          &#125;      &#125;  &#125;  class InnerClassTest &#123;      public static void main(String[] args) &#123;          Outer.Inner oi = new Outer().new Inner();          oi.show();      &#125;      &#125;</code></pre></li></ul><h3 id="10-12-面向对象-局部内部类访问局部变量的问题-掌握"><a href="#10-12-面向对象-局部内部类访问局部变量的问题-掌握" class="headerlink" title="10.12_面向对象(局部内部类访问局部变量的问题)(掌握)"></a>10.12_面向对象(局部内部类访问局部变量的问题)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li><p>局部内部类访问局部变量必须用final修饰</p></li><li><p>局部内部类在访问他所在方法中的局部变量必须用final修饰,为什么?<br>  因为当调用这个方法时,局部变量如果没有用final修饰,他的生命周期和方法的生命周期是一样的,<br>  当方法弹栈,这个局部变量也会消失,那么如果局部内部类对象还没有马上消失想用这个局部变量,<br>  就没有了,如果用final修饰会在类加载的时候进入常量池,即使方法弹栈,常量池的常量还在,<br>  也可以继续使用</p><p>  但是jdk1.8取消了这个事情,所以我认为这是个bug,虽然取消,如果在书写代码时候,没有手动添加,系统底层也会默给你final</p></li></ul></li></ul><h3 id="10-13-面向对象-匿名内部类的格式和理解"><a href="#10-13-面向对象-匿名内部类的格式和理解" class="headerlink" title="10.13_面向对象(匿名内部类的格式和理解)"></a>10.13_面向对象(匿名内部类的格式和理解)</h3><ul><li>A:匿名内部类<ul><li>就是内部类的简化写法。</li></ul></li><li>B:前提：存在一个类或者接口<ul><li>这里的类可以是具体类也可以是抽象类。</li></ul></li><li>C:格式：</li><li><pre><code>  new 类名或者接口名()&#123;      重写方法;  &#125;</code></pre></li><li>D:本质是什么呢?<ul><li>是一个继承了该类或者实现了该接口的子类匿名对象。</li></ul></li><li>E:案例演示<ul><li>按照要求来一个匿名内部类</li></ul></li></ul><h3 id="10-14-面向对象-匿名内部类重写多个方法调用"><a href="#10-14-面向对象-匿名内部类重写多个方法调用" class="headerlink" title="10.14_面向对象(匿名内部类重写多个方法调用)"></a>10.14_面向对象(匿名内部类重写多个方法调用)</h3><ul><li>A:案例演示<ul><li>匿名内部类的方法调用</li></ul></li></ul><h3 id="10-15-面向对象-匿名内部类在开发中的应用"><a href="#10-15-面向对象-匿名内部类在开发中的应用" class="headerlink" title="10.15_面向对象(匿名内部类在开发中的应用)"></a>10.15_面向对象(匿名内部类在开发中的应用)</h3><ul><li><p>A:代码如下</p></li><li><pre><code>  //这里写抽象类，接口都行  abstract class Person &#123;      public abstract void show();  &#125;  class PersonDemo &#123;      public void method(Person p) &#123;          p.show();      &#125;  &#125;  class PersonTest &#123;      public static void main(String[] args) &#123;          //如何调用PersonDemo中的method方法呢?          PersonDemo pd = new PersonDemo ();      &#125;  &#125;</code></pre></li></ul><h3 id="10-16-面向对象-匿名内部类的面试题"><a href="#10-16-面向对象-匿名内部类的面试题" class="headerlink" title="10.16_面向对象(匿名内部类的面试题)"></a>10.16_面向对象(匿名内部类的面试题)</h3><ul><li>A:面试题</li><li><pre><code>  按照要求，补齐代码  interface Inter &#123; void show(); &#125;  class Outer &#123; //补齐代码 &#125;  class OuterDemo &#123;      public static void main(String[] args) &#123;            Outer.method().show();        &#125;  &#125;  要求在控制台输出”HelloWorld”</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础09-面向对象-多态-接口</title>
      <link href="/2020/06/15/Java%E5%9F%BA%E7%A1%8009-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%A4%9A%E6%80%81-%E6%8E%A5%E5%8F%A3/"/>
      <url>/2020/06/15/Java%E5%9F%BA%E7%A1%8009-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%A4%9A%E6%80%81-%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%A4%9A%E6%80%81%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%A4%9A%E6%80%81%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.png"></p><h3 id="09-01-面向对象-多态的概述及其代码体现"><a href="#09-01-面向对象-多态的概述及其代码体现" class="headerlink" title="09.01_面向对象(多态的概述及其代码体现)"></a>09.01_面向对象(多态的概述及其代码体现)</h3><ul><li>A:多态(polymorphic)概述<ul><li>事物存在的多种形态 </li></ul></li><li>B:多态前提<ul><li>a:要有继承关系。</li><li>b:要有方法重写。</li><li>c:要有父类引用指向子类对象。</li></ul></li><li>C:案例演示<ul><li>代码体现多态<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1_Polymorphic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">c.eat();</span><br><span class="line"></span><br><span class="line">Animal a = <span class="keyword">new</span> Cat();<span class="comment">//父类引用指向子类对象</span></span><br><span class="line">a.eat();</span><br><span class="line"><span class="comment">//猫吃鱼</span></span><br><span class="line"><span class="comment">//猫吃鱼</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A:多态(polymorphic)概述</span></span><br><span class="line"><span class="comment"> * 事物存在的多种形态</span></span><br><span class="line"><span class="comment"> * B:多态前提</span></span><br><span class="line"><span class="comment"> * a:要有继承关系。</span></span><br><span class="line"><span class="comment"> * b:要有方法重写。</span></span><br><span class="line"><span class="comment"> * c:要有父类引用指向子类对象。</span></span><br><span class="line"><span class="comment"> * C:案例演示</span></span><br><span class="line"><span class="comment"> * 代码体现多态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;动物吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="09-02-面向对象-多态中的成员访问特点之成员变量"><a href="#09-02-面向对象-多态中的成员访问特点之成员变量" class="headerlink" title="09.02_面向对象(多态中的成员访问特点之成员变量)"></a>09.02_面向对象(多态中的成员访问特点之成员变量)</h3><ul><li>成员变量<ul><li>编译看左边(父类)，运行看左边(父类)。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2_Polymorphic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*Father f = new Son();//父类引用指向子类对象</span></span><br><span class="line"><span class="comment">System.out.println(f.num);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Son s = new Son();</span></span><br><span class="line"><span class="comment">System.out.println(s.num);*/</span></span><br><span class="line"></span><br><span class="line">Father f = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="comment">//f.print();                        //son</span></span><br><span class="line">f.method();<span class="comment">//相当于是Father.method()</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成员变量</span></span><br><span class="line"><span class="comment">编译看左边(父类),运行看左边(父类)</span></span><br><span class="line"><span class="comment">成员方法</span></span><br><span class="line"><span class="comment">编译看左边(父类)，运行看右边(子类)。动态绑定</span></span><br><span class="line"><span class="comment">静态方法</span></span><br><span class="line"><span class="comment">编译看左边(父类)，运行看左边(父类)。</span></span><br><span class="line"><span class="comment">**(静态和类相关，算不上重写，所以，访问还是左边的)**</span></span><br><span class="line"><span class="comment">只有非静态的成员方法,编译看左边,运行看右边</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;father static method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;son static method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="09-03-面向对象-多态中的成员访问特点之成员方法"><a href="#09-03-面向对象-多态中的成员访问特点之成员方法" class="headerlink" title="09.03_面向对象(多态中的成员访问特点之成员方法)"></a>09.03_面向对象(多态中的成员访问特点之成员方法)</h3><ul><li>成员方法<ul><li>编译看左边(父类)，运行看右边(子类)。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3_SuperMan</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> SuperMan();<span class="comment">//父类引用指向子类对象,超人提升为了人</span></span><br><span class="line"><span class="comment">//父类引用指向子类对象就是向上转型</span></span><br><span class="line">System.out.println(p.name);</span><br><span class="line">p.谈生意();</span><br><span class="line">SuperMan sm = (SuperMan)p;<span class="comment">//向下转型</span></span><br><span class="line">sm.fly();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本数据类型自动类型提升和强制类型转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//i = b;//自动类型提升</span></span><br><span class="line"><span class="comment">//b = (byte)i;//强制类型转换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 谈生意() &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;谈生意&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name = <span class="string">&quot;superMan&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 谈生意() &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;谈几个亿的大单子&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;飞出去救人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09-04-面向对象-多态中的成员访问特点之静态成员方法"><a href="#09-04-面向对象-多态中的成员访问特点之静态成员方法" class="headerlink" title="09.04_面向对象(多态中的成员访问特点之静态成员方法)"></a>09.04_面向对象(多态中的成员访问特点之静态成员方法)</h3></li></ul></li><li>静态方法<ul><li>编译看左边(父类)，运行看左边(父类)。</li><li>(静态和类相关，算不上重写，所以，访问还是左边的)</li><li>只有非静态的成员方法,编译看左边,运行看右边 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1_Polymorphic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line"><span class="comment">//f.method();</span></span><br><span class="line">f.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;fu show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;zi show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;zi method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="09-05-面向对象-超人的故事"><a href="#09-05-面向对象-超人的故事" class="headerlink" title="09.05_面向对象(超人的故事)"></a>09.05_面向对象(超人的故事)</h3></li></ul></li><li>A:案例分析<ul><li>通过该案例帮助学生理解多态的现象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3_SuperMan</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> SuperMan();<span class="comment">//父类引用指向子类对象,超人提升为了人</span></span><br><span class="line"><span class="comment">//父类引用指向子类对象就是向上转型</span></span><br><span class="line">System.out.println(p.name);</span><br><span class="line">p.谈生意();</span><br><span class="line">SuperMan sm = (SuperMan)p;<span class="comment">//向下转型</span></span><br><span class="line">sm.fly();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本数据类型自动类型提升和强制类型转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//i = b;//自动类型提升</span></span><br><span class="line"><span class="comment">//b = (byte)i;//强制类型转换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 谈生意() &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;谈生意&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name = <span class="string">&quot;superMan&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 谈生意() &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;谈几个亿的大单子&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;飞出去救人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09-06-面向对象-多态中向上转型和向下转型"><a href="#09-06-面向对象-多态中向上转型和向下转型" class="headerlink" title="09.06_面向对象(多态中向上转型和向下转型)"></a>09.06_面向对象(多态中向上转型和向下转型)</h3></li></ul></li><li>A:案例演示<ul><li>详细讲解多态中向上转型和向下转型<br>Person p = new SuperMan();向上转型<br>SuperMan sm = (SuperMan)p;向下转型<h3 id="09-07-面向对象-多态的好处和弊端"><a href="#09-07-面向对象-多态的好处和弊端" class="headerlink" title="09.07_面向对象(多态的好处和弊端)"></a>09.07_面向对象(多态的好处和弊端)</h3></li></ul></li><li>A:多态的好处<ul><li>a:提高了代码的维护性(继承保证)</li><li>b:提高了代码的扩展性(由多态保证)</li></ul></li><li>B:案例演示<ul><li>多态的好处</li><li>可以当作形式参数,可以接收任意子类对象</li></ul></li><li>C:多态的弊端<ul><li>不能使用子类的特有属性和行为。</li></ul></li><li>D:案例演示<br>  method(Animal a)<br>  method(Cat c)</li></ul><h3 id="09-08-面向对象-多态中的题目分析题"><a href="#09-08-面向对象-多态中的题目分析题" class="headerlink" title="09.08_面向对象(多态中的题目分析题)"></a>09.08_面向对象(多态中的题目分析题)</h3><ul><li><p>A:看下面程序是否有问题，如果没有，说出结果</p></li><li><pre><code>  class Fu &#123;      public void show() &#123;          System.out.println(&quot;fu show&quot;);      &#125;  &#125;  class Zi extends Fu &#123;      public void show() &#123;          System.out.println(&quot;zi show&quot;);      &#125;      public void method() &#123;          System.out.println(&quot;zi method&quot;);      &#125;  &#125;  class Test1Demo &#123;      public static void main(String[] args) &#123;          Fu f = new Zi();          f.method();          f.show();      &#125;  &#125;</code></pre></li><li><p>B:看下面程序是否有问题，如果没有，说出结果</p></li><li><pre><code>  class A &#123;      public void show() &#123;          show2();      &#125;      public void show2() &#123;          System.out.println(&quot;我&quot;);      &#125;  &#125;  class B extends A &#123;      public void show2() &#123;          System.out.println(&quot;爱&quot;);      &#125;  &#125;  class C extends B &#123;      public void show() &#123;          super.show();      &#125;      public void show2() &#123;          System.out.println(&quot;你&quot;);      &#125;  &#125;  public class Test2DuoTai &#123;      public static void main(String[] args) &#123;          A a = new B();          a.show();          B b = new C();          b.show();      &#125;  &#125;</code></pre></li></ul><h3 id="09-09-面向对象-抽象类的概述及其特点"><a href="#09-09-面向对象-抽象类的概述及其特点" class="headerlink" title="09.09_面向对象(抽象类的概述及其特点)"></a>09.09_面向对象(抽象类的概述及其特点)</h3><ul><li>A:抽象类概述<ul><li>抽象就是看不懂的 </li></ul></li><li>B:抽象类特点<ul><li>a:抽象类和抽象方法必须用abstract关键字修饰<ul><li>abstract class 类名 {}</li><li>public abstract void eat();</li></ul></li><li>b:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口</li><li>c:抽象类不能实例化那么，抽象类如何实例化呢?<ul><li>按照多态的方式，由具体的子类实例化。其实这也是多态的一种，抽象类多态。</li></ul></li><li>d:抽象类的子类<ul><li>要么是抽象类</li><li>要么重写抽象类中的所有抽象方法</li></ul></li></ul></li><li>C:案例演示<ul><li>抽象类特点B:抽象类特点</li><li>a:抽象类和抽象方法必须用abstract关键字修饰<ul><li>abstract class 类名 {}</li><li>public abstract void eat();</li></ul></li><li>b:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口</li><li>c:抽象类不能实例化那么，抽象类如何实例化呢?<ul><li>按照多态的方式，由具体的子类实例化。其实这也是多态的一种，抽象类多态。</li></ul></li><li>d:抽象类的子类<ul><li>要么是抽象类</li><li>要么重写抽象类中的所有抽象方法</li></ul></li></ul></li></ul><h3 id="09-10-面向对象-抽象类的成员特点"><a href="#09-10-面向对象-抽象类的成员特点" class="headerlink" title="09.10_面向对象(抽象类的成员特点)"></a>09.10_面向对象(抽象类的成员特点)</h3><ul><li>A:抽象类的成员特点<ul><li>a:成员变量：既可以是变量，也可以是常量。abstract是否可以修饰成员变量?不能修饰成员变量</li><li>b:构造方法：有。<ul><li>用于子类访问父类数据的初始化。</li></ul></li><li>c:成员方法：既可以是抽象的，也可以是非抽象的。</li></ul></li><li>B:案例演示<ul><li>抽象类的成员特点</li></ul></li><li>C:抽象类的成员方法特性：<ul><li>a:抽象方法 强制要求子类做的事情。</li><li>b:非抽象方法 子类继承的事情，提高代码复用性。</li></ul></li></ul><h3 id="09-11-面向对象-葵花宝典"><a href="#09-11-面向对象-葵花宝典" class="headerlink" title="09.11_面向对象(葵花宝典)"></a>09.11_面向对象(葵花宝典)</h3><ul><li>案例演示<ul><li>抽象类的作用 <h3 id="09-12-面向对象-抽象类练习猫狗案例"><a href="#09-12-面向对象-抽象类练习猫狗案例" class="headerlink" title="09.12_面向对象(抽象类练习猫狗案例)"></a>09.12_面向对象(抽象类练习猫狗案例)</h3></li></ul></li><li>A:案例演示<ul><li>具体事物：猫，狗</li><li>共性：姓名，年龄，吃饭</li><li>猫的特性:抓老鼠</li><li>狗的特性:看家</li></ul></li></ul><h3 id="09-13-面向对象-抽象类练习老师案例"><a href="#09-13-面向对象-抽象类练习老师案例" class="headerlink" title="09.13_面向对象(抽象类练习老师案例)"></a>09.13_面向对象(抽象类练习老师案例)</h3><ul><li>A:案例演示<ul><li>具体事物：基础班老师，就业班老师</li><li>共性：姓名，年龄，讲课。</li><li>具体事物:基础班学生,就业班学生</li><li>共性:姓名,年龄,学习</li></ul></li></ul><h3 id="09-14-面向对象-抽象类练习员工案例"><a href="#09-14-面向对象-抽象类练习员工案例" class="headerlink" title="09.14_面向对象(抽象类练习员工案例)"></a>09.14_面向对象(抽象类练习员工案例)</h3><ul><li>A:案例演示<ul><li>假如我们在开发一个系统时需要对程序员类进行设计，程序员包含3个属性：姓名、工号以及工资。</li><li>经理，除了含有程序员的属性外，另为还有一个奖金属性。</li><li>请使用继承的思想设计出程序员类和经理类。要求类中提供必要的方法进行属性访问。</li></ul></li></ul><h3 id="09-15-面向对象-抽象类中的面试题"><a href="#09-15-面向对象-抽象类中的面试题" class="headerlink" title="09.15_面向对象(抽象类中的面试题)"></a>09.15_面向对象(抽象类中的面试题)</h3><ul><li>A:面试题1<ul><li>一个抽象类如果没有抽象方法，可不可以定义为抽象类?如果可以，有什么意义?</li><li>可以</li><li>这么做目的只有一个,就是不让其他类创建本类对象,交给子类完成</li></ul></li><li>B:面试题2<ul><li>abstract不能和哪些关键字共存</li></ul></li></ul><h3 id="09-16-面向对象-接口的概述及其特点"><a href="#09-16-面向对象-接口的概述及其特点" class="headerlink" title="09.16_面向对象(接口的概述及其特点)"></a>09.16_面向对象(接口的概述及其特点)</h3><ul><li><p>A:接口概述</p><ul><li>从狭义的角度讲就是指java中的interface</li><li>从广义的角度讲对外提供规则的都是接口 </li></ul></li><li><p>B:接口特点</p><ul><li>a:接口用关键字interface表示    <ul><li>interface 接口名 {}</li></ul></li><li>b:类实现接口用implements表示<ul><li>class 类名 implements 接口名 {}</li></ul></li><li>c:接口不能实例化<ul><li>那么，接口如何实例化呢?</li><li>按照多态的方式来实例化。</li></ul></li><li>d:接口的子类<ul><li>a:可以是抽象类。但是意义不大。</li><li>b:可以是具体类。要重写接口中的所有抽象方法。(推荐方案)</li></ul></li></ul></li><li><p>C:案例演示</p><ul><li>接口特点<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1_Interface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Inter i = new Inter();//接口不能被实例化,因为调用抽象方法没有意义</span></span><br><span class="line">Inter i = <span class="keyword">new</span> Demo();<span class="comment">//父类引用指向子类对象</span></span><br><span class="line">i.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:接口概述</span></span><br><span class="line"><span class="comment">* 从狭义的角度讲就是指java中的interface</span></span><br><span class="line"><span class="comment">* 从广义的角度讲对外提供规则的都是接口 </span></span><br><span class="line"><span class="comment">* B:接口特点</span></span><br><span class="line"><span class="comment">* a:接口用关键字interface表示</span></span><br><span class="line"><span class="comment">* interface 接口名 &#123;&#125;</span></span><br><span class="line"><span class="comment">* b:类实现接口用implements表示</span></span><br><span class="line"><span class="comment">* class 类名 implements 接口名 &#123;&#125;</span></span><br><span class="line"><span class="comment">* c:接口不能实例化</span></span><br><span class="line"><span class="comment">* 那么，接口如何实例化呢?</span></span><br><span class="line"><span class="comment">* 按照多态的方式来实例化。</span></span><br><span class="line"><span class="comment">* d:接口的子类</span></span><br><span class="line"><span class="comment">* a:可以是抽象类。但是意义不大。</span></span><br><span class="line"><span class="comment">* b:可以是具体类。要重写接口中的所有抽象方法。(推荐方案)</span></span><br><span class="line"><span class="comment">* C:案例演示</span></span><br><span class="line"><span class="comment">* 接口特点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;<span class="comment">//接口中的方法都是抽象的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;print&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09-17-面向对象-接口的成员特点"><a href="#09-17-面向对象-接口的成员特点" class="headerlink" title="09.17_面向对象(接口的成员特点)"></a>09.17_面向对象(接口的成员特点)</h3></li></ul></li><li><p>A:接口成员特点</p><ul><li>成员变量；只能是常量，并且是静态的并公共的。<pre><code>  * 默认修饰符：public static final  * 建议：自己手动给出。</code></pre></li><li>构造方法：接口没有构造方法。</li><li>成员方法：只能是抽象方法。<pre><code>  * 默认修饰符：public abstract  * 建议：自己手动给出。</code></pre></li></ul></li><li><p>B:案例演示</p><ul><li>接口成员特点<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2_Interface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">d.print();</span><br><span class="line">System.out.println(Inter.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 成员变量；只能是常量，并且是静态的并公共的。</span></span><br><span class="line"><span class="comment">* 默认修饰符：public static final三个关键字可以互相交换位置</span></span><br><span class="line"><span class="comment">* 建议：自己手动给出。</span></span><br><span class="line"><span class="comment">* 构造方法：接口没有构造方法。</span></span><br><span class="line"><span class="comment">* 成员方法：只能是抽象方法。</span></span><br><span class="line"><span class="comment">* 默认修饰符：public abstract</span></span><br><span class="line"><span class="comment">* 建议：自己手动给出。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//public Inter()&#123;&#125;接口中没有构造方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*public void print() &#123;接口中不能定义非抽象方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ <span class="keyword">implements</span> <span class="title">Inter</span> </span>&#123;<span class="comment">//一个类不写继承任何类,默认继承Object类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//num = 20;</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09-18-面向对象-类与类-类与接口-接口与接口的关系"><a href="#09-18-面向对象-类与类-类与接口-接口与接口的关系" class="headerlink" title="09.18_面向对象(类与类,类与接口,接口与接口的关系)"></a>09.18_面向对象(类与类,类与接口,接口与接口的关系)</h3></li></ul></li><li><p>A:类与类,类与接口,接口与接口的关系</p><ul><li>a:类与类：<ul><li>继承关系,只能单继承,可以多层继承。</li></ul></li><li>b:类与接口：<ul><li>实现关系,可以单实现,也可以多实现。</li><li>并且还可以在继承一个类的同时实现多个接口。</li></ul></li><li>c:接口与接口：<ul><li>继承关系,可以单继承,也可以多继承。</li></ul></li></ul></li><li><p>B:案例演示</p><ul><li>类与类,类与接口,接口与接口的关系<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3_Interface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:类与类,类与接口,接口与接口的关系</span></span><br><span class="line"><span class="comment">* a:类与类：</span></span><br><span class="line"><span class="comment">* 继承关系,只能单继承,可以多层继承。</span></span><br><span class="line"><span class="comment">* b:类与接口：</span></span><br><span class="line"><span class="comment">* 实现关系,可以单实现,也可以多实现。</span></span><br><span class="line"><span class="comment">* 并且还可以在继承一个类的同时实现多个接口。</span></span><br><span class="line"><span class="comment">* c:接口与接口：</span></span><br><span class="line"><span class="comment">* 继承关系,可以单继承,也可以多继承。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterA</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterC</span> <span class="keyword">extends</span> <span class="title">InterB</span>,<span class="title">InterA</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class Demo implements InterA,implements InterB &#123;//这么做不允许是非法的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">InterA</span>,<span class="title">InterB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;printA&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;printB&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09-19-面向对象-抽象类和接口的区别"><a href="#09-19-面向对象-抽象类和接口的区别" class="headerlink" title="09.19_面向对象(抽象类和接口的区别)"></a>09.19_面向对象(抽象类和接口的区别)</h3></li></ul></li><li><p>A:成员区别</p><ul><li>抽象类：<ul><li>成员变量：可以变量，也可以常量</li><li>构造方法：有</li><li>成员方法：可以抽象，也可以非抽象</li></ul></li><li>接口：<ul><li>成员变量：只可以常量</li><li>成员方法：只可以抽象</li></ul></li></ul></li><li><p>B:关系区别</p><ul><li>类与类<ul><li>继承，单继承</li></ul></li><li>类与接口<ul><li>实现，单实现，多实现</li></ul></li><li>接口与接口<ul><li>继承，单继承，多继承</li></ul></li></ul></li><li><p>C:设计理念区别</p><ul><li>抽象类 被继承体现的是：”is a”的关系。抽象类中定义的是该继承体系的共性功能。</li><li>接口 被实现体现的是：”like a”的关系。接口中定义的是该继承体系的扩展功能。</li></ul></li></ul><h3 id="09-20-面向对象-猫狗案例加入跳高功能分析及其代码实现"><a href="#09-20-面向对象-猫狗案例加入跳高功能分析及其代码实现" class="headerlink" title="09.20_面向对象(猫狗案例加入跳高功能分析及其代码实现)"></a>09.20_面向对象(猫狗案例加入跳高功能分析及其代码实现)</h3><ul><li>A:案例演示<ul><li>动物类：姓名，年龄，吃饭，睡觉。</li><li>猫和狗</li><li>动物培训接口：跳高</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础08-面向对象</title>
      <link href="/2020/06/15/Java%E5%9F%BA%E7%A1%8008-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/06/15/Java%E5%9F%BA%E7%A1%8008-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="08-01-面向对象-代码块的概述和分类"><a href="#08-01-面向对象-代码块的概述和分类" class="headerlink" title="08.01_面向对象(代码块的概述和分类)"></a>08.01_面向对象(代码块的概述和分类)</h2><ul><li>A:代码块概述<ul><li>在Java中，使用{}括起来的代码被称为代码块</li></ul></li><li>B:代码块分类<ul><li>根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块(多线程讲解)。</li></ul></li><li>C:常见代码块的应用<ul><li>a:局部代码块 <ul><li>在方法中出现；限定变量生命周期，及早释放，提高内存利用率</li></ul></li><li>b:构造代码块 (初始化块)<ul><li>在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</li></ul></li><li><strong>c:静态代码块</strong> <ul><li>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。</li><li><strong>一般用于加载驱动</strong></li></ul></li></ul></li></ul><h2 id="08-02-面向对象-代码块的面试题-掌握"><a href="#08-02-面向对象-代码块的面试题-掌握" class="headerlink" title="08.02_面向对象(代码块的面试题)(掌握)"></a>08.02_面向对象(代码块的面试题)(掌握)</h2><ul><li><p>A:看程序写结果</p></li><li><pre><code>  class Student &#123;      static &#123;          System.out.println(&quot;Student 静态代码块&quot;);      &#125;      &#123;          System.out.println(&quot;Student 构造代码块&quot;);      &#125;      public Student() &#123;          System.out.println(&quot;Student 构造方法&quot;);      &#125;  &#125;  class Demo2_Student &#123;      static &#123;          System.out.println(&quot;Demo2_Student静态代码块&quot;);      &#125;      public static void main(String[] args) &#123;          System.out.println(&quot;我是main方法&quot;);          Student s1 = new Student();          Student s2 = new Student();      &#125;  &#125;</code></pre></li></ul><h3 id="08-03-面向对象-继承案例演示-掌握"><a href="#08-03-面向对象-继承案例演示-掌握" class="headerlink" title="08.03_面向对象(继承案例演示)(掌握)"></a>08.03_面向对象(继承案例演示)(掌握)</h3><ul><li>A:继承(extends)<ul><li>让类与类之间产生关系,子父类关系 </li></ul></li><li>B:继承案例演示：<ul><li>动物类,猫类,狗类</li><li>定义两个属性(颜色,腿的个数)两个功能(吃饭，睡觉)</li></ul></li></ul><h3 id="08-04-面向对象-继承的好处和弊端-掌握"><a href="#08-04-面向对象-继承的好处和弊端-掌握" class="headerlink" title="08.04_面向对象(继承的好处和弊端)(掌握)"></a>08.04_面向对象(继承的好处和弊端)(掌握)</h3><ul><li><p><strong>A:继承的好处</strong></p><ul><li>a:提高了代码的复用性</li><li>b:提高了代码的维护性</li><li>c:让类与类之间产生了关系，是多态的前提</li></ul></li><li><p><strong>B:继承的弊端</strong></p><ul><li><p>类的耦合性增强了。</p></li><li><p>开发的原则：高内聚，低耦合。</p></li><li><p>耦合：类与类的关系</p></li><li><p>内聚：就是自己完成某件事情的能力</p></li></ul></li></ul><h3 id="08-05-面向对象-Java中类的继承特点-掌握"><a href="#08-05-面向对象-Java中类的继承特点-掌握" class="headerlink" title="08.05_面向对象(Java中类的继承特点)(掌握)"></a>08.05_面向对象(Java中类的继承特点)(掌握)</h3><ul><li>A:Java中类的继承特点<ul><li>a:Java只支持单继承，不支持多继承。(一个儿子只能有一个爹)<ul><li>有些语言是支持多继承，格式：extends 类1,类2,…</li></ul></li><li>b:Java支持多层继承(继承体系)</li></ul></li><li>B:案例演示<ul><li>Java中类的继承特点<ul><li>如果想用这个体系的所有功能用最底层的类创建对象</li><li>如果想看这个体系的共性功能,看最顶层的类 </li></ul></li></ul></li></ul><h3 id="08-06-面向对象-继承的注意事项和什么时候使用继承-掌握"><a href="#08-06-面向对象-继承的注意事项和什么时候使用继承-掌握" class="headerlink" title="08.06_面向对象(继承的注意事项和什么时候使用继承)(掌握)"></a>08.06_面向对象(继承的注意事项和什么时候使用继承)(掌握)</h3><ul><li>A:继承的注意事项<ul><li>a:子类只能继承父类所有非私有的成员(成员方法和成员变量)</li><li>b:<strong>子类不能继承父类的构造方法，但是可以通过super(马上讲)关键字去访问父类构造方法。</strong></li><li>c:不要为了部分功能而去继承</li><li>项目经理 姓名 工号 工资 奖金</li><li>程序员    姓名 工号 工资</li></ul></li><li>B:什么时候使用继承<ul><li>继承其实体现的是一种关系：”is a”。<br>  Person<pre><code>  Student  Teacher</code></pre>  水果<pre><code>  苹果  香蕉  橘子</code></pre></li></ul></li></ul><pre><code>采用假设法。    如果有两个类A,B。只有他们符合A是B的一种，或者B是A的一种，就可以考虑使用继承。</code></pre><h3 id="08-07-面向对象-继承中成员变量的关系-掌握"><a href="#08-07-面向对象-继承中成员变量的关系-掌握" class="headerlink" title="08.07_面向对象(继承中成员变量的关系)(掌握)"></a>08.07_面向对象(继承中成员变量的关系)(掌握)</h3><ul><li>A:案例演示<ul><li>a:不同名的变量</li><li>b:同名的变量</li></ul></li></ul><h3 id="08-08-面向对象-this和super的区别和应用-掌握"><a href="#08-08-面向对象-this和super的区别和应用-掌握" class="headerlink" title="08.08_面向对象(this和super的区别和应用)(掌握)"></a>08.08_面向对象(<strong>this和super的区别和应用</strong>)(掌握)</h3><ul><li>A:this和super都代表什么<ul><li>this:代表当前对象的引用,谁来调用我,我就代表谁</li><li>super:代表当前对象父类的引用</li></ul></li><li>B:this和super的使用区别<ul><li>a:调用成员变量<ul><li>this.成员变量 调用本类的成员变量,也可以调用父类的成员变量</li><li>super.成员变量 调用父类的成员变量</li></ul></li><li>b:调用构造方法<ul><li>this(…)    调用本类的构造方法</li><li>super(…)    调用父类的构造方法</li></ul></li><li>c:调用成员方法<ul><li>this.成员方法 调用本类的成员方法,也可以调用父类的方法</li><li>super.成员方法 调用父类的成员方法</li></ul></li></ul></li></ul><h3 id="08-09-面向对象-继承中构造方法的关系-掌握"><a href="#08-09-面向对象-继承中构造方法的关系-掌握" class="headerlink" title="08.09_面向对象(继承中构造方法的关系)(掌握)"></a>08.09_面向对象(继承中构造方法的关系)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li>子类中所有的构造方法默认都会访问父类中空参数的构造方法</li></ul></li><li><p>B:为什么呢?</p><ul><li><p>因为子类会继承父类中的数据，可能还会使用父类的数据。</p></li><li><p>所以，子类初始化之前，一定要先完成父类数据的初始化。</p></li><li><p>其实：</p><ul><li>每一个构造方法的第一条语句默认都是：super() Object类最顶层的父类。</li></ul></li></ul></li></ul><h3 id="08-10-面向对象-继承中构造方法的注意事项-掌握"><a href="#08-10-面向对象-继承中构造方法的注意事项-掌握" class="headerlink" title="08.10_面向对象(继承中构造方法的注意事项)(掌握)"></a>08.10_面向对象(继承中构造方法的注意事项)(掌握)</h3><ul><li>A:案例演示<ul><li>父类没有无参构造方法,子类怎么办?</li><li>super解决</li><li>this解决</li></ul></li><li>B:注意事项<ul><li>super(…)或者this(….)必须出现在构造方法的第一条语句上</li></ul></li></ul><h3 id="08-11-面向对象-继承中的面试题-掌握"><a href="#08-11-面向对象-继承中的面试题-掌握" class="headerlink" title="08.11_面向对象(继承中的面试题)(掌握)"></a>08.11_面向对象(继承中的面试题)(掌握)</h3><ul><li><p>A:案例演示</p></li><li><p>看程序写结果1<br>class Fu{<br>  public int num = 10;<br>  public Fu(){</p><pre><code>  System.out.println(&quot;fu&quot;);</code></pre><p>  }<br>}<br>class Zi extends Fu{<br>  public int num = 20;<br>  public Zi(){</p><pre><code>  System.out.println(&quot;zi&quot;);</code></pre><p>  }<br>  public void show(){</p><pre><code>  int num = 30;  System.out.println(num);  System.out.println(this.num);  System.out.println(super.num);</code></pre><p>  }<br>}<br>class Test1_Extends {<br>  public static void main(String[] args) {</p><pre><code>  Zi z = new Zi();  z.show();</code></pre><p>  }<br>}</p><p>看程序写结果2<br>class Fu {<br>  static {</p><pre><code>  System.out.println(&quot;静态代码块Fu&quot;);</code></pre><p>  }</p><p>  {</p><pre><code>  System.out.println(&quot;构造代码块Fu&quot;);</code></pre><p>  }</p><p>  public Fu() {</p><pre><code>  System.out.println(&quot;构造方法Fu&quot;);</code></pre><p>  }<br>}</p><p>class Zi extends Fu {<br>  static {</p><pre><code>  System.out.println(&quot;静态代码块Zi&quot;);</code></pre><p>  }</p><p>  {</p><pre><code>  System.out.println(&quot;构造代码块Zi&quot;);</code></pre><p>  }</p><p>  public Zi() {</p><pre><code>  System.out.println(&quot;构造方法Zi&quot;);</code></pre><p>  }<br>}</p><p>Zi z = new Zi(); 请执行结果。</p></li></ul><h3 id="08-12-面向对象-继承中成员方法关系-掌握"><a href="#08-12-面向对象-继承中成员方法关系-掌握" class="headerlink" title="08.12_面向对象(继承中成员方法关系)(掌握)"></a>08.12_面向对象(继承中成员方法关系)(掌握)</h3><ul><li>A:案例演示<ul><li>a:不同名的方法</li><li>b:同名的方法</li></ul></li></ul><h3 id="08-13-面向对象-方法重写概述及其应用-掌握"><a href="#08-13-面向对象-方法重写概述及其应用-掌握" class="headerlink" title="08.13_面向对象(方法重写概述及其应用)(掌握)"></a>08.13_面向对象(方法重写概述及其应用)(掌握)</h3><ul><li>A:什么是方法重写<ul><li>重写:子父类出现了一模一样的方法(注意:返回值类型可以是子父类,这个我们学完面向对象讲) </li></ul></li><li>B:方法重写的应用：<ul><li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法。这样，即沿袭了父类的功能，又定义了子类特有的内容。</li></ul></li><li>C:案例演示<ul><li>a:定义一个手机类。</li></ul></li></ul><h3 id="08-14-面向对象-方法重写的注意事项-掌握"><a href="#08-14-面向对象-方法重写的注意事项-掌握" class="headerlink" title="08.14_面向对象(方法重写的注意事项)(掌握)"></a>08.14_面向对象(方法重写的注意事项)(掌握)</h3><ul><li><p>A:方法重写注意事项</p><ul><li><p>a:父类中私有方法不能被重写</p><ul><li>因为父类私有方法子类根本就无法继承</li></ul></li><li><p>b:子类重写父类方法时，访问权限不能更低</p><ul><li>最好就一致</li></ul></li><li><p>c:父类静态方法，子类也必须通过静态方法进行重写</p><ul><li>其实这个算不上方法重写，但是现象确实如此，至于为什么算不上方法重写，多态中我会讲解(静态只能覆盖静态)</li></ul></li><li><p>子类重写父类方法的时候，最好声明一模一样。</p></li></ul></li><li><p>B:案例演示</p><ul><li>方法重写注意事项</li></ul></li></ul><h3 id="08-15-面向对象-方法重写的面试题-掌握"><a href="#08-15-面向对象-方法重写的面试题-掌握" class="headerlink" title="08.15_面向对象(方法重写的面试题)(掌握)"></a>08.15_面向对象(方法重写的面试题)(掌握)</h3><ul><li><p>A:方法重写的面试题</p><ul><li><p><strong>Override和Overload的区别?Overload能改变返回值类型吗?</strong></p></li><li><p>overload可以改变返回值类型,只看参数列表</p></li><li><p>方法重写：子类中出现了和父类中方法声明一模一样的方法。与返回值类型有关,返回值是一致(或者是子父类)的</p></li><li><p><strong>方法重载：本类中出现的方法名一样，参数列表不同的方法。与返回值类型无关。</strong></p></li><li><p>子类对象调用方法的时候：</p><ul><li>先找子类本身，再找父类。</li></ul></li></ul></li></ul><h3 id="08-16-面向对象-使用继承前的学生和老师案例-掌握"><a href="#08-16-面向对象-使用继承前的学生和老师案例-掌握" class="headerlink" title="08.16_面向对象(使用继承前的学生和老师案例)(掌握)"></a>08.16_面向对象(使用继承前的学生和老师案例)(掌握)</h3><ul><li>A:案例演示<ul><li>使用继承前的学生和老师案例</li><li>属性:姓名,年龄</li><li>行为:吃饭</li><li>老师有特有的方法:讲课</li><li>学生有特有的方法:学习</li></ul></li></ul><p>###08.17_面向对象(使用继承后的学生和老师案例)(掌握)</p><ul><li>A:案例演示<ul><li>使用继承后的学生和老师案例</li></ul></li></ul><p>###08.18_面向对象(猫狗案例分析,实现及测试)(掌握)</p><ul><li>A:猫狗案例分析</li><li>B:案例演示<ul><li>猫狗案例继承版</li><li>属性:毛的颜色,腿的个数</li><li>行为:吃饭</li><li>猫特有行为:抓老鼠catchMouse</li><li>狗特有行为:看家lookHome</li></ul></li></ul><h3 id="08-19-面向对象-final关键字修饰类-方法以及变量的特点-掌握"><a href="#08-19-面向对象-final关键字修饰类-方法以及变量的特点-掌握" class="headerlink" title="08.19_面向对象(final关键字修饰类,方法以及变量的特点)(掌握)"></a>08.19_面向对象(final关键字修饰类,方法以及变量的特点)(掌握)</h3><ul><li>A:final概述</li><li>B:<strong>final修饰特点</strong><ul><li>修饰类，类不能被继承</li><li>修饰变量，变量就变成了常量，只能被赋值一次</li><li>修饰方法，方法不能被重写</li></ul></li><li>C:案例演示<ul><li>final修饰特点</li></ul></li></ul><h3 id="08-20-面向对象-final关键字修饰局部变量-掌握"><a href="#08-20-面向对象-final关键字修饰局部变量-掌握" class="headerlink" title="08.20_面向对象(final关键字修饰局部变量)(掌握)"></a>08.20_面向对象(final关键字修饰局部变量)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li><p>方法内部或者方法声明上都演示一下(了解)</p></li><li><p>基本类型，是值不能被改变</p></li><li><p>引用类型，是地址值不能被改变,对象中的属性可以改变</p></li></ul></li></ul><h3 id="08-21-面向对象-final修饰变量的初始化时机-掌握"><a href="#08-21-面向对象-final修饰变量的初始化时机-掌握" class="headerlink" title="08.21_面向对象(final修饰变量的初始化时机)(掌握)"></a>08.21_面向对象(final修饰变量的初始化时机)(掌握)</h3><ul><li>A:final修饰变量的初始化时机<ul><li>显示初始化 </li><li>在对象构造完毕前即可</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你会单元测试吗</title>
      <link href="/2020/06/12/%E4%BD%A0%E4%BC%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%90%97/"/>
      <url>/2020/06/12/%E4%BD%A0%E4%BC%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%90%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>单元测试对我们程序员来说是非常重要的</p></blockquote><p>[TOC]</p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li><p>[ ]1、单元测试</p><ul><li><input disabled="" type="checkbox"> 什么是单元测试</li><li><input disabled="" type="checkbox"> 为什么使用单元测试</li></ul></li><li><p>[ ]2、Junit 4 基础</p><ul><li><input disabled="" type="checkbox"> 环境搭建</li><li><input disabled="" type="checkbox"> 创建测试类</li><li><input disabled="" type="checkbox"> 运行测试类</li><li><input disabled="" type="checkbox"> 什么是断言</li><li><input disabled="" type="checkbox"> Junit 常用注解</li><li><input disabled="" type="checkbox"> 官方 Demo</li></ul></li><li><p>[ ]3、新断言</p><ul><li><input disabled="" type="checkbox"> 新断言的使用</li><li><input disabled="" type="checkbox"> 新断言类的替换</li></ul></li><li><p>[ ]4、常规使用</p><ul><li><input disabled="" type="checkbox"> 类的单元测试创建</li><li><input disabled="" type="checkbox"> 运行多个测试</li></ul></li></ul><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h2><p><a href="%5Bhttps://baike.baidu.com/item/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/1917084?fr=aladdin%5D(https://baike.baidu.com/item/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/1917084?fr=aladdin)">百度百科：单元测试</a></p><h2 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h2><p><code>你认为单元测试应该怎么做？</code></p><p>main 函数，调用你的业务方法。</p><h1 id="Junit4-的使用"><a href="#Junit4-的使用" class="headerlink" title="Junit4 的使用"></a>Junit4 的使用</h1><p><a href="https://github.com/junit-team/junit4/wiki/Download-and-Install">Junit4.13 GitHub 官网</a></p><p><a href="https://junit.org/junit4/">Junit 官网</a></p><p><a href="https://github.com/junit-team/junit4/blob/master/doc/ReleaseNotes4.13.md">Junit4.13 的新特性</a></p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>pom 文件引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shaotongjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/12 20:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addtest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">        <span class="keyword">boolean</span> flag  =  userService.add(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Assert-断言"><a href="#Assert-断言" class="headerlink" title="Assert 断言"></a>Assert 断言</h2><table><thead><tr><th>静态函数</th><th>解释</th></tr></thead><tbody><tr><td>assertArrayEquals(expecteds, actuals)</td><td>查看两个数组是否相等。</td></tr><tr><td>assertEquals(expected, actual)<br />assert<strong>Not</strong>Equals(first, second)</td><td>查看两个对象是否相等。类似于字符串比较使用的equals()方法<br />查看两个对象是否不相等。</td></tr><tr><td>assertNull(object)<br />assert<strong>Not</strong>Null(object)</td><td>查看对象是否为空。<br />查看对象是否不为空。</td></tr><tr><td>assertSame(expected, actual)<br />assert<strong>Not</strong>Same(unexpected, actual)</td><td>查看两个对象的引用是否相等。类似于使用“==”比较两个对象<br />查看两个对象的引用是否不相等。类似于使用“!=”比较两个对象</td></tr><tr><td>assertTrue(condition)<br />assertFalse(condition)</td><td>查看运行结果是否为true。<br />查看运行结果是否为false。</td></tr><tr><td>assertThat(actual, matcher)</td><td>查看实际值是否满足指定的条件</td></tr><tr><td>fail()</td><td>让测试失败</td></tr></tbody></table><h2 id="Junit-常用注解"><a href="#Junit-常用注解" class="headerlink" title="Junit 常用注解"></a>Junit 常用注解</h2><ol><li>@Test 测试方法<ul><li>（expected = XXException.class)</li><li>（timeout=xxx）</li></ul></li><li>@Ignore 被忽略的测试方法</li><li>@Before 每一个测试方法之前运行</li><li>@After 每一个测试方法之后运行</li><li>@BeforeClass 所有测试开始之前运行</li><li>@AfterClass 所有测试结束之后运行</li><li>@RunWith就是一个运行器<ul><li>@RunWith(JUnit4.class)就是指用JUnit4来运行（默认，可以不用写）</li><li>@RunWith(SpringJUnit4ClassRunner.class),让测试运行于Spring测试环境</li><li>@RunWith(Suite.class)的话就是一套测试集合</li></ul></li></ol><h2 id="官方Demo"><a href="#官方Demo" class="headerlink" title="官方Demo"></a>官方Demo</h2><p>AssertTests.java</p><h1 id="新断言"><a href="#新断言" class="headerlink" title="新断言"></a>新断言</h1><h2 id="新断言-hamcrest"><a href="#新断言-hamcrest" class="headerlink" title="新断言 hamcrest"></a>新断言 hamcrest</h2><p>常用的核心新断言，核心匹配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.*;</span><br></pre></td></tr></table></figure><p>但是，需要具体的一些边界值的操作，就需要引入扩展包</p><p>pom 中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test中引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.stj.entity.User;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.ir.CallNode;</span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.fail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shaotongjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/12 20:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span> <span class="comment">// 整个类 加载之前就已经运行了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行之前执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span> <span class="comment">// 整个类 加载之前就已经运行了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行之后执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在所有测试单元执行之前，先执行 before 方法</span></span><br><span class="line">    <span class="comment">//每一个 测试单元执行之前，都会执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService = <span class="keyword">new</span> UserService();</span><br><span class="line">        System.out.println(<span class="string">&quot;测试单元执行之前，执行的内容&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="comment">//每一个 测试单元执行之后，都会执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试方法结束之后，执行的内容！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addtest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        UserService userService = new UserService();</span></span><br><span class="line">        <span class="keyword">boolean</span> flag  =  userService.add(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addtest2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        UserService userService = new UserService();</span></span><br><span class="line">        <span class="comment">// 我断定 userService.add  的返回值是 True</span></span><br><span class="line">        Assert.assertTrue(<span class="string">&quot;这个地方不是 true&quot;</span>,userService.add(<span class="number">4</span>,<span class="number">5</span>));<span class="comment">//9 false</span></span><br><span class="line">        <span class="comment">//fail(&quot;我就是作&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = NullPointerException.class,timeout = 100)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logintest1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//        UserService userService = new UserService();</span></span><br><span class="line">        User user =  userService.login(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Test</span></span><br><span class="line"><span class="comment">//    public void getNamestest()&#123;</span></span><br><span class="line"><span class="comment">//        String[] names = userService.getNames();</span></span><br><span class="line"><span class="comment">//        // allOf 每一个条件都需要匹配</span></span><br><span class="line"><span class="comment">//        assertThat(&quot;用户名不匹配&quot;,names,not(allOf(equalTo(&quot;xiaobai&quot;))));</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Test</span></span><br><span class="line"><span class="comment">//    public void getAgetest()&#123;</span></span><br><span class="line"><span class="comment">//        int age = userService.getAge(6);// 业务要求: 5 到15 之间</span></span><br><span class="line"><span class="comment">//        //范围， 边界值</span></span><br><span class="line"><span class="comment">//        assertThat(&quot;age 的值必须是在 5 到 15 之间&quot;,age,allOf(greaterThanOrEqualTo(5),lessThanOrEqualTo(15)));</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要的API接口有如下：</p><ul><li>核心<ul><li>anything -绝对匹配，无论什么情况下都会匹配成功；</li><li>describedAs -添加自定义失败描述</li><li>is -是否的意思，仅用来改善断言语句的可读性；</li></ul></li><li>逻辑<ul><li>allOf -检查是否包含所有的匹配器，相当于与(&amp;&amp;)；</li><li>anyOf -检查是否包含匹配器中的一个，相当于(||)；</li><li>not - 检查是否与匹配器相反，相当于非(!)；</li></ul></li><li>对象<ul><li>equalTo -检查两个对象是否相等；</li><li>hasToString - 检查Object.toString；</li><li>instanceOf,isCompatibleType -检查对象是否是兼容类型；</li><li>notNullValue,nullValue -检查是否是null值；</li><li>sameInstance -检查对象是否是相同的类型；</li></ul></li><li>Beans<ul><li>hasProperty -检查对象是否有某种属性；</li></ul></li><li>集合<ul><li>array -检查array的元素是否和匹配器描述的相同；</li><li>hasEntry,hasKey,hasValue -测试给定的Map是否有特定的实体、键或者值；</li><li>hasItem,hasItems -测试集合是否有一个或者多个元素；</li><li>hasItemInArray -测试数组中是否有某一元素；</li></ul></li><li>数字<ul><li>closeTo给定的数字是否接近于给定的值；</li><li>greaterThan,greaterThanOrEqualTo,lessThan,lessThanOrEqualTo -给定的数字是否大于、大于等于、小于、小于等于给定的值；</li></ul></li><li>文本<ul><li>equalToIgnoringCase -检查给定的字符串是否与另一字符串在忽略大小写的情况下相同；</li><li>equalToIgnoringWhiteSpace -检查给定的字符串是否与另一字符串在忽略空格的情况下相同；</li><li>containsString -检查给定的字符串是否包含某一字符串；</li><li>endsWith -检查给定的字符串是否以某一字符串结尾；</li><li>startsWith -检查给定的字符串是否以某一字符串开头；</li></ul></li></ul><h2 id="新断言的再更新"><a href="#新断言的再更新" class="headerlink" title="新断言的再更新"></a>新断言的再更新</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertThat; <span class="comment">//删除</span></span><br><span class="line"><span class="comment">// assertThat 不再使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.MatcherAssert.assertThat;<span class="comment">//替换</span></span><br><span class="line"><span class="comment">// 代替为 MatcherAssert.assertThat</span></span><br></pre></td></tr></table></figure><h1 id="单元测试的创建"><a href="#单元测试的创建" class="headerlink" title="单元测试的创建"></a>单元测试的创建</h1><h2 id="运行多个测试"><a href="#运行多个测试" class="headerlink" title="运行多个测试"></a>运行多个测试</h2><h1 id="其他的测试框架"><a href="#其他的测试框架" class="headerlink" title="其他的测试框架"></a>其他的测试框架</h1><p>TestNG</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合JustAuth第三方登录</title>
      <link href="/2020/06/12/SpringBoot%E6%95%B4%E5%90%88JustAuth%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2020/06/12/SpringBoot%E6%95%B4%E5%90%88JustAuth%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot整合JustAuth，实现第三方登录"><a href="#Spring-Boot整合JustAuth，实现第三方登录" class="headerlink" title="Spring Boot整合JustAuth，实现第三方登录"></a>Spring Boot整合JustAuth，实现第三方登录</h2><p>流程如下：</p><ul><li>创建Spring Boot项目</li><li>导入依赖</li><li>修改<strong>Client ID</strong>，<strong>Client Secret</strong>，<strong>redirectUri</strong></li><li>启动项目–完成</li></ul><h3 id="创建SpringBoot初始化项目"><a href="#创建SpringBoot初始化项目" class="headerlink" title="创建SpringBoot初始化项目"></a>创建SpringBoot初始化项目</h3><p>打开IEDA，点击File-New-Project-Spring Initializr，接着添加spring-boot-starter-web，spring-boot-devtools，lombok。</p><p>创建完成后的pom.xml，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.stj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;nateshao&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;nateshao&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;me.zhyd.oauth&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;JustAuth&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.15.4-alpha&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再添加hutool-http，httpclient，okhttp。如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;hutool-http&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.2.5&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.5.12&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;okhttp&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.4.1&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>编写Controller，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stj.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.config.AuthConfig;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.model.AuthCallback;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.request.AuthGiteeRequest;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.request.AuthRequest;</span><br><span class="line"><span class="keyword">import</span> me.zhyd.oauth.utils.AuthStateUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shaotongjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/12 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/oauth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JustAuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取授权链接并跳转到第三方授权页面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException response可能存在的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/render/&#123;source&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">renderAuth</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AuthRequest authRequest = getAuthRequest();</span><br><span class="line">        String authorizeUrl = authRequest.authorize(AuthStateUtils.createState());</span><br><span class="line">        response.sendRedirect(authorizeUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户在确认第三方平台授权（登录）后， 第三方平台会重定向到该地址，并携带code、state等参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback 第三方回调时的入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 第三方平台的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/callback/&#123;source&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(AuthCallback callback)</span> </span>&#123;</span><br><span class="line">        AuthRequest authRequest = getAuthRequest();</span><br><span class="line">        <span class="keyword">return</span> authRequest.login(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取授权Request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AuthRequest</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AuthRequest <span class="title">getAuthRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthGiteeRequest(AuthConfig.builder()</span><br><span class="line">                .clientId(<span class="string">&quot;clientId&quot;</span>)           <span class="comment">//clientId</span></span><br><span class="line">                .clientSecret(<span class="string">&quot;clientSecret&quot;</span>)   <span class="comment">//clientSecret</span></span><br><span class="line">                .redirectUri(<span class="string">&quot;redirectUri&quot;</span>)     <span class="comment">//redirectUri</span></span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这里，就登录gitee，创建第三方应用</p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/gitee%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/%E5%88%9B%E5%BB%BA.png"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/gitee%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/ok.png"></p><p>然后修改<strong>Client ID</strong>，<strong>Client Secret</strong>，<strong>redirectUri</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AuthRequest <span class="title">getAuthRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthGiteeRequest(AuthConfig.builder()</span><br><span class="line">                .clientId(<span class="string">&quot;6a46c8bbe31b34dd4a5c54e73c828a4e3d3d022c1532cbfe652b11959538b0ce&quot;</span>)</span><br><span class="line">                .clientSecret(<span class="string">&quot;2d327f4c7e7081c9e9b1ee71828b9ffde9729bed3ef1def4eb25c0ff620a5dac&quot;</span>)</span><br><span class="line">                .redirectUri(<span class="string">&quot;http://localhost:8080/oauth/callback/gitee&quot;</span>)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后访问：<a href="http://localhost:8080/oauth/render/gitee">http://localhost:8080/oauth/render/gitee</a></p><p>出现下面界面，说明成功啦！</p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/gitee%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/%E6%88%90%E5%8A%9F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boot客户端管理系统流程图</title>
      <link href="/2020/06/07/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
      <url>/2020/06/07/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="Boot客户端管理系统"><a href="#Boot客户端管理系统" class="headerlink" title="Boot客户端管理系统"></a>Boot客户端管理系统</h2><a id="more"></a><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95.png"></p><h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81.png"></p><h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95.png"></p><h4 id="查询客户"><a href="#查询客户" class="headerlink" title="查询客户"></a>查询客户</h4><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E6%9F%A5%E8%AF%A2%E5%AE%A2%E6%88%B7.png"></p><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7.png"> </p><h3 id="修改客户"><a href="#修改客户" class="headerlink" title="修改客户"></a>修改客户</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E4%BF%AE%E6%94%B9%E5%AE%A2%E6%88%B7.png"></p><h3 id="删除客户"><a href="#删除客户" class="headerlink" title="删除客户"></a>删除客户</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Boot%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%88%A0%E9%99%A4%E5%AE%A2%E6%88%B7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的会Mysql吗</title>
      <link href="/2020/05/27/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9AMysql%E5%90%97/"/>
      <url>/2020/05/27/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9AMysql%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.itfzy.cn/post/mysql/classical-problem/">MySQL经典题目</a><br><a href="http://xuesql.cn/">学SQL</a><br><em>二话不说，先来<span style="color:red;font-size: 30px;">Look Look</span>一张图吧！</em></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Mysql/MySql%E7%9F%A5%E8%AF%86%E7%82%B9.png"></p><blockquote><p>这是千羽自己去听了几分钟的课，然后做的思维导图。对于小编而言，第一阶段可还行（其实只会一点CRUD），但是到了第二阶段到第五阶段，小编确实编不下去了…(5555!)</p></blockquote><p>言归正传，事实上，数据库这东西，你越懂那便是越好，特别是作为Java后端程序员来说，每天都是要和数据库打交道的，</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础07-面向对象-方法</title>
      <link href="/2020/05/22/Java%E5%9F%BA%E7%A1%8007-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%96%B9%E6%B3%95/"/>
      <url>/2020/05/22/Java%E5%9F%BA%E7%A1%8007-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="07-01-面向对象-构造方法Constructor概述和格式-掌握"><a href="#07-01-面向对象-构造方法Constructor概述和格式-掌握" class="headerlink" title="07.01_面向对象(构造方法Constructor概述和格式)(掌握)"></a>07.01_面向对象(构造方法Constructor概述和格式)(掌握)</h2><ul><li>A:构造方法概述和作用<ul><li>给对象的数据(属性)进行初始化</li></ul></li><li>B:构造方法格式特点<ul><li>a:方法名与类名相同(大小也要与类名一致)</li><li>b:没有返回值类型，连void都没有</li><li>c:没有具体的返回值return;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1_Constructor</span> </span>&#123;<span class="comment">//Constructor构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();<span class="comment">//在一创建对象的时候,系统就帮我调用了构造方法</span></span><br><span class="line"><span class="comment">//p.Person();//构造方法不能用对象调用</span></span><br><span class="line">p.show();      <span class="comment">//张三...23</span></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();<span class="comment">//再次创建对象</span></span><br><span class="line">p2.show();      <span class="comment">//张三...23</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(&quot;Hello World!&quot;);</span></span><br><span class="line"><span class="comment">//return;//构造方法也是有return语句的,格式是return;</span></span><br><span class="line">name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">age = <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot;...&quot;</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="07-02-面向对象-构造方法的重载及注意事项"><a href="#07-02-面向对象-构造方法的重载及注意事项" class="headerlink" title="07.02_面向对象(构造方法的重载及注意事项)"></a>07.02_面向对象(构造方法的重载及注意事项)</h2><ul><li>A:案例演示<ul><li>构造方法的重载</li><li>重载:方法名相同,与返回值类型无关(构造方法没有返回值),只看参数列表</li></ul></li><li>B:构造方法注意事项<ul><li>a:如果我们没有给出构造方法，系统将自动提供一个无参构造方法。</li><li>b:如果我们给出了构造方法，系统将不再提供默认的无参构造方法。<ul><li>注意：这个时候，如果我们还想使用无参构造方法，就必须自己给出。建议永远自己给出无参构造方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2_Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.show();</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">p2.show();</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>,<span class="number">24</span>);</span><br><span class="line">p3.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;<span class="comment">//空参构造</span></span><br><span class="line">System.out.println(<span class="string">&quot;空参的构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">System.out.println(<span class="string">&quot;有参的构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot;...&quot;</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li>思考题：构造方法，set方法都可以给成员变量赋值，这两种赋值方式有什么区别？     <h3 id="07-03-面向对象-给成员变量赋值的两种方式的区别"><a href="#07-03-面向对象-给成员变量赋值的两种方式的区别" class="headerlink" title="07.03_面向对象(给成员变量赋值的两种方式的区别)"></a>07.03_面向对象(给成员变量赋值的两种方式的区别)</h3></li></ul><ul><li>A:setXxx()方法<ul><li>修改属性值 </li></ul></li><li>B:构造方法<ul><li>给对象中属性进行初始化 </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3_Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line"><span class="comment">//p1 = new Person(&quot;张天一&quot;,23);//这种方式看运行结果貌似是改名了,其实是将原对象变成垃圾</span></span><br><span class="line">System.out.println(p1.getName() + <span class="string">&quot;...&quot;</span> + p1.getAge());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();<span class="comment">//空参构造创建对象</span></span><br><span class="line">p2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">p2.setAge(<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">p2.setName(<span class="string">&quot;李鬼&quot;</span>);</span><br><span class="line">System.out.println(p2.getName() + <span class="string">&quot;...&quot;</span> + p2.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法</span></span><br><span class="line"><span class="comment">给属性进行初始化</span></span><br><span class="line"><span class="comment">setXxx方法</span></span><br><span class="line"><span class="comment">修改属性值</span></span><br><span class="line"><span class="comment">这两种方式,在开发中用setXxx更多一些,因为比较灵活</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;<span class="comment">//空参构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;<span class="comment">//有参构造</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="comment">//设置姓名</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="comment">//获取姓名</span></span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="comment">//设置年龄</span></span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="comment">//获取年龄</span></span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="07-04-面向对象-学生类的代码及测试-掌握"><a href="#07-04-面向对象-学生类的代码及测试-掌握" class="headerlink" title="07.04_面向对象(学生类的代码及测试)(掌握)"></a>07.04_面向对象(学生类的代码及测试)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li>学生类：<ul><li>成员变量：<ul><li>name，age</li></ul></li><li>构造方法：<ul><li>无参，带两个参</li></ul></li><li>成员方法：<ul><li>getXxx()/setXxx()</li><li>show()：输出该类的所有成员变量值</li></ul></li></ul></li></ul></li><li><p>B:给成员变量赋值：</p><ul><li>a:setXxx()方法</li><li>b:构造方法</li></ul></li><li><p>C:输出成员变量值的方式：</p><ul><li>a:通过getXxx()分别获取然后拼接</li><li>b:通过调用show()方法搞定<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo4_Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();<span class="comment">//使用空参构造</span></span><br><span class="line">s1.setName(<span class="string">&quot;张三&quot;</span>);<span class="comment">//设置姓名</span></span><br><span class="line">s1.setAge(<span class="number">23</span>);<span class="comment">//设置年龄</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;我的姓名是:&quot;</span> + s1.getName() + <span class="string">&quot;,我的年龄是:&quot;</span> + s1.getAge());</span><br><span class="line"><span class="comment">//getXxx()获取属性值,可以打印,也可以赋值给其他的变量,做其他的操作</span></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">24</span>);</span><br><span class="line">s2.show();<span class="comment">//只是为了显示属性值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//空参构造</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;<span class="comment">//有参构造</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="comment">//设置姓名</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="comment">//获取姓名</span></span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="comment">//设置年龄</span></span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="comment">//获取年龄</span></span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我的姓名是:&quot;</span> + name +  <span class="string">&quot;,我的年龄是:&quot;</span> +  age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="07-05-面向对象-手机类的代码及测试-掌握"><a href="#07-05-面向对象-手机类的代码及测试-掌握" class="headerlink" title="07.05_面向对象(手机类的代码及测试)(掌握)"></a>07.05_面向对象(手机类的代码及测试)(掌握)</h3><ul><li>A:案例演示<ul><li>模仿学生类，完成手机类代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo5_Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Phone p1 = <span class="keyword">new</span> Phone();</span><br><span class="line">p1.setBrand(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">p1.setPrice(<span class="number">1500</span>);</span><br><span class="line">System.out.println(p1.getBrand() + <span class="string">&quot;...&quot;</span> + p1.getPrice());</span><br><span class="line"></span><br><span class="line">Phone p2 = <span class="keyword">new</span> Phone(<span class="string">&quot;小米&quot;</span>,<span class="number">98</span>);</span><br><span class="line">p2.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">手机类:</span></span><br><span class="line"><span class="comment">成员变量:</span></span><br><span class="line"><span class="comment">品牌brand,价格price</span></span><br><span class="line"><span class="comment">构造方法</span></span><br><span class="line"><span class="comment">无参,有参</span></span><br><span class="line"><span class="comment">成员方法</span></span><br><span class="line"><span class="comment">setXxx和getXxx</span></span><br><span class="line"><span class="comment">show</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String brand;<span class="comment">//品牌</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price;<span class="comment">//价格</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//空参构造</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String brand,<span class="keyword">int</span> price)</span> </span>&#123;<span class="comment">//有参构造</span></span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;<span class="comment">//设置品牌</span></span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;<span class="comment">//获取品牌</span></span><br><span class="line"><span class="keyword">return</span> brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;<span class="comment">//设置价格</span></span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;<span class="comment">//获取价格</span></span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(brand + <span class="string">&quot;...&quot;</span> + price);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="07-06-面向对象-创建一个对象的步骤-掌握"><a href="#07-06-面向对象-创建一个对象的步骤-掌握" class="headerlink" title="07.06_面向对象(创建一个对象的步骤)(掌握)"></a>07.06_面向对象(创建一个对象的步骤)(掌握)</h3></li></ul></li><li>A:画图演示<ul><li>画图说明一个对象的创建过程做了哪些事情?</li><li>Student s = new Student();</li><li>1,Student.class加载进内存</li><li>2,声明一个Student类型引用s</li><li>3,在堆内存创建对象,</li><li>4,给对象中属性默认初始化值</li><li>5,属性进行显示初始化</li><li>6,构造方法进栈,对对象中的属性赋值,构造方法弹栈</li><li>7,将对象的地址值赋值给s<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0706.png"><h3 id="07-07-面向对象-长方形案例练习-掌握"><a href="#07-07-面向对象-长方形案例练习-掌握" class="headerlink" title="07.07_面向对象(长方形案例练习)(掌握)"></a>07.07_面向对象(长方形案例练习)(掌握)</h3></li></ul></li><li>A:案例演示<ul><li>需求：<ul><li>定义一个长方形类,定义 求周长和面积的方法，</li><li>然后定义一个测试类进行测试。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1_Rectangle</span> </span>&#123;<span class="comment">//Rectangle矩形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">System.out.println(r.getLength());<span class="comment">//周长</span></span><br><span class="line">System.out.println(r.getArea());<span class="comment">//面积</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* 需求：</span></span><br><span class="line"><span class="comment">* 定义一个长方形类,定义 求周长和面积的方法，</span></span><br><span class="line"><span class="comment">* 然后定义一个测试类进行测试。</span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">成员变量:</span></span><br><span class="line"><span class="comment">宽width,高high</span></span><br><span class="line"><span class="comment">空参有参构造</span></span><br><span class="line"><span class="comment">成员方法:</span></span><br><span class="line"><span class="comment">setXxx和getXxx</span></span><br><span class="line"><span class="comment">求周长:getLength()</span></span><br><span class="line"><span class="comment">求面积:getArea()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> width;<span class="comment">//宽</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> high;<span class="comment">//高</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//空参构造</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> width,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.width = width;<span class="comment">//有参构造</span></span><br><span class="line"><span class="keyword">this</span>.high = high;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;<span class="comment">//设置宽</span></span><br><span class="line"><span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;<span class="comment">//获取宽</span></span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHigh</span><span class="params">(<span class="keyword">int</span> high)</span> </span>&#123;<span class="comment">//设置高</span></span><br><span class="line"><span class="keyword">this</span>.high = high;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHigh</span><span class="params">()</span> </span>&#123;<span class="comment">//获取高</span></span><br><span class="line"><span class="keyword">return</span> high;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;<span class="comment">//获取周长</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * (width + high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;<span class="comment">//获取面积</span></span><br><span class="line"><span class="keyword">return</span> width * high;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="07-08-面向对象-员工类案例练习-掌握"><a href="#07-08-面向对象-员工类案例练习-掌握" class="headerlink" title="07.08_面向对象(员工类案例练习)(掌握)"></a>07.08_面向对象(员工类案例练习)(掌握)</h3></li></ul></li></ul></li><li>A:案例演示<ul><li>需求：定义一个员工类Employee</li><li>自己分析出几个成员，然后给出成员变量<ul><li>姓名name,工号id,工资salary </li></ul></li><li>构造方法，<ul><li>空参和有参的</li></ul></li><li>getXxx()setXxx()方法，</li><li>以及一个显示所有成员信息的方法。并测试。<ul><li>work <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2_Employee</span> </span>&#123;<span class="comment">//employee员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Employee e = <span class="keyword">new</span> Employee(<span class="string">&quot;令狐冲&quot;</span>,<span class="string">&quot;9527&quot;</span>,<span class="number">20000</span>);</span><br><span class="line">e.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">private</span> String id;<span class="comment">//工号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;<span class="comment">//工资</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;<span class="comment">//空参构造</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String id, <span class="keyword">double</span> salary)</span> </span>&#123;<span class="comment">//有参构造</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="comment">//设置姓名</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="comment">//获取姓名</span></span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;<span class="comment">//设置id</span></span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;<span class="comment">//获取id</span></span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;<span class="comment">//设置工资</span></span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;<span class="comment">//获取工资</span></span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我的姓名是:&quot;</span> + name + <span class="string">&quot;,我的工号是:&quot;</span> + id + <span class="string">&quot;,我的工资是:&quot;</span> + salary </span><br><span class="line">+ <span class="string">&quot;,我的工作内容是敲代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="07-09-面向对象-static关键字及内存图-了解"><a href="#07-09-面向对象-static关键字及内存图-了解" class="headerlink" title="07.09_面向对象(static关键字及内存图)(了解)"></a>07.09_面向对象(static关键字及内存图)(了解)</h3></li></ul></li></ul></li><li>A:案例演示<ul><li>通过一个案例引入static关键字。</li><li>人类：Person。每个人都有国籍，中国。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1_Static</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*Person p1 = new Person();//创建对象</span></span><br><span class="line"><span class="comment">p1.name = &quot;苍老师&quot;;//调用姓名属性并赋值</span></span><br><span class="line"><span class="comment">p1.country = &quot;日本&quot;;//调用国籍属性并赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Person p2 = new Person();</span></span><br><span class="line"><span class="comment">p2.name = &quot;小泽老师&quot;;//调用姓名属性并赋值</span></span><br><span class="line"><span class="comment">//p2.country = &quot;日本&quot;;//调用国籍属性并赋值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">p1.speak();</span></span><br><span class="line"><span class="comment">p2.speak();*/</span></span><br><span class="line"></span><br><span class="line">Person.country = <span class="string">&quot;日本&quot;</span>;<span class="comment">//静态多了一种调用方式,可以通过类名.</span></span><br><span class="line">System.out.println(Person.country);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">static</span> String country;<span class="comment">//国籍</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;<span class="comment">//说话的方法</span></span><br><span class="line">System.out.println(name + <span class="string">&quot;...&quot;</span> + country);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">* B:画图演示</span><br><span class="line">* 带有<span class="keyword">static</span>的内存图</span><br><span class="line">    </span><br><span class="line">![](https:<span class="comment">//mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0709.png)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="07-10-面向对象-static关键字的特点-掌握"><a href="#07-10-面向对象-static关键字的特点-掌握" class="headerlink" title="07.10_面向对象(static关键字的特点)(掌握)"></a>07.10_面向对象(static关键字的特点)(掌握)</h3><ul><li>A:static关键字的特点<ul><li>a:随着类的加载而加载</li><li>b:优先于对象存在</li><li>c:被类的所有对象共享<ul><li>举例：咱们班级的学生应该共用同一个班级编号。</li><li>其实这个特点也是在告诉我们什么时候使用静态?<ul><li>如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的。</li></ul></li><li>举例：<ul><li>饮水机(用静态修饰)</li><li>水杯(不能用静态修饰)</li><li>共性用静态,特性用非静态</li></ul></li></ul></li><li>d:可以通过类名调用<ul><li>其实它本身也可以通过对象名调用。</li><li>推荐使用类名调用。</li><li>静态修饰的内容一般我们称其为：与类相关的，类成员</li></ul></li></ul></li><li>B:案例演示<ul><li>static关键字的特点</li></ul></li></ul><h3 id="07-11-面向对象-static的注意事项-掌握"><a href="#07-11-面向对象-static的注意事项-掌握" class="headerlink" title="07.11_面向对象(static的注意事项)(掌握)"></a>07.11_面向对象(static的注意事项)(掌握)</h3><ul><li>A:static的注意事项<ul><li>a:在静态方法中是没有this关键字的<ul><li>如何理解呢?<ul><li>静态是随着类的加载而加载，this是随着对象的创建而存在。</li><li>静态比对象先存在。</li></ul></li></ul></li><li>b:静态方法只能访问静态的成员变量和静态的成员方法<ul><li>静态方法：<ul><li>成员变量：只能访问静态变量</li><li>成员方法：只能访问静态成员方法</li></ul></li><li>非静态方法：<ul><li>成员变量：可以是静态的，也可以是非静态的</li><li>成员方法：可是是静态的成员方法，也可以是非静态的成员方法。</li></ul></li><li>简单记：<ul><li>静态只能访问静态。</li></ul></li></ul></li></ul></li><li>B:案例演示<ul><li>static的注意事项</li></ul></li></ul><h3 id="07-12-面向对象-静态变量和成员变量的区别-掌握"><a href="#07-12-面向对象-静态变量和成员变量的区别-掌握" class="headerlink" title="07.12_面向对象(静态变量和成员变量的区别)(掌握)"></a>07.12_面向对象(静态变量和成员变量的区别)(掌握)</h3><ul><li>静态变量也叫类变量  成员变量也叫对象变量</li><li>A:所属不同<ul><li>静态变量属于类，所以也称为为类变量</li><li>成员变量属于对象，所以也称为实例变量(对象变量)</li></ul></li><li>B:内存中位置不同<ul><li>静态变量存储于方法区的静态区</li><li>成员变量存储于堆内存</li></ul></li><li>C:内存出现时间不同<ul><li>静态变量随着类的加载而加载，随着类的消失而消失</li><li>成员变量随着对象的创建而存在，随着对象的消失而消失</li></ul></li><li>D:调用不同<ul><li>静态变量可以通过类名调用，也可以通过对象调用</li><li>成员变量只能通过对 象名调用</li></ul></li></ul><h3 id="07-13-面向对象-main方法的格式详细解释-了解"><a href="#07-13-面向对象-main方法的格式详细解释-了解" class="headerlink" title="07.13_面向对象(main方法的格式详细解释)(了解)"></a>07.13_面向对象(main方法的格式详细解释)(了解)</h3><ul><li>A:格式<ul><li>public static void main(String[] args) {}</li></ul></li><li>B:针对格式的解释<ul><li>public 被jvm调用，访问权限足够大。</li><li>static 被jvm调用，不用创建对象，直接类名访问</li><li>void被jvm调用，不需要给jvm返回值</li><li>main 一个通用的名称，虽然不是关键字，但是被jvm识别</li><li>String[] args 以前用于接收键盘录入的</li></ul></li><li>C:演示案例<ul><li>通过args接收键盘例如数据</li></ul></li></ul><h3 id="07-14-面向对象-工具类中使用静态-了解"><a href="#07-14-面向对象-工具类中使用静态-了解" class="headerlink" title="07.14_面向对象(工具类中使用静态)(了解)"></a>07.14_面向对象(工具类中使用静态)(了解)</h3><ul><li>A:制作一个工具类<ul><li>ArrayTool</li><li>1,获取最大值</li><li>2,数组的遍历</li><li>3,数组的反转</li></ul></li></ul><h3 id="07-15-面向对象-说明书的制作过程-了解"><a href="#07-15-面向对象-说明书的制作过程-了解" class="headerlink" title="07.15_面向对象(说明书的制作过程)(了解)"></a>07.15_面向对象(说明书的制作过程)(了解)</h3><ul><li>A:对工具类加入文档注释</li><li>B:通过javadoc命令生成说明书<ul><li>@author(提取作者内容)</li><li>@version(提取版本内容)</li><li>javadoc -d 指定的文件目录 -author -version ArrayTool.java</li><li>@param 参数名称//形式参数的变量名称@return 函数运行完返回的数据</li></ul></li></ul><h3 id="07-16-面向对象-如何使用JDK提供的帮助文档-了解"><a href="#07-16-面向对象-如何使用JDK提供的帮助文档-了解" class="headerlink" title="07.16_面向对象(如何使用JDK提供的帮助文档)(了解)"></a>07.16_面向对象(如何使用JDK提供的帮助文档)(了解)</h3><ul><li>A:找到文档，打开文档</li><li>B:点击显示，找到索引，出现输入框</li><li>C:你应该知道你找谁?举例：Scanner</li><li>D:看这个类的结构(需不需要导包)<ul><li>成员变量    字段</li><li>构造方法    构造方法</li><li>成员方法    方法</li></ul></li></ul><h3 id="07-17-面向对象-学习Math类的随机数功能-了解"><a href="#07-17-面向对象-学习Math类的随机数功能-了解" class="headerlink" title="07.17_面向对象(学习Math类的随机数功能)(了解)"></a>07.17_面向对象(学习Math类的随机数功能)(了解)</h3><ul><li>打开JDK提供的帮助文档学习</li><li>A:Math类概述<ul><li>类包含用于执行基本数学运算的方法</li></ul></li><li>B:Math类特点<ul><li>由于Math类在java.lang包下，所以不需要导包。</li><li>因为它的成员全部是静态的,所以私有了构造方法</li></ul></li><li>C:获取随机数的方法<ul><li>public static double random():返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。</li></ul></li><li>D:我要获取一个1-100之间的随机数，肿么办?<ul><li>int number = (int)(Math.random()*100)+1;</li></ul></li></ul><h3 id="07-18-面向对象-猜数字小游戏案例-了解"><a href="#07-18-面向对象-猜数字小游戏案例-了解" class="headerlink" title="07.18_面向对象(猜数字小游戏案例)(了解)"></a>07.18_面向对象(猜数字小游戏案例)(了解)</h3><ul><li>A:案例演示<ul><li>需求：猜数字小游戏(数据在1-100之间)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础06-二维数组</title>
      <link href="/2020/05/22/Java%E5%9F%BA%E7%A1%8006-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2020/05/22/Java%E5%9F%BA%E7%A1%8006-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="Demo1-Array"><a href="#Demo1-Array" class="headerlink" title="Demo1_Array"></a>Demo1_Array</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:二维数组概述</span></span><br><span class="line"><span class="comment">* B:二维数组格式1</span></span><br><span class="line"><span class="comment">* int[][] arr = new int[3][2]; </span></span><br><span class="line"><span class="comment">* C:二维数组格式1的解释</span></span><br><span class="line"><span class="comment">* D:注意事项</span></span><br><span class="line"><span class="comment">* a:以下格式也可以表示二维数组</span></span><br><span class="line"><span class="comment">* 1:数据类型 数组名[][] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment">* 2:数据类型[] 数组名[] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment">* B:注意下面定义的区别</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">int x;</span></span><br><span class="line"><span class="comment">int y;</span></span><br><span class="line"><span class="comment">int x,y;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int[] x;</span></span><br><span class="line"><span class="comment">int[] y[];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int[] x,y[];x是一维数组,y是二维数组</span></span><br><span class="line"><span class="comment">* E:案例演示</span></span><br><span class="line"><span class="comment">* 定义二维数组，输出二维数组名称，一维数组名称，一个元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一个二维数组</span></span><br><span class="line"><span class="comment">这个二维数组中有3个一维数组</span></span><br><span class="line"><span class="comment">每个一维数组中有2个元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[[I@7852e922//二维数组的地址值</span></span><br><span class="line"><span class="comment">[I@4e25154f//一维数组的地址值</span></span><br><span class="line"><span class="comment">0//元素值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(arr);<span class="comment">//二维数组</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">//二维数组中的第一个一维数组</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//二维数组中的第一个一维数组的第一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Demo2-Array"><a href="#Demo2-Array" class="headerlink" title="Demo2_Array"></a>Demo2_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:画图演示</span></span><br><span class="line"><span class="comment">* 画图讲解上面的二维数组名称，一维数组名称，一个元素的值的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">System.out.println(arr);<span class="comment">//打印二维数组</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">//打印二维数组中的第一个一维数组</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//打印二维数组中的第一个一维数组中的第一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE1.png"></p><h4 id="Demo3-Array"><a href="#Demo3-Array" class="headerlink" title="Demo3_Array"></a>Demo3_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:二维数组格式2</span></span><br><span class="line"><span class="comment">* int[][] arr = new int[3][]; </span></span><br><span class="line"><span class="comment">* B:二维数组格式2的解释</span></span><br><span class="line"><span class="comment">* C:案例演示</span></span><br><span class="line"><span class="comment">* 讲解格式，输出数据，并画内存图</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];<span class="comment">//这是一个二维数组,这个二维数组中有三个一维数组,三个一维数组都没有被赋值</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);    <span class="comment">// null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);    <span class="comment">// null</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);    <span class="comment">// null</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//第一个一维数组中可以存储三个int值</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//第二个一维数组中可以存储五个int值</span></span><br><span class="line">System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);     <span class="comment">//[I@7852e922</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);     <span class="comment">//[I@4e25154f</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);     <span class="comment">//null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE2.png"></p><h4 id="Demo4-Array"><a href="#Demo4-Array" class="headerlink" title="Demo4_Array"></a>Demo4_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:二维数组格式3</span></span><br><span class="line"><span class="comment">* int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8,9&#125;&#125;; </span></span><br><span class="line"><span class="comment">* B:二维数组格式3的解释</span></span><br><span class="line"><span class="comment">* C:案例演示</span></span><br><span class="line"><span class="comment">* 讲解格式，输出数据，并画内存图</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo4_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;; <span class="comment">//这是一个二维数组,这个二维数组中每个大括号都代表一个一维数组</span></span><br><span class="line">System.out.println(arr);<span class="comment">//[[I@19bb25a,二维数组的地址值</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">//[I@da6bf4,一维数组的地址值</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//1,一维数组中的元素值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE3.png"></p><h4 id="Test1-Array"><a href="#Test1-Array" class="headerlink" title="Test1_Array"></a>Test1_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* 需求：二维数组遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 外循环控制的是二维数组的长度，其实就是一维数组的个数。</span></span><br><span class="line"><span class="comment">* 内循环控制的是一维数组的长度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ;i++ ) &#123;<span class="comment">//获取到每个二维数组中的一维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length ;j++ ) &#123;<span class="comment">//获取每个一维数组中的元素</span></span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Test2-Array"><a href="#Test2-Array" class="headerlink" title="Test2_Array"></a>Test2_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">需求：公司年销售额求和</span></span><br><span class="line"><span class="comment">某公司按照季度和月份统计的数据如下：单位(万元)</span></span><br><span class="line"><span class="comment">第一季度：22,66,44</span></span><br><span class="line"><span class="comment">第二季度：77,33,88</span></span><br><span class="line"><span class="comment">第三季度：25,45,65</span></span><br><span class="line"><span class="comment">第四季度：11,66,99</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">22</span>,<span class="number">66</span>,<span class="number">44</span>&#125;,&#123;<span class="number">77</span>,<span class="number">33</span>,<span class="number">88</span>&#125;,&#123;<span class="number">25</span>,<span class="number">45</span>,<span class="number">65</span>&#125;,&#123;<span class="number">11</span>,<span class="number">66</span>,<span class="number">99</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//定义变量,记录每次相加的结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ;i++ ) &#123;<span class="comment">//获取每一个一维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length ;j++ ) &#123;<span class="comment">//获取每一个一维数组中的元素</span></span><br><span class="line">sum = sum + arr[i][j];<span class="comment">//累加</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Test3-Array"><a href="#Test3-Array" class="headerlink" title="Test3_Array"></a>Test3_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本数据类型的值传递,不改变原值,因为调用后就会弹栈,局部变量随之消失</span></span><br><span class="line"><span class="comment">引用数据类型的值传递,改变原值,因为即使方法弹栈,但是堆内存数组对象还在,可以通过地址继续访问</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Java中到底是传值还是传址</span></span><br><span class="line"><span class="comment">1,既是传值,也是传地址,基本数据类型传递的值,引用数据类型传递的地址</span></span><br><span class="line"><span class="comment">2,java中只有传值,因为地址值也是值(出去面试都说这种,支持者是高司令(java之父))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*int a = 10;</span></span><br><span class="line"><span class="comment">int b = 20;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);//a = 10,b = 20</span></span><br><span class="line"><span class="comment">change(a,b);</span></span><br><span class="line"><span class="comment">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);//?*/</span>a = <span class="number">10</span>,b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">change(arr);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//a = 10, b= 20</span></span><br><span class="line">System.out.println(<span class="string">&quot;a:&quot;</span>+a+<span class="string">&quot;,b:&quot;</span>+b);<span class="comment">//a = 10,b = 20</span></span><br><span class="line">a = b;<span class="comment">//a = 20</span></span><br><span class="line">b = a + b;<span class="comment">//b = 40</span></span><br><span class="line">System.out.println(<span class="string">&quot;a:&quot;</span>+a+<span class="string">&quot;,b:&quot;</span>+b);<span class="comment">//a = 20, b = 40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;<span class="comment">//1,4,3,8,5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[x]%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">arr[x]*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92.png"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础05-一维数组</title>
      <link href="/2020/05/22/Java%E5%9F%BA%E7%A1%8005-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2020/05/22/Java%E5%9F%BA%E7%A1%8005-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><blockquote><p>主要以代码的形式分析</p></blockquote><h4 id="Demo1-Array"><a href="#Demo1-Array" class="headerlink" title="Demo1_Array"></a>Demo1_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:为什么要有数组(容器)</span></span><br><span class="line"><span class="comment">* 为了存储同种数据类型的多个值</span></span><br><span class="line"><span class="comment">* B:数组概念</span></span><br><span class="line"><span class="comment">* 数组是存储同一种数据类型多个元素的集合。也可以看成是一个容器。</span></span><br><span class="line"><span class="comment">* 数组既可以存储基本数据类型，也可以存储引用数据类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* C:数组定义格式</span></span><br><span class="line"><span class="comment">数据类型[] 数组名 = new 数据类型[数组的长度];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;x = &quot;</span> + x);  <span class="comment">//x = 20</span></span><br><span class="line"><span class="comment">//数据类型[] 数组名 = new 数据类型[数组的长度];</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//可以存储五个int类型的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左边:</span></span><br><span class="line"><span class="comment">int:数据类型</span></span><br><span class="line"><span class="comment">[]:代表的数组,几个中括号就代表几维数组</span></span><br><span class="line"><span class="comment">arr:合法的标识符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">右边:</span></span><br><span class="line"><span class="comment">new:创建新的实体或对象</span></span><br><span class="line"><span class="comment">int:数据类型</span></span><br><span class="line"><span class="comment">[]:代表的数组</span></span><br><span class="line"><span class="comment">5:代表数组的长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Demo2-Array"><a href="#Demo2-Array" class="headerlink" title="Demo2_Array"></a>Demo2_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:什么是数组的初始化</span></span><br><span class="line"><span class="comment">* 就是为数组开辟连续的内存空间，并为每个数组元素赋予值 </span></span><br><span class="line"><span class="comment">* B:如何对数组进行初始化</span></span><br><span class="line"><span class="comment">* a:动态初始化 只指定长度，由系统给出初始化值</span></span><br><span class="line"><span class="comment">* int[] arr = new int[5]; </span></span><br><span class="line"><span class="comment">* b:静态初始化 给出初始化值，由系统决定长度</span></span><br><span class="line"><span class="comment">* C:动态初始化的格式：</span></span><br><span class="line"><span class="comment">* 数据类型[] 数组名 = new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment">* D:案例演示</span></span><br><span class="line"><span class="comment">* 输出数组名称和数组元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">整数类型:byte,short,int,long默认初始化值都是0</span></span><br><span class="line"><span class="comment">浮点类型:float,double默认初始化值都是0.0</span></span><br><span class="line"><span class="comment">布尔类型:boolean默认初始化值false</span></span><br><span class="line"><span class="comment">字符类型:char默认初始化值&#x27;\u0000&#x27;</span></span><br><span class="line"><span class="comment">char在内存中占的两个字节,是16个二进制位</span></span><br><span class="line"><span class="comment">\u0000,每一个0其实代表的是16进制的0,那么四个0就是代表16个二进制位</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[I@19bb25a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[代表是数组,几个就代表几维</span></span><br><span class="line"><span class="comment">I代表是int类型</span></span><br><span class="line"><span class="comment">@是固定的</span></span><br><span class="line"><span class="comment">19bb25a代表的是数组的地址值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//数据类型[] 数组名 = new 数据类型[数组长度];</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//动态初始化,在内存中开辟连续的5块空间</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">//系统给出默认初始化值,整数类型的都是0</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">System.out.println(arr);<span class="comment">//[I@19bb25a</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Demo3-Array"><a href="#Demo3-Array" class="headerlink" title="Demo3_Array"></a>Demo3_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:栈(掌握)</span></span><br><span class="line"><span class="comment">* 存储局部变量 </span></span><br><span class="line"><span class="comment">局部变量:定义在方法声明上和方法中的变量</span></span><br><span class="line"><span class="comment">* B:堆(掌握)</span></span><br><span class="line"><span class="comment">* 存储new出来的数组或对象 </span></span><br><span class="line"><span class="comment">* C:方法区</span></span><br><span class="line"><span class="comment">* 面向对象部分讲解 </span></span><br><span class="line"><span class="comment">* D:本地方法区</span></span><br><span class="line"><span class="comment">* 和系统相关 </span></span><br><span class="line"><span class="comment">* E:寄存器</span></span><br><span class="line"><span class="comment">* 给CPU使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//动态初始化,创建3块连续的空间</span></span><br><span class="line">System.out.println(arr);    <span class="comment">//[I@7852e922  一维数组的地址值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);     <span class="comment">//10</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);     <span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE.png"></p><h4 id="ArrayDemo01"><a href="#ArrayDemo01" class="headerlink" title="ArrayDemo01"></a>ArrayDemo01</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个数组,静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">25</span>,<span class="number">10</span>,<span class="number">15</span>&#125;;</span><br><span class="line"><span class="comment">//数组遍历: 遍历是什么意思? 把数组中的每个元素一个个拿出来看一下</span></span><br><span class="line"><span class="comment">//System.out.println(arr[0]);</span></span><br><span class="line"><span class="comment">//arr.length 属性:数组名.length</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ;i++ )&#123;  <span class="comment">//数组中有多少个元素,我就帮你一个个打印出来 //细节 别写=号</span></span><br><span class="line">System.out.println(arr[i]); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo4_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//创建数组,长度为3</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//创建数组,长度为3</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr1);<span class="comment">//[I@7852e922//打印数组的地址值</span></span><br><span class="line">System.out.println(arr2);   <span class="comment">//  [I@4e25154f</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">10</span>;<span class="comment">//给第一个数组中第一个元素赋值</span></span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">20</span>;<span class="comment">//给第二个数组中第二个元素赋值</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]);    <span class="number">10</span></span><br><span class="line">System.out.println(arr1[<span class="number">1</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(arr1[<span class="number">2</span>]);    <span class="number">0</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>]);    <span class="number">20</span></span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]);    <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE.png"></p><h4 id="Demo5-Array"><a href="#Demo5-Array" class="headerlink" title="Demo5_Array"></a>Demo5_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三个引用两个数组</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo5_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr3 = arr2;</span><br><span class="line"></span><br><span class="line">System.out.println(arr1);   <span class="comment">//[I@7852e922</span></span><br><span class="line">System.out.println(arr2);   <span class="comment">//[I@4e25154f</span></span><br><span class="line">System.out.println(arr3);   <span class="comment">//[I@70dea4e</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr1[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">30</span>;</span><br><span class="line">arr3[<span class="number">1</span>] = <span class="number">40</span>;</span><br><span class="line">arr3[<span class="number">2</span>] = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]);    <span class="number">10</span></span><br><span class="line">System.out.println(arr1[<span class="number">1</span>]);    <span class="number">20</span></span><br><span class="line">System.out.println(arr1[<span class="number">2</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>]);    <span class="number">40</span></span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]);    <span class="number">50</span></span><br><span class="line">System.out.println(arr2[<span class="number">3</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(arr2[<span class="number">4</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(arr3[<span class="number">1</span>]);    <span class="number">40</span></span><br><span class="line">System.out.println(arr3[<span class="number">2</span>]);    <span class="number">50</span></span><br><span class="line">System.out.println(arr3[<span class="number">3</span>]);    <span class="number">0</span></span><br><span class="line">System.out.println(arr3[<span class="number">4</span>]);    <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/%E4%B8%89%E4%B8%AA%E5%BC%95%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84.png"></p><h4 id="Demo6-Array"><a href="#Demo6-Array" class="headerlink" title="Demo6_Array"></a>Demo6_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:静态初始化的格式：</span></span><br><span class="line"><span class="comment">* 格式：数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,…&#125;;</span></span><br><span class="line"><span class="comment">* 简化格式：</span></span><br><span class="line"><span class="comment">* 数据类型[] 数组名 = &#123;元素1,元素2,…&#125;;</span></span><br><span class="line"><span class="comment">* B:案例演示</span></span><br><span class="line"><span class="comment">* 对数组的解释</span></span><br><span class="line"><span class="comment">* 输出数组名称和数组元素</span></span><br><span class="line"><span class="comment">* C:画图演示</span></span><br><span class="line"><span class="comment">* 一个数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo6_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,…&#125;;</span></span><br><span class="line"><span class="comment">//int[] arr = new int[5]&#123;11,22,33,44,55&#125;;//不允许动静结合</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;<span class="comment">//静态初始化的简写形式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int[] arr;//声明数组引用</span></span><br><span class="line"><span class="comment">//arr = new int[]&#123;11,22,33,44,55&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int[] arr2;</span></span><br><span class="line"><span class="comment">//arr2 = &#123;11,22,33,44,55&#125;;//简写形式声明和赋值在同一行</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr2);</span><br><span class="line">System.out.println(arr2[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96.png"></p><h4 id="Demo7-Exception"><a href="#Demo7-Exception" class="headerlink" title="Demo7_Exception"></a>Demo7_Exception</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* a:ArrayIndexOutOfBoundsException:数组索引越界异常</span></span><br><span class="line"><span class="comment">* 原因：你访问了不存在的索引。</span></span><br><span class="line"><span class="comment">* b:NullPointerException:空指针异常</span></span><br><span class="line"><span class="comment">* 原因：数组已经不在指向堆内存了。而你还用数组名去访问元素。</span></span><br><span class="line"><span class="comment">* int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">* arr = null;</span></span><br><span class="line"><span class="comment">* System.out.println(arr[0]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo7_Exception</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//0x0011</span></span><br><span class="line"><span class="comment">//System.out.println(arr[-1]);//当访问数组中不存在的索引,会出现索引越界异常</span></span><br><span class="line"></span><br><span class="line">arr = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">//当数组引用赋值为null,再去调用数组中的元素就会出现空指针异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Demo8-Array"><a href="#Demo8-Array" class="headerlink" title="Demo8_Array"></a>Demo8_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* 数组遍历：就是依次输出数组中的每一个元素。</span></span><br><span class="line"><span class="comment">* 数组的属性:arr.length数组的长度</span></span><br><span class="line"><span class="comment">* 数组的最大索引:arr.length - 1;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo8_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*System.out.println(arr[0]);</span></span><br><span class="line"><span class="comment">System.out.println(arr[1]);</span></span><br><span class="line"><span class="comment">System.out.println(arr[2]);</span></span><br><span class="line"><span class="comment">System.out.println(arr[3]);</span></span><br><span class="line"><span class="comment">System.out.println(arr[4]);*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span> ;i++ ) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"><span class="comment">//arr.length 代表的是数组的长度</span></span><br><span class="line">System.out.println(arr.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ;i++ ) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">print(arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的遍历</span></span><br><span class="line"><span class="comment">1,返回值类型void</span></span><br><span class="line"><span class="comment">2,参数列表int[] arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ;i++ ) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Demo9-Array"><a href="#Demo9-Array" class="headerlink" title="Demo9_Array"></a>Demo9_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* 数组获取最值(获取数组中的最大值最小值)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo9_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">33</span>,<span class="number">77</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> max = getMax(arr);</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取数组中最大值</span></span><br><span class="line"><span class="comment">1,返回值类型int</span></span><br><span class="line"><span class="comment">2,参数列表int[] arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; arr.length ;i++ ) &#123;<span class="comment">//从数组的第二个元素开始遍历</span></span><br><span class="line"><span class="keyword">if</span> (max &lt; arr[i]) &#123;<span class="comment">//如果max记录的值小于的数组中的元素</span></span><br><span class="line">max = arr[i];<span class="comment">//max记录住较大的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Demo10-Array"><a href="#Demo10-Array" class="headerlink" title="Demo10_Array"></a>Demo10_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* 数组元素反转(就是把元素对调)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo10_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">reverseArray(arr);</span><br><span class="line">print(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组元素反转</span></span><br><span class="line"><span class="comment">1,明确返回值类型void</span></span><br><span class="line"><span class="comment">2,明确参数列表int[] arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length / <span class="number">2</span> ; i++) &#123;</span><br><span class="line"><span class="comment">//arr[0]和arr[arr.length-1-0]交换</span></span><br><span class="line"><span class="comment">//arr[1]和arr[arr.length-1-1]交换</span></span><br><span class="line"><span class="comment">//arr[2]和arr[arr.lentth-1-2]</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">arr[arr.length-<span class="number">1</span>-i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组遍历</span></span><br><span class="line"><span class="comment">1,明确返回值类型void</span></span><br><span class="line"><span class="comment">2,明确参数列表int[] arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ;i++ ) &#123;<span class="comment">//遍历数组中的每一个元素</span></span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);<span class="comment">//打印在控制台</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Demo11-Array"><a href="#Demo11-Array" class="headerlink" title="Demo11_Array"></a>Demo11_Array</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* 数组查表法(根据键盘录入索引,查找对应星期)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo11_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入对应的星期范围在1-7&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;星期&quot;</span> + getWeek(week));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据索引返回对应的星期</span></span><br><span class="line"><span class="comment">1,返回值类型char</span></span><br><span class="line"><span class="comment">2,参数列表int week</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">getWeek</span><span class="params">(<span class="keyword">int</span> week)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] arr = &#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;一&#x27;</span>,<span class="string">&#x27;二&#x27;</span>,<span class="string">&#x27;三&#x27;</span>,<span class="string">&#x27;四&#x27;</span>,<span class="string">&#x27;五&#x27;</span>,<span class="string">&#x27;六&#x27;</span>,<span class="string">&#x27;日&#x27;</span>&#125;;<span class="comment">//定义了一张星期表</span></span><br><span class="line"><span class="keyword">return</span> arr[week];<span class="comment">//通过索引获取表中的元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ArrayDemo02"><a href="#ArrayDemo02" class="headerlink" title="ArrayDemo02"></a>ArrayDemo02</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A:案例演示</span></span><br><span class="line"><span class="comment">* 数组元素查找(查找指定元素第一次在数组中出现的索引)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo12_Array</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index = getIndex(arr,<span class="number">88</span>);</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查找元素索引</span></span><br><span class="line"><span class="comment">1,返回值类型int</span></span><br><span class="line"><span class="comment">2,明确参数列表,int[] arr,int value</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ;i++ ) &#123;<span class="comment">//数组的遍历</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] == value) &#123;<span class="comment">//如果数组中的元素与查找的元素匹配</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法02-栈堆-队列</title>
      <link href="/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9502-%E6%A0%88%E5%A0%86-%E9%98%9F%E5%88%97/"/>
      <url>/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9502-%E6%A0%88%E5%A0%86-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><ul><li>2.1 线性表及其实现<blockquote><p> 方法1：顺序存储结构直接表示<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E9%A1%B9%E5%BC%8F.png"></p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="keyword">int</span> Position;</span><br><span class="line">typedef struct LNode *List;</span><br><span class="line">struct LNode &#123;</span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List L;</span><br><span class="line"> </span><br><span class="line">    L = (List)malloc(sizeof(struct LNode));</span><br><span class="line">    L-&gt;Last = -<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 查找 */</span></span><br><span class="line">#define ERROR -1</span><br><span class="line"> </span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">( List L, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position i = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>( i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i]!= X )</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; L-&gt;Last )  <span class="keyword">return</span> ERROR; <span class="comment">/* 如果没找到，返回错误信息 */</span></span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> i;  <span class="comment">/* 找到后返回的是存储位置 */</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/* 插入 */</span></span><br><span class="line"><span class="comment">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span></span><br><span class="line"><span class="function">bool <span class="title">Insert</span><span class="params">( List L, ElementType X, Position P )</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 在L的指定位置P前插入一个新元素X */</span></span><br><span class="line">    Position i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ( L-&gt;Last == MAXSIZE-<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 表空间已满，不能插入 */</span></span><br><span class="line">        printf(<span class="string">&quot;表满&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> ( P&lt;<span class="number">0</span> || P&gt;L-&gt;Last+<span class="number">1</span> ) &#123; <span class="comment">/* 检查插入位置的合法性 */</span></span><br><span class="line">        printf(<span class="string">&quot;位置不合法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span>( i=L-&gt;Last; i&gt;=P; i-- )</span><br><span class="line">        L-&gt;Data[i+<span class="number">1</span>] = L-&gt;Data[i]; <span class="comment">/* 将位置P及以后的元素顺序向后移动 */</span></span><br><span class="line">    L-&gt;Data[P] = X;  <span class="comment">/* 新元素插入 */</span></span><br><span class="line">    L-&gt;Last++;       <span class="comment">/* Last仍指向最后元素 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">/* 删除 */</span></span><br><span class="line"><span class="comment">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span></span><br><span class="line"><span class="function">bool <span class="title">Delete</span><span class="params">( List L, Position P )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 从L中删除指定位置P的元素 */</span></span><br><span class="line">    Position i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>( P&lt;<span class="number">0</span> || P&gt;L-&gt;Last ) &#123; <span class="comment">/* 检查空表及删除位置的合法性 */</span></span><br><span class="line">        printf(<span class="string">&quot;位置%d不存在元素&quot;</span>, P ); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( i=P+<span class="number">1</span>; i&lt;=L-&gt;Last; i++ )</span><br><span class="line">        L-&gt;Data[i-<span class="number">1</span>] = L-&gt;Data[i]; <span class="comment">/* 将位置P+1及以后的元素顺序向前移动 */</span></span><br><span class="line">    L-&gt;Last--; <span class="comment">/* Last仍指向最后元素 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">typedef struct LNode *PtrToLNode;</span><br><span class="line">struct LNode &#123;</span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToLNode Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToLNode Position;</span><br><span class="line">typedef PtrToLNode List;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 查找 */</span></span><br><span class="line">#define ERROR NULL</span><br><span class="line"> </span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">( List L, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position p = L; <span class="comment">/* p指向L的第1个结点 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> ( p &amp;&amp; p-&gt;Data!=X )</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 下列语句可以用 return p; 替换 */</span></span><br><span class="line">    <span class="keyword">if</span> ( p )</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 带头结点的插入 */</span></span><br><span class="line"><span class="comment">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是链表结点指针，在P之前插入新结点 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">bool <span class="title">Insert</span><span class="params">( List L, ElementType X, Position P )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 这里默认L有头结点 */</span></span><br><span class="line">    Position tmp, pre;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 查找P的前一个结点 */</span>        </span><br><span class="line">    <span class="keyword">for</span> ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            </span><br><span class="line">    <span class="keyword">if</span> ( pre==NULL ) &#123; <span class="comment">/* P所指的结点不在L中 */</span></span><br><span class="line">        printf(<span class="string">&quot;插入位置参数错误\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">/* 找到了P的前一个结点pre */</span></span><br><span class="line">        <span class="comment">/* 在P前插入新结点 */</span></span><br><span class="line">        tmp = (Position)malloc(sizeof(struct LNode)); <span class="comment">/* 申请、填装结点 */</span></span><br><span class="line">        tmp-&gt;Data = X; </span><br><span class="line">        tmp-&gt;Next = P;</span><br><span class="line">        pre-&gt;Next = tmp;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 带头结点的删除 */</span></span><br><span class="line"><span class="comment">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是拟删除结点指针 */</span></span><br><span class="line"><span class="function">bool <span class="title">Delete</span><span class="params">( List L, Position P )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 这里默认L有头结点 */</span></span><br><span class="line">    Position tmp, pre;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 查找P的前一个结点 */</span>        </span><br><span class="line">    <span class="keyword">for</span> ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            </span><br><span class="line">    <span class="keyword">if</span> ( pre==NULL || P==NULL) &#123; <span class="comment">/* P所指的结点不在L中 */</span></span><br><span class="line">        printf(<span class="string">&quot;删除位置参数错误\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">/* 找到了P的前一个结点pre */</span></span><br><span class="line">        <span class="comment">/* 将P位置的结点删除 */</span></span><br><span class="line">        pre-&gt;Next = P-&gt;Next;</span><br><span class="line">        free(P);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-堆栈"><a href="#2-2-堆栈" class="headerlink" title="2.2 堆栈"></a>2.2 堆栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="keyword">int</span> Position;</span><br><span class="line">struct SNode &#123;</span><br><span class="line">    ElementType *Data; <span class="comment">/* 存储元素的数组 */</span></span><br><span class="line">    Position Top;      <span class="comment">/* 栈顶指针 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;       <span class="comment">/* 堆栈最大容量 */</span></span><br><span class="line">&#125;;</span><br><span class="line">typedef struct SNode *Stack;</span><br><span class="line"> </span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">( <span class="keyword">int</span> MaxSize )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S = (Stack)malloc(sizeof(struct SNode));</span><br><span class="line">    S-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));</span><br><span class="line">    S-&gt;Top = -<span class="number">1</span>;</span><br><span class="line">    S-&gt;MaxSize = MaxSize;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">IsFull</span><span class="params">( Stack S )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S-&gt;Top == S-&gt;MaxSize-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">Push</span><span class="params">( Stack S, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( IsFull(S) ) &#123;</span><br><span class="line">        printf(<span class="string">&quot;堆栈满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        S-&gt;Data[++(S-&gt;Top)] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">IsEmpty</span><span class="params">( Stack S )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S-&gt;Top == -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Stack S )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( IsEmpty(S) ) &#123;</span><br><span class="line">        printf(<span class="string">&quot;堆栈空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR; <span class="comment">/* ERROR是ElementType的特殊值，标志错误 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> ( S-&gt;Data[(S-&gt;Top)--] );</span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line">--- </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">typedef struct SNode *PtrToSNode;</span><br><span class="line">struct SNode &#123;</span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToSNode Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToSNode Stack;</span><br><span class="line"> </span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">( )</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 构建一个堆栈的头结点，返回该结点指针 */</span></span><br><span class="line">    Stack S;</span><br><span class="line"> </span><br><span class="line">    S = (Stack)malloc(sizeof(struct SNode));</span><br><span class="line">    S-&gt;Next = NULL;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">IsEmpty</span> <span class="params">( Stack S )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 判断堆栈S是否为空，若是返回true；否则返回false */</span></span><br><span class="line">    <span class="keyword">return</span> ( S-&gt;Next == NULL );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">Push</span><span class="params">( Stack S, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 将元素X压入堆栈S */</span></span><br><span class="line">    PtrToSNode TmpCell;</span><br><span class="line"> </span><br><span class="line">    TmpCell = (PtrToSNode)malloc(sizeof(struct SNode));</span><br><span class="line">    TmpCell-&gt;Data = X;</span><br><span class="line">    TmpCell-&gt;Next = S-&gt;Next;</span><br><span class="line">    S-&gt;Next = TmpCell;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Stack S )</span>  </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 删除并返回堆栈S的栈顶元素 */</span></span><br><span class="line">    PtrToSNode FirstCell;</span><br><span class="line">    ElementType TopElem;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>( IsEmpty(S) ) &#123;</span><br><span class="line">        printf(<span class="string">&quot;堆栈空&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        FirstCell = S-&gt;Next; </span><br><span class="line">        TopElem = FirstCell-&gt;Data;</span><br><span class="line">        S-&gt;Next = FirstCell-&gt;Next;</span><br><span class="line">        free(FirstCell);</span><br><span class="line">        <span class="keyword">return</span> TopElem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>还有一种表达式叫“前缀表达式”，即运算符号位于运算数之前,比如a+b<em>c的前缀表达式是+a</em>bc。<br>你能写出a+b*c-d/e的前缀表达式吗？</p><p>答：-+a*bc/de</p><blockquote><p>中缀：a + b , 前缀：+ ab ,后缀： ab+</p></blockquote><p>中缀：(a+b)<em>c+d-(e+g)<em>h ,转前缀：-+</em>+abcd</em>+egh ,转后缀：<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.jpg"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.jpg"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.2%E5%A0%86%E6%A0%88/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.2%E5%A0%86%E6%A0%88/%E4%B8%AD%E8%BD%AC%E5%90%8E.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.2%E5%A0%86%E6%A0%88/%E6%A1%88%E4%BE%8B.png"></p><h3 id="2-3-队列"><a href="#2-3-队列" class="headerlink" title="2.3 队列"></a>2.3 队列</h3><h3 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><blockquote><p>队列(Queue)：具有一定操作约束的线性表</p></blockquote><ul><li>插入和删除操作：只能在一端插入，而在另一端删除。 </li><li>数据插入：入队列（AddQ）</li><li>数据删除：出队列（DeleteQ）</li><li>先来先服务</li><li>先进先出：FIFO<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.3%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%971.png"></li></ul><h3 id="队列的顺序存储实现"><a href="#队列的顺序存储实现" class="headerlink" title="队列的顺序存储实现"></a>队列的顺序存储实现</h3><blockquote><p>队列的顺序存储结构通常由<strong>一个一维数组</strong>和<strong>一个记录队列头元素位置的变量front</strong>以及一个记录队列尾元素位置的变量rear组成。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define MaxSize &lt;储存数据元素的最大个数&gt;</span><br><span class="line">struct QNode &#123;</span><br><span class="line">ElementType Data[ MaxSize ];</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct QNode *Queue;</span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.3%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%972.png"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.3%E9%98%9F%E5%88%97/%E9%A1%BA%E7%8E%AF%E9%98%9F%E5%88%97.png" alt="顺环队列"></p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.3%E9%98%9F%E5%88%97/%E5%85%A5%E9%98%9F%E5%88%97.png" alt="入队列"></p><h3 id="队列的链式存储实现"><a href="#队列的链式存储实现" class="headerlink" title="队列的链式存储实现"></a>队列的链式存储实现</h3><blockquote><p>队列的链式存储结构也可以用一个单链表实现。插入和删除操作分别在链表的两头进行；<em>队列指针front和rear应该分别指向链表的哪一头？</em></p></blockquote><ul><li><p>例题：<br>现采用大小为10的数组实现一个循环队列。设在某一时刻，队列为空且此时front和rear值均为5。经过若干操作后，front为8，rear为2，问：此时队列中有多少个元素？ 4个<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.3%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%974.png"></p><blockquote><p>队列代码详情</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="keyword">int</span> Position;</span><br><span class="line">struct QNode &#123;</span><br><span class="line">    ElementType *Data;     <span class="comment">/* 存储元素的数组 */</span></span><br><span class="line">    Position Front, Rear;  <span class="comment">/* 队列的头、尾指针 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;           <span class="comment">/* 队列最大容量 */</span></span><br><span class="line">&#125;;</span><br><span class="line">typedef struct QNode *Queue;</span><br><span class="line"> </span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">( <span class="keyword">int</span> MaxSize )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue Q = (Queue)malloc(sizeof(struct QNode));</span><br><span class="line">    Q-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));</span><br><span class="line">    Q-&gt;Front = Q-&gt;Rear = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;MaxSize = MaxSize;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">IsFull</span><span class="params">( Queue Q )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((Q-&gt;Rear+<span class="number">1</span>)%Q-&gt;MaxSize == Q-&gt;Front);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">AddQ</span><span class="params">( Queue Q, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( IsFull(Q) ) &#123;</span><br><span class="line">        printf(<span class="string">&quot;队列满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Q-&gt;Rear = (Q-&gt;Rear+<span class="number">1</span>)%Q-&gt;MaxSize;</span><br><span class="line">        Q-&gt;Data[Q-&gt;Rear] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">IsEmpty</span><span class="params">( Queue Q )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;Front == Q-&gt;Rear);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">( Queue Q )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( IsEmpty(Q) ) &#123; </span><br><span class="line">        printf(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  &#123;</span><br><span class="line">        Q-&gt;Front =(Q-&gt;Front+<span class="number">1</span>)%Q-&gt;MaxSize;</span><br><span class="line">        <span class="keyword">return</span>  Q-&gt;Data[Q-&gt;Front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Node *PtrToNode;</span><br><span class="line">struct Node &#123; <span class="comment">/* 队列中的结点 */</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode Next;</span><br><span class="line">&#125;;</span><br><span class="line">typedef PtrToNode Position;</span><br><span class="line"> </span><br><span class="line">struct QNode &#123;</span><br><span class="line">    Position Front, Rear;  <span class="comment">/* 队列的头、尾指针 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;           <span class="comment">/* 队列最大容量 */</span></span><br><span class="line">&#125;;</span><br><span class="line">typedef struct QNode *Queue;</span><br><span class="line"> </span><br><span class="line"><span class="function">bool <span class="title">IsEmpty</span><span class="params">( Queue Q )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( Q-&gt;Front == NULL);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">( Queue Q )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position FrontCell; </span><br><span class="line">    ElementType FrontElem;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>  ( IsEmpty(Q) ) &#123;</span><br><span class="line">        printf(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        FrontCell = Q-&gt;Front;</span><br><span class="line">        <span class="keyword">if</span> ( Q-&gt;Front == Q-&gt;Rear ) <span class="comment">/* 若队列只有一个元素 */</span></span><br><span class="line">            Q-&gt;Front = Q-&gt;Rear = NULL; <span class="comment">/* 删除后队列置为空 */</span></span><br><span class="line">        <span class="keyword">else</span>                     </span><br><span class="line">            Q-&gt;Front = Q-&gt;Front-&gt;Next;</span><br><span class="line">        FrontElem = FrontCell-&gt;Data;</span><br><span class="line"> </span><br><span class="line">        free( FrontCell );  <span class="comment">/* 释放被删除结点空间  */</span></span><br><span class="line">        <span class="keyword">return</span>  FrontElem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-应用实例"><a href="#2-4-应用实例" class="headerlink" title="2.4 应用实例"></a>2.4 应用实例</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.4.5/2.4.1.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.4.5/2.4.2.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.4.5/2.4.3.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.4.5/2.4.4.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.4.5/2.4.5.png"></p><h3 id="小白专场：多项式乘法"><a href="#小白专场：多项式乘法" class="headerlink" title="小白专场：多项式乘法"></a>小白专场：多项式乘法</h3><p><a href="https://www.icourse163.org/learn/ZJU-93001#/learn/content?type=detail&id=1214143615&cid=1217772359">详情</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法01-概念</title>
      <link href="/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9501-%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9501-%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h1 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h1><p>##1.1 什么是数据结构</p><ul><li>官方统一定义—— 没有……</li><li>“数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。”</li><li>Sartaj Sahni，《数据结构、算法与应用》“数据结构是ADT（抽象数据类型 Abstract DataType）的物理实现。”</li><li>Clifford A.Shaffer，《数据结构与算法分析》“数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。”</li></ul><p>例题：写程序实现一个函数PrintN，使得传入一个正整数为N的参数后，能顺序打印从1到N的全部正整数。<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BE%AA%E7%8E%AF%E5%AE%9E%E7%8E%B0%E4%B8%8E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0.png" alt="循环实现与递归实现"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BE%AA%E7%8E%AF%E5%AE%9E%E7%8E%B0.png"></p><blockquote><p>解决问题方法的效率，跟空间的利用效率有关。</p></blockquote><h3 id="所以到底什么是数据结构？？？"><a href="#所以到底什么是数据结构？？？" class="headerlink" title="所以到底什么是数据结构？？？"></a>所以到底什么是数据结构？？？</h3><blockquote><p>数据对象在计算机中的组织方式</p></blockquote><ul><li>逻辑结构</li><li>物理存储结构</li><li>数据对象必定与一系列加在其上的操作相关联</li><li>完成这些操作所用的方法就是算法</li></ul><p>抽象数据类型（Abstract Data Type）</p><ul><li>数据类型</li><li>数据对象集</li><li>数据集合相关联的操作集</li><li>抽象：描述数据类型的方法不依赖于具体实现</li><li>与存放数据的机器无关</li><li>与数据存储的物理结构无关</li><li>与实现操作的算法和编程语言均无关<br>只描述数据对象集和相关操作集，“是什么”，并不涉及“如何做到”的问题。<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%92%9F%E6%89%93%E7%82%B9.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89.png"></li></ul><h2 id="1-2-什么是算法"><a href="#1-2-什么是算法" class="headerlink" title="1.2 什么是算法"></a>1.2 什么是算法</h2><p>算法（Algorithm）</p><ul><li>一个有限指令集</li><li>接受一些输入（有些情况下不需要输入）</li><li>产生输出</li><li>一定在有限步骤之后终止</li><li>每一条指令必须<ul><li>有充分明确的目标，不可以有歧义</li><li>计算机能处理的范围之内</li><li>描述应不依赖于任何一种计算机语言以及具体的实现手段</li></ul></li></ul><blockquote><p>例1：选择排序算法的伪码描述</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span> <span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> N )</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="comment">/* 将N个整数List[0]...List[N-1]进行非递减排序 */</span></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; i ++ ) &#123;</span><br><span class="line">MinPosition = ScanForMin( List, i, N–<span class="number">1</span> );</span><br><span class="line"><span class="comment">/* 从List[i]到List[N–1]中找最小元，并将其位置赋给MinPosition */</span></span><br><span class="line">Swap( List[i], List[MinPosition] );</span><br><span class="line"><span class="comment">/* 将未排序部分的最小元换到有序部分的最后位置 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>什么是好的算法？</p></blockquote><ul><li>空间复杂度S(n) —— 根据算法写成的程序在执行时占用存储单元的长度。这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限，造成程序非正常中断。</li><li>时间复杂度T(n)—— 根据算法写成的程序在执行时耗费时间的长度。这个长度往往也与输入数据的规模有关。时间复杂度过高的低效算法可能导致我们在有生之年都等不到运行结果。<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.1%E4%BE%8B%E9%A2%982.png" alt="1.1例题1"></li></ul><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.1%E4%BE%8B%E9%A2%983.png" alt="1.1例题2"></p><blockquote><p>在分析一般算法的效率时，我们经常关注下面两种复杂度<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9C%80%E5%9D%8F%E5%A4%8D%E6%9D%82%E5%BA%A6.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%A1%A8.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%BE%93%E5%85%A5%E8%A7%84%E6%A8%A1.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9B%B2%E7%BA%BF%E5%9B%BE%E5%88%86%E6%9E%90.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E6%B8%90%E8%BF%9B%E8%A1%A8%E7%A4%BA%E6%B3%95.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E5%B0%8F%E7%AA%8D%E9%97%A8.png"></p></blockquote><h2 id="1-3-最大子列和问题"><a href="#1-3-最大子列和问题" class="headerlink" title="1.3 最大子列和问题"></a>1.3 最大子列和问题</h2><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AE%97%E6%B3%951.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AE%97%E6%B3%952.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AE%97%E6%B3%953.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/%E7%AE%97%E6%B3%954.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max3</span><span class="params">( <span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 返回3个整数中的最大值 */</span></span><br><span class="line">    <span class="keyword">return</span> A &gt; B ? A &gt; C ? A : C : B &gt; C ? B : C;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DivideAndConquer</span><span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> left, <span class="keyword">int</span> right )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 分治法求List[left]到List[right]的最大子列和 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxLeftSum, MaxRightSum; <span class="comment">/* 存放左右子问题的解 */</span></span><br><span class="line">    <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum; <span class="comment">/*存放跨分界线的结果*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> LeftBorderSum, RightBorderSum;</span><br><span class="line">    <span class="keyword">int</span> center, i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>( left == right )  &#123; <span class="comment">/* 递归的终止条件，子列只有1个数字 */</span></span><br><span class="line">        <span class="keyword">if</span>( List[left] &gt; <span class="number">0</span> )  <span class="keyword">return</span> List[left];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 下面是&quot;分&quot;的过程 */</span></span><br><span class="line">    center = ( left + right ) / <span class="number">2</span>; <span class="comment">/* 找到中分点 */</span></span><br><span class="line">    <span class="comment">/* 递归求得两边子列的最大和 */</span></span><br><span class="line">    MaxLeftSum = DivideAndConquer( List, left, center );</span><br><span class="line">    MaxRightSum = DivideAndConquer( List, center+<span class="number">1</span>, right );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 下面求跨分界线的最大子列和 */</span></span><br><span class="line">    MaxLeftBorderSum = <span class="number">0</span>; LeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i=center; i&gt;=left; i-- ) &#123; <span class="comment">/* 从中线向左扫描 */</span></span><br><span class="line">        LeftBorderSum += List[i];</span><br><span class="line">        <span class="keyword">if</span>( LeftBorderSum &gt; MaxLeftBorderSum )</span><br><span class="line">            MaxLeftBorderSum = LeftBorderSum;</span><br><span class="line">    &#125; <span class="comment">/* 左边扫描结束 */</span></span><br><span class="line"> </span><br><span class="line">    MaxRightBorderSum = <span class="number">0</span>; RightBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i=center+<span class="number">1</span>; i&lt;=right; i++ ) &#123; <span class="comment">/* 从中线向右扫描 */</span></span><br><span class="line">        RightBorderSum += List[i];</span><br><span class="line">        <span class="keyword">if</span>( RightBorderSum &gt; MaxRightBorderSum )</span><br><span class="line">            MaxRightBorderSum = RightBorderSum;</span><br><span class="line">    &#125; <span class="comment">/* 右边扫描结束 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 下面返回&quot;治&quot;的结果 */</span></span><br><span class="line">    <span class="keyword">return</span> Max3( MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubseqSum3</span><span class="params">( <span class="keyword">int</span> List[], <span class="keyword">int</span> N )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 保持与前2种算法相同的函数接口 */</span></span><br><span class="line">    <span class="keyword">return</span> DivideAndConquer( List, <span class="number">0</span>, N-<span class="number">1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法03-树-上</title>
      <link href="/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9503-%E6%A0%91-%E4%B8%8A/"/>
      <url>/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%9503-%E6%A0%91-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="树与树的表示"><a href="#树与树的表示" class="headerlink" title="树与树的表示"></a>树与树的表示</h1><ul><li>客观世界中许多事物存在层次关系<ul><li>人类社会家谱</li><li>社会组织结构</li><li>图书信息管理</li></ul></li></ul><h2 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h2><ol><li>分层次组织在管理上具有更高的效率!</li><li>数据管理的基本操作之一：查找</li></ol><h3 id="查找（Searching）"><a href="#查找（Searching）" class="headerlink" title="查找（Searching）"></a>查找（Searching）</h3><blockquote><p>查找：根据某个给定关键字K ，从集合R中找出关键字与K相同的记录</p></blockquote><ol><li>静态查找：集合中记录是固定的<ul><li>没有插入和删除操作，只有查找</li></ul></li><li>动态查找：集合中记录是动态变化的<ul><li>除查找，还可能发生插入和删除<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.1.png"><h3 id="方法2：二分查找（Binary-Search"><a href="#方法2：二分查找（Binary-Search" class="headerlink" title="方法2：二分查找（Binary Search)"></a>方法2：二分查找（Binary Search)</h3><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.2.png"><blockquote><p>假设n个数据元素的关键字满足有序（比如：小到大）a1 &lt; a2 &lt;… an 并且是连续存放（数组），那么可以进行二分查找。</p></blockquote><h3 id="讨论-：黄金分割查找？"><a href="#讨论-：黄金分割查找？" class="headerlink" title="讨论 ：黄金分割查找？"></a>讨论 ：黄金分割查找？</h3><blockquote><p>在二分查找中，我们是取mid等于left和right的中间值，即用等分的方法进行查找。<br>那为什么一定要等分呐？能不能进行“黄金分割”？也就是mid=left+0.618(right-left),当然mid要取整数。如果这样查找，时间复杂性是多少？也许你还可以编程做个试验，比较一下二分法和“黄金分割”法的执行效率。</p></blockquote></li></ul></li></ol><ul><li>二分法更快。因为分割两端的不均等会导致效率的下降。考虑一个极端的例子，假如有100个元素，每次分割成1:99，那就基本与顺序查找等价，效率就远比二分法低了。</li></ul><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.3.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.4.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.5.png"></p><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><blockquote><p><strong>树（Tree）</strong>: n（n≥0）个结点构成的有限集合。</p></blockquote><ul><li>当n=0时，称为空树；</li><li>对于任一棵非空树（n&gt; 0），它具备以下性质：<ul><li>树中有一个称为“根（Root）”的特殊结点，用 r 表示；</li><li>其余结点可分为m(m&gt;0)个互不相交的有限集T1，T2，… ，Tm，其中每个集合本身又是一棵树，称为原来树的“子树（SubTree）”</li></ul></li></ul><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.6.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.7.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.8.png"></p><h3 id="讨论-森林及表示老师参与"><a href="#讨论-森林及表示老师参与" class="headerlink" title="讨论: 森林及表示老师参与"></a>讨论: 森林及表示老师参与</h3><blockquote><p>树的集合称为森林。是否也可以使用“儿子-兄弟”表示法存储森林？如何实现？<br><a href="https://www.jianshu.com/p/ddfaa1f46a24">详情</a></p></blockquote><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.10.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.1%E6%A0%91-%E4%B8%8A/3.11.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct TNode *Position;</span><br><span class="line">typedef Position BinTree; <span class="comment">/* 二叉树类型 */</span></span><br><span class="line">struct TNode&#123; <span class="comment">/* 树结点定义 */</span></span><br><span class="line">    ElementType Data; <span class="comment">/* 结点数据 */</span></span><br><span class="line">    BinTree Left;     <span class="comment">/* 指向左子树 */</span></span><br><span class="line">    BinTree Right;    <span class="comment">/* 指向右子树 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础04-for循环</title>
      <link href="/2020/05/21/Java%E5%9F%BA%E7%A1%8004-for%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95/"/>
      <url>/2020/05/21/Java%E5%9F%BA%E7%A1%8004-for%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="04-01-Java语言基础-循环结构概述和for语句的格式及其使用"><a href="#04-01-Java语言基础-循环结构概述和for语句的格式及其使用" class="headerlink" title="04.01_Java语言基础(循环结构概述和for语句的格式及其使用)"></a>04.01_Java语言基础(循环结构概述和for语句的格式及其使用)</h3><ul><li>A:循环结构的分类<ul><li>for,while,do…while </li></ul></li><li>B:循环结构for语句的格式：</li><li><pre><code>  for(初始化表达式;条件表达式;循环后的操作表达式) &#123;      循环体;  &#125;</code></pre></li><li>C执行流程：<ul><li>a:执行初始化语句</li><li>b:执行判断条件语句,看其返回值是true还是false<ul><li>如果是true，就继续执行</li><li>如果是false，就结束循环</li></ul></li><li>c:执行循环体语句;</li><li>d:执行循环后的操作表达式</li><li>e:回到B继续。</li></ul></li><li>D:案例演示<ul><li>在控制台输出10次”helloworld”</li></ul></li></ul><h3 id="04-02-Java语言基础-循环结构for语句的练习之获取数据"><a href="#04-02-Java语言基础-循环结构for语句的练习之获取数据" class="headerlink" title="04.02_Java语言基础(循环结构for语句的练习之获取数据)"></a>04.02_Java语言基础(循环结构for语句的练习之获取数据)</h3><ul><li>A:案例演示<ul><li>需求：请在控制台输出数据1-10</li><li>需求：请在控制台输出数据10-1</li></ul></li><li>B:注意事项<ul><li>a:判断条件语句无论简单还是复杂结果是boolean类型。</li><li>b:循环体语句如果是一条语句，大括号可以省略；如果是多条语句，大括号不能省略。建议永远不要省略。</li><li>c:一般来说：有左大括号就没有分号，有分号就没有左大括号</li></ul></li></ul><h3 id="04-03-Java语言基础-循环结构for语句的练习之求和思想"><a href="#04-03-Java语言基础-循环结构for语句的练习之求和思想" class="headerlink" title="04.03_Java语言基础(循环结构for语句的练习之求和思想)"></a>04.03_Java语言基础(循环结构for语句的练习之求和思想)</h3><ul><li>A:案例演示<ul><li>需求：求出1-10之间数据之和</li></ul></li><li>B:学生练习<ul><li>需求：求出1-100之间偶数和</li><li>需求：求出1-100之间奇数和</li></ul></li></ul><h3 id="04-04-Java语言基础-循环结构for语句的练习之水仙花"><a href="#04-04-Java语言基础-循环结构for语句的练习之水仙花" class="headerlink" title="04.04_Java语言基础(循环结构for语句的练习之水仙花)"></a>04.04_Java语言基础(循环结构for语句的练习之水仙花)</h3><ul><li><p>A:案例演示</p><ul><li><p>需求：在控制台输出所有的”水仙花数”</p></li><li><p>所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。</p></li><li><p>举例：153就是一个水仙花数。</p></li><li><p>153 = 1<em>1</em>1 + 5<em>5</em>5 + 3<em>3</em>3 = 1 + 125 + 27 = 153</p></li></ul></li></ul><h3 id="04-05-Java语言基础-循环结构for语句的练习之统计思想"><a href="#04-05-Java语言基础-循环结构for语句的练习之统计思想" class="headerlink" title="04.05_Java语言基础(循环结构for语句的练习之统计思想)"></a>04.05_Java语言基础(循环结构for语句的练习之统计思想)</h3><ul><li>A:案例演示<ul><li>需求：统计”水仙花数”共有多少个</li></ul></li></ul><h3 id="04-06-Java语言基础-循环结构while语句的格式和基本使用"><a href="#04-06-Java语言基础-循环结构while语句的格式和基本使用" class="headerlink" title="04.06_Java语言基础(循环结构while语句的格式和基本使用)"></a>04.06_Java语言基础(循环结构while语句的格式和基本使用)</h3><ul><li><p>A:循环结构while语句的格式：</p></li><li><p>while循环的基本格式：<br>while(判断条件语句) {<br>  循环体语句;<br>}</p><p>完整格式：</p><p>初始化语句;<br>while(判断条件语句) {<br>   循环体语句;<br>   控制条件语句;<br>}</p></li><li><p>B:执行流程：</p><ul><li>a:执行初始化语句</li><li>b:执行判断条件语句,看其返回值是true还是false<ul><li>如果是true，就继续执行</li><li>如果是false，就结束循环</li></ul></li><li>c:执行循环体语句;</li><li>d:执行控制条件语句</li><li>e:回到B继续。</li></ul></li><li><p>C:案例演示</p><ul><li>需求：请在控制台输出数据1-10</li></ul></li></ul><h3 id="04-07-Java语言基础-循环结构while语句的练习"><a href="#04-07-Java语言基础-循环结构while语句的练习" class="headerlink" title="04.07_Java语言基础(循环结构while语句的练习)"></a>04.07_Java语言基础(循环结构while语句的练习)</h3><ul><li>A:求和思想<ul><li>求1-100之和</li></ul></li><li>B:统计思想<ul><li>统计”水仙花数”共有多少个</li></ul></li></ul><h3 id="04-08-Java语言基础-循环结构do…while语句的格式和基本使用"><a href="#04-08-Java语言基础-循环结构do…while语句的格式和基本使用" class="headerlink" title="04.08_Java语言基础(循环结构do…while语句的格式和基本使用)"></a>04.08_Java语言基础(循环结构do…while语句的格式和基本使用)</h3><ul><li><p>A:循环结构do…while语句的格式：</p></li><li><pre><code>  do &#123;      循环体语句;  &#125;while(判断条件语句);  完整格式；  初始化语句;  do &#123;      循环体语句;      控制条件语句;  &#125;while(判断条件语句);</code></pre></li><li><p>B:执行流程：</p><ul><li>a:执行初始化语句</li><li>b:执行循环体语句;</li><li>c:执行控制条件语句</li><li>d:执行判断条件语句,看其返回值是true还是false<ul><li>如果是true，就继续执行</li><li>如果是false，就结束循环</li></ul></li><li>e:回到b继续。</li></ul></li><li><p>C:案例演示</p><ul><li>需求：请在控制台输出数据1-10</li></ul></li></ul><h3 id="04-09-Java语言基础-循环结构三种循环语句的区别"><a href="#04-09-Java语言基础-循环结构三种循环语句的区别" class="headerlink" title="04.09_Java语言基础(循环结构三种循环语句的区别)"></a>04.09_Java语言基础(循环结构三种循环语句的区别)</h3><ul><li>A:案例演示<ul><li>三种循环语句的区别:</li><li>do…while循环至少执行一次循环体。</li><li>而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。</li></ul></li><li>B:案例演示<ul><li>for循环和while循环的区别：<ul><li>A:如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。不知道用谁就用for循环。因为变量及早的从内存中消失，可以提高内存的使用效率。</li></ul></li></ul></li></ul><h3 id="04-10-Java语言基础-循环结构注意事项之死循环"><a href="#04-10-Java语言基础-循环结构注意事项之死循环" class="headerlink" title="04.10_Java语言基础(循环结构注意事项之死循环)"></a>04.10_Java语言基础(循环结构注意事项之死循环)</h3><ul><li>A:一定要注意控制条件语句控制的那个变量的问题，不要弄丢了，否则就容易死循环。</li><li>B:两种最简单的死循环格式<ul><li>while(true){…}</li><li>for(;;){…}</li></ul></li></ul><h3 id="04-11-Java语言基础-循环结构循环嵌套输出4行5列的星星"><a href="#04-11-Java语言基础-循环结构循环嵌套输出4行5列的星星" class="headerlink" title="04.11_Java语言基础(循环结构循环嵌套输出4行5列的星星)"></a>04.11_Java语言基础(循环结构循环嵌套输出4行5列的星星)</h3><ul><li><p>A:案例演示</p><ul><li><p>需求：请输出一个4行5列的星星(*)图案。</p></li><li><pre><code>  如图：      *****      *****      *****      *****  注意：      System.out.println(&quot;*&quot;);和System.out.print(&quot;*&quot;);的区别</code></pre></li></ul></li><li><p>B:结论：</p><ul><li>外循环控制行数，内循环控制列数</li></ul></li></ul><h3 id="04-12-Java语言基础-循环结构循环嵌套输出正三角形"><a href="#04-12-Java语言基础-循环结构循环嵌套输出正三角形" class="headerlink" title="04.12_Java语言基础(循环结构循环嵌套输出正三角形)"></a>04.12_Java语言基础(循环结构循环嵌套输出正三角形)</h3><ul><li>A:案例演示</li><li><pre><code>  需求：请输出下列的形状  *  **  ***  ****  *****</code></pre></li></ul><h3 id="04-13-Java语言基础-循环结构九九乘法表"><a href="#04-13-Java语言基础-循环结构九九乘法表" class="headerlink" title="04.13_Java语言基础(循环结构九九乘法表)"></a>04.13_Java语言基础(循环结构九九乘法表)</h3><ul><li><p>A:案例演示</p><ul><li>需求：在控制台输出九九乘法表。</li></ul></li><li><p>B:代码优化</p></li><li><pre><code>  注意：  &#39;\x&#39; x表示任意，\是转义符号,这种做法叫转移字符。  &#39;\t&#39;    tab键的位置  &#39;\r&#39;    回车  &#39;\n&#39;    换行  &#39;\&quot;&#39;  &#39;\&#39;&#39;</code></pre></li></ul><h3 id="04-14-Java语言基础-控制跳转语句break语句"><a href="#04-14-Java语言基础-控制跳转语句break语句" class="headerlink" title="04.14_Java语言基础(控制跳转语句break语句)"></a>04.14_Java语言基础(控制跳转语句break语句)</h3><ul><li>A:break的使用场景<ul><li>只能在switch和循环中 </li></ul></li></ul><h3 id="04-15-Java语言基础-控制跳转语句continue语句"><a href="#04-15-Java语言基础-控制跳转语句continue语句" class="headerlink" title="04.15_Java语言基础(控制跳转语句continue语句)"></a>04.15_Java语言基础(控制跳转语句continue语句)</h3><ul><li>A:continue的使用场景<ul><li>只能在循环中 </li></ul></li></ul><h3 id="04-16-Java语言基础-控制跳转语句标号"><a href="#04-16-Java语言基础-控制跳转语句标号" class="headerlink" title="04.16_Java语言基础(控制跳转语句标号)"></a>04.16_Java语言基础(控制跳转语句标号)</h3><ul><li>标号:标记某个循环对其控制</li><li>标号组成规则:其实就是合法的标识符</li></ul><h3 id="04-17-Java语言基础-控制调整语句练习"><a href="#04-17-Java语言基础-控制调整语句练习" class="headerlink" title="04.17_Java语言基础(控制调整语句练习)"></a>04.17_Java语言基础(控制调整语句练习)</h3><ul><li><p>A:练习题</p></li><li><pre><code>  for(int x=1; x&lt;=10; x++) &#123;      if(x%3==0) &#123;          //在此处填写代码      &#125;      System.out.println(“Java基础班”);  &#125;  我想在控制台输出2次:“Java基础班“  我想在控制台输出7次:“Java基础班“  我想在控制台输出13次:“Java基础班“    </code></pre></li></ul><h3 id="04-18-Java语言基础-控制跳转语句return语句"><a href="#04-18-Java语言基础-控制跳转语句return语句" class="headerlink" title="04.18_Java语言基础(控制跳转语句return语句)"></a>04.18_Java语言基础(控制跳转语句return语句)</h3><ul><li>A:return的作用<ul><li>返回</li><li>其实它的作用不是结束循环的，而是结束方法的。</li></ul></li><li>B:案例演示<ul><li>return和break以及continue的区别?</li><li>return是结束方法</li><li>break是跳出循环</li><li>continue是终止本次循环继续下次循环</li></ul></li></ul><h3 id="04-19-Java语言基础-方法概述和格式说明"><a href="#04-19-Java语言基础-方法概述和格式说明" class="headerlink" title="04.19_Java语言基础(方法概述和格式说明)"></a>04.19_Java语言基础(方法概述和格式说明)</h3><ul><li>A:为什么要有方法<ul><li>提高代码的复用性 </li></ul></li><li>B:什么是方法<ul><li>完成特定功能的代码块。 </li></ul></li><li>C:方法的格式</li><li><pre><code>  修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) &#123;      方法体语句;      return 返回值;   &#125; </code></pre></li><li>D:方法的格式说明<ul><li>修饰符：目前就用 public static。后面我们再详细的讲解其他的修饰符。</li><li>返回值类型：就是功能结果的数据类型。</li><li>方法名：符合命名规则即可。方便我们的调用。</li><li>参数：<ul><li>实际参数：就是实际参与运算的。</li><li>形式参数；就是方法定义上的，用于接收实际参数的。</li></ul></li><li>参数类型：就是参数的数据类型</li><li>参数名：就是变量名</li><li>方法体语句：就是完成功能的代码。</li><li>return：结束方法的。</li><li>返回值：就是功能的结果，由return带给调用者。 </li></ul></li></ul><h3 id="04-20-Java语言基础-方法之求和案例及其调用"><a href="#04-20-Java语言基础-方法之求和案例及其调用" class="headerlink" title="04.20_Java语言基础(方法之求和案例及其调用)"></a>04.20_Java语言基础(方法之求和案例及其调用)</h3><ul><li>A:如何写一个方法<ul><li>1,明确返回值类型</li><li>2,明确参数列表 </li></ul></li><li>B:案例演示<ul><li>需求：求两个数据之和的案例</li></ul></li><li>C:方法调用图解</li></ul><h3 id="04-21-Java语言基础-方法的注意事项"><a href="#04-21-Java语言基础-方法的注意事项" class="headerlink" title="04.21_Java语言基础(方法的注意事项)"></a>04.21_Java语言基础(方法的注意事项)</h3><ul><li>A:方法调用(有具体返回值)<ul><li>a:单独调用,一般来说没有意义，所以不推荐。</li><li>b:输出调用,但是不够好。因为我们可能需要针对结果进行进一步的操作。</li><li>c:赋值调用,推荐方案。</li></ul></li><li>B:案例演示<ul><li>a:方法不调用不执行</li><li>b:方法与方法是平级关系，不能嵌套定义</li><li>c:方法定义的时候参数之间用逗号隔开</li><li>d:方法调用的时候不用在传递数据类型</li><li>e:如果方法有明确的返回值，一定要有return带回一个值</li></ul></li></ul><h3 id="04-22-Java语言基础-方法的练习"><a href="#04-22-Java语言基础-方法的练习" class="headerlink" title="04.22_Java语言基础(方法的练习)"></a>04.22_Java语言基础(方法的练习)</h3><ul><li>A:案例演示<ul><li>需求：键盘录入两个数据，返回两个数中的较大值</li></ul></li><li>B:案例演示<ul><li>需求：键盘录入两个数据，比较两个数是否相等     </li></ul></li></ul><h3 id="04-23-Java语言基础-方法之输出星形及其调用"><a href="#04-23-Java语言基础-方法之输出星形及其调用" class="headerlink" title="04.23_Java语言基础(方法之输出星形及其调用)"></a>04.23_Java语言基础(方法之输出星形及其调用)</h3><ul><li>A:案例演示<ul><li>需求：根据键盘录入的行数和列数，在控制台输出星形</li></ul></li><li>B:方法调用：(无返回值,void)<ul><li>单独调用</li><li>输出调用(错误)</li><li>赋值调用(错误)</li></ul></li></ul><h3 id="04-24-Java语言基础-方法的练习"><a href="#04-24-Java语言基础-方法的练习" class="headerlink" title="04.24_Java语言基础(方法的练习)"></a>04.24_Java语言基础(方法的练习)</h3><ul><li>A:案例演示<ul><li>需求：根据键盘录入的数据输出对应的乘法表</li></ul></li></ul><h3 id="04-25-Java语言基础-方法重载概述和基本使用"><a href="#04-25-Java语言基础-方法重载概述和基本使用" class="headerlink" title="04.25_Java语言基础(方法重载概述和基本使用)"></a>04.25_Java语言基础(方法重载概述和基本使用)</h3><ul><li><p>A:方法重载概述</p><ul><li>求和案例<ul><li>2个整数</li><li>3个整数</li><li>4个整数</li></ul></li></ul></li><li><p>B:方法重载：</p><ul><li><p>在同一个类中，方法名相同，参数列表不同。与返回值类型无关。</p></li><li><p>参数列表不同：</p><ul><li>A:参数个数不同</li><li>B:参数类型不同</li><li>C:参数的顺序不同(算重载,但是在开发中不用)</li></ul></li></ul></li></ul><h3 id="04-26-Java语言基础-方法重载练习比较数据是否相等"><a href="#04-26-Java语言基础-方法重载练习比较数据是否相等" class="headerlink" title="04.26_Java语言基础(方法重载练习比较数据是否相等)"></a>04.26_Java语言基础(方法重载练习比较数据是否相等)</h3><ul><li>A:案例演示<ul><li>需求：比较两个数据是否相等。</li><li>参数类型分别为两个int类型，两个double类型，并在main方法中进行测试</li></ul></li></ul><hr><h2 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h2><h3 id="1-for循环的格式-要能看懂执行流程。"><a href="#1-for循环的格式-要能看懂执行流程。" class="headerlink" title="1:for循环的格式?要能看懂执行流程。"></a>1:for循环的格式?要能看懂执行流程。</h3><p>  用for循环完成如下案例</p><p>  求和    for (int i =1;i&lt;=10;i++)<br>        sum+=i;<br>  求偶数和  for (int i =2;i&lt;=10;i+=2)<br>        sum+=i<br>  求奇数和for (int i =1;i&lt;=10;i+=2)<br>        sum+=i<br>  打印水仙花数for (int i =100;i&lt;=999;i++)<br>        int ge = i%10<br>        int shi =i/10%10;<br>        int bai = i/100;<br>        if(ge<em>ge</em>ge+shi<em>shi</em>shi+bai<em>bai</em>bai==i)<br>        System.out.println(i);<br>  统计水仙花数</p><p>  九九乘法表for (int i =1;i&lt;=9;i++)<br>        for(int j =1;j&lt;=i; j++)<br>        System.out.print(i<em>j=i</em>j);<br>        System.out.println();</p><h3 id="2-wvhile循环的格式-要能看懂执行流程"><a href="#2-wvhile循环的格式-要能看懂执行流程" class="headerlink" title="2:wvhile循环的格式?要能看懂执行流程"></a>2:wvhile循环的格式?要能看懂执行流程</h3><p>  用while循环完成如下案例</p><p>  求和<br>  假设有一张足够大的纸，厚度为1毫米，珠穆朗玛峰高度为8848米，<br>  求纸张至少折叠几次可以超过珠穆朗玛峰的高度<br>  int start  = 1;<br>  int end  = 8848000;</p><p>  while(start &lt; end){<br>    start+=start</p><p>  }</p><h3 id="3-break-continue和return分别有什么用"><a href="#3-break-continue和return分别有什么用" class="headerlink" title="3:break,continue和return分别有什么用?"></a>3:break,continue和return分别有什么用?</h3><p>能用在 switch 和 循环<br>continue 终止本次循环,继续下次循环<br>return 结束方法  返回值</p><p>4:函数的概念?函数的格式?格式的解释说明<br>修饰符 返回值类型 方法名(参数数据类型 参数名,….){<br>    代码块;<br>}<br>public static int 方法名(int a ,int b ){<br>    return a+b;<br>}</p><h3 id="5-函数的调用"><a href="#5-函数的调用" class="headerlink" title="5:函数的调用"></a>5:函数的调用</h3><p>赋值 直接调用 输出调用<br>    A:明确返回值类型的函数调用<br>赋值调用<br>    B:void类型的函数调用<br>直接调用</p><h3 id="6-函数的练习："><a href="#6-函数的练习：" class="headerlink" title="6:函数的练习："></a>6:函数的练习：</h3><pre><code>A:求两个数据之和B:判断两个数据是否相等C:获取两个数中较大的值D:打印m行n列的星形矩形E:打印nn乘法表</code></pre><h3 id="7-什么是函数重载-以及函数重载的练习-把讲过的案例练习一次即可"><a href="#7-什么是函数重载-以及函数重载的练习-把讲过的案例练习一次即可" class="headerlink" title="7:什么是函数重载?以及函数重载的练习?把讲过的案例练习一次即可"></a>7:什么是函数重载?以及函数重载的练习?把讲过的案例练习一次即可</h3><p>方法名相同 参数列表不同 跟返回值无关<br>public static int add(int a,int  b){<br>    return a +b;<br>}<br>public static double add(double c,int  d){<br>    return c +d;<br>}<br>public static double add2(int  d,double c){<br>    return c +d;<br>}</p><p>public static int add(int c,int  d,int e){<br>    return c +d + e;<br>}</p><p>数据类型不一样  个数不一样 顺序不同</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础02(进制运算&amp;数据类型&amp;变量)</title>
      <link href="/2020/05/21/Java%E5%9F%BA%E7%A1%8002-%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%8F%98%E9%87%8F/"/>
      <url>/2020/05/21/Java%E5%9F%BA%E7%A1%8002-%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="1：计算出十进制46对应的二进制，八进制，十六进制的值。"><a href="#1：计算出十进制46对应的二进制，八进制，十六进制的值。" class="headerlink" title="1：计算出十进制46对应的二进制，八进制，十六进制的值。"></a>1：计算出十进制46对应的二进制，八进制，十六进制的值。</h3><ul><li>46 转二进制为：101110  ， 八进制为：53  ，十六进制为：2e<br>(可用计算器验证你算的是否正确)</li></ul><h3 id="2：什么是变量-变量的定义格式-要使用变量需要注意什么"><a href="#2：什么是变量-变量的定义格式-要使用变量需要注意什么" class="headerlink" title="2：什么是变量?变量的定义格式?要使用变量需要注意什么?"></a>2：什么是变量?变量的定义格式?要使用变量需要注意什么?</h3><ul><li>右边的常量 赋值给左边的 变量，，</li><li>变量名首字母的命名规则：字下美人  后面字母 字下美人数。。关键字不能作为变量名</li></ul><h3 id="3：Java中的数据类型分几类-基本数据类型有哪些"><a href="#3：Java中的数据类型分几类-基本数据类型有哪些" class="headerlink" title="3：Java中的数据类型分几类?基本数据类型有哪些?"></a>3：Java中的数据类型分几类?基本数据类型有哪些?</h3><ul><li>基本数据类型，和引用数据类型；</li><li>基本数据类型分为：<br>byte<br>short<br>int<br>long<br>bolean<br>fort<br>double<br>char</li></ul><h3 id="数据类型转换："><a href="#数据类型转换：" class="headerlink" title="数据类型转换："></a>数据类型转换：</h3><pre><code>隐式转换：小的数据类型转换大的数据类型，强制转换：面试题：    第一题：    byte b1=3,b2=4,b;    b=b1+b2;//出错因为在JAVA虚拟机中默认是int类型转换，虚拟机不知道b1，b2 中的数值到底是多少，所有会抛出可能损失精度的错误;                   //虚拟机会把  b1,b2  转换成 int类型在进行运算，两个int类型的数值相加结果任然是int类型，int类型 不能赋值给 byte类型    b=3+4;    哪句是编译失败的呢？为什么呢？    第二题：    byte  by = 130;有没有问题?有问题如何解决?结果是多少呢?  byte 的数值范围是 126~-127  130已经超出byte取值范围 运算是会砍掉前面的 三个8位        结果会变成-126    第三题:    byte b = 10;    b++;//这句  java虚拟机会做一个自动转换动作  相当于  b=(byte)(b+1)所以不会报错    b = b + 1;//这句java虚拟机会把，b转换成int类型 相当于  int b + int 类型的1 然后赋值给Byte类型 int是4个字节  byte是1个字节 所有会抛出损失精度    哪句是编译失败的呢？为什么呢？</code></pre><h3 id="常见的算术运算符有哪些-–"><a href="#常见的算术运算符有哪些-–" class="headerlink" title="常见的算术运算符有哪些?// + - * / % ++ – += -= *= /="></a>常见的算术运算符有哪些?// + - * / % ++ – += -= *= /=</h3><p>  +运算符的作用有哪些?// 链接符号（当字符串在前面时 必须作为连接符来使用） 算数运算符<br>  答:正号,字符串连接符号,算术运算符<br>  除法和取余的区别? //  / 除法是求商   % 求余数<br>  ++和–的使用规则?  a++ 先赋值在运算，  ++a  先运算  再赋值</p><h3 id="常见的赋值运算符有哪些"><a href="#常见的赋值运算符有哪些" class="headerlink" title="常见的赋值运算符有哪些?"></a>常见的赋值运算符有哪些?</h3><p>  +=运算的作用是什么? 等于自身去右边的数值，然后赋值给左边<br>  扩展的赋值运算符有什么特点?  系统会自动 隐式转换。。。</p><h3 id="short-s-1-s-s-1-有没有问题-如果有怎么解决"><a href="#short-s-1-s-s-1-有没有问题-如果有怎么解决" class="headerlink" title="short s = 1; s = s + 1;有没有问题?如果有怎么解决?"></a>short s = 1; s = s + 1;有没有问题?如果有怎么解决?</h3><ul><li>答：系统会抛出，损失精度的错误。需要改成 s = (short)(s + 1)<h3 id="short-s-1-s-1-有没有问题-如果有怎么解决"><a href="#short-s-1-s-1-有没有问题-如果有怎么解决" class="headerlink" title="short s = 1; s += 1;有没有问题?如果有怎么解决?"></a>short s = 1; s += 1;有没有问题?如果有怎么解决?</h3></li><li>答:没有问题</li></ul><h3 id="常见的关系运算符有哪些"><a href="#常见的关系运算符有哪些" class="headerlink" title="常见的关系运算符有哪些?"></a>常见的关系运算符有哪些?</h3><ol><li>答； 常见的关系运算符  ==  &gt; &lt; &lt;= &gt;= !=</li></ol><h3 id="关系运算符的结果有什么特点"><a href="#关系运算符的结果有什么特点" class="headerlink" title="关系运算符的结果有什么特点?"></a>关系运算符的结果有什么特点?</h3><ol start="2"><li>答：关系运算符 输出的结果  是boolean类型 要么为 true 要么为 false</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础01(计算机基础)</title>
      <link href="/2020/05/21/Java%E5%9F%BA%E7%A1%8001-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/05/21/Java%E5%9F%BA%E7%A1%8001-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="01-01-计算机基础知识-计算机概述-了解"><a href="#01-01-计算机基础知识-计算机概述-了解" class="headerlink" title="01.01_计算机基础知识(计算机概述)(了解)"></a>01.01_计算机基础知识(计算机概述)(了解)</h3><ul><li><p>A:什么是计算机?计算机在生活中的应用举例</p><ul><li>计算机（Computer）全称：电子计算机，俗称电脑。是一种能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。由硬件和软件所组成，没有安装任何软件的计算机称为裸机。常见的形式有台式计算机、笔记本计算机、大型计算机等。</li><li>应用举例<ul><li>1：科学计算</li><li>2、数据处理</li><li>3、自动控制</li><li>4、计算机辅助设计</li><li>5、人工智能</li><li>6、多媒体应用</li><li>7、计算机网络</li><li>等等… </li></ul></li></ul></li><li><p>B:什么是硬件?硬件举例</p><ul><li><p>计算机硬件（Computer Hardware）是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。这些物理装置按系统结构的要求构成一个有机整体为计算机软件运行提供物质基础。</p></li><li><p>冯.诺依曼体系结构</p></li><li><p>计算机的硬件分成5大组成部件：运算器、控制器、存储器、输入设备和输出设备。</p><ul><li>运算器和控制器是计算机的核心，合称中央处理单元（Central Processing Unit，CPU）或处理器。CPU的内部还有一些高速存储单元，被称为寄存器。其中运算器执行所有的算术和逻辑运算；控制器负责把指令逐条从存储器中取出，经译码后向计算机发出各种控制命令；而寄存器为处理单元提供操作所需要的数据。</li><li>存储器是计算机的记忆部分，用来存放程序以及程序中涉及的数据。它分为内部存储器和外部存储器。内部存储器用于存放正在执行的程序和使用的数据，其成本高、容量小，但速度快。外部存储器可用于长期保存大量程序和数据，其成本低、容量大，但速度较慢。</li><li>输入设备和输出设备统称为外部设备，简称外设或I/O设备，用来实现人机交互和机间通信。微型机中常用的输入设备有键盘、鼠标等，输出设备有显示器、打印机等。</li></ul></li></ul></li><li><p>C:什么是软件?软件分类及举例</p><ul><li>计算机软件(Computer Software)是使用计算机过程中必不可少的东西，计算机软件可以使计算机按照事先预定好的顺序完成特定的功能</li><li>计算机软件按照其功能划分为系统软件与应用软件<ul><li>系统软件： DOS(Disk Operating System), Windows, Linux, Unix, Mac, Android, iOS</li><li>应用软件：office  QQ聊天  YY语言  扫雷<h3 id="01-02-计算机基础知识-软件开发和计算机语言概述-了解"><a href="#01-02-计算机基础知识-软件开发和计算机语言概述-了解" class="headerlink" title="01.02_计算机基础知识(软件开发和计算机语言概述)(了解)"></a>01.02_计算机基础知识(软件开发和计算机语言概述)(了解)</h3></li></ul></li></ul></li><li><p>A:什么是软件</p><ul><li>按照特定顺序组织的计算机数据和指令的集合</li></ul></li><li><p>B:什么是开发</p><ul><li>软件的制作过程</li></ul></li><li><p>C:什么是软件开发</p><ul><li>借助开发工具与计算机语言制作软件 </li></ul></li><li><p>D:什么是计算机语言</p><ul><li>人与计算机之间进行信息交流沟通的一种特殊语言</li></ul></li><li><p>E:计算机语言的分类</p><ul><li>机器语言：<ul><li>机器语言是直接用二进制代码指令表达的计算机语言，指令是用0和1组成的一串代码，它们有一定的位数，并分成若干段，各段的编码表示不同的含义。</li></ul></li><li>汇编语言：<ul><li>汇编语言是使用一些特殊的符号来代替机器语言的二进制码，计算机不能直接识别，需要用一种软件将汇编语言翻译成机器语言。</li></ul></li><li>高级语言：  <ul><li>使用普通英语进行编写源代码，通过编译器将源代码翻译成计算机直接识别的机器语言，之后再由计算机执行。</li><li>高级语言包括C,C++,C#,JAVA<h3 id="01-03-计算机基础知识-人机交互-了解"><a href="#01-03-计算机基础知识-人机交互-了解" class="headerlink" title="01.03_计算机基础知识(人机交互)(了解)"></a>01.03_计算机基础知识(人机交互)(了解)</h3></li></ul></li></ul></li><li><p>A:人机交互的两种方式</p><ul><li>a:命令行方式 <ul><li>需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。 </li></ul></li><li>b:图形化界面方式<ul><li>这种方式简单直观，使用者易于接受，容易上手操作。<h3 id="01-04-计算机基础知识-键盘功能键和快捷键-掌握"><a href="#01-04-计算机基础知识-键盘功能键和快捷键-掌握" class="headerlink" title="01.04_计算机基础知识(键盘功能键和快捷键)(掌握)"></a>01.04_计算机基础知识(键盘功能键和快捷键)(掌握)</h3></li></ul></li></ul></li><li><p>A:键盘功能键</p><ul><li>a:Tab</li><li>b:Shift</li><li>c:Ctrl</li><li>d:Alt</li><li>e:空格    </li><li>f:Enter</li><li>g:Window</li><li>h:上下左右键</li><li>i:PrtSc(PrintScreen)屏幕截图</li></ul></li><li><p>B:键盘快捷键</p><ul><li>a:Ctrl+A    全选</li><li>b:Ctrl+C    复制</li><li>c:Ctrl+V    粘贴</li><li>d:Ctrl+X    剪切</li><li>e:Ctrl+Z    撤销</li><li>f:Ctrl+S    保存</li></ul></li></ul><h3 id="01-05-计算机基础知识-如何打开DOS控制台-掌握"><a href="#01-05-计算机基础知识-如何打开DOS控制台-掌握" class="headerlink" title="01.05_计算机基础知识(如何打开DOS控制台)(掌握)"></a>01.05_计算机基础知识(如何打开DOS控制台)(掌握)</h3><ul><li>A:xp下如何打开DOS控制台？<ul><li>a:开始–程序–附件–命令提示符</li><li>b:开始–运行–cmd–回车</li><li>c:win+r–cmd–回车</li></ul></li><li>B:win7下如何打开DOS控制台？<ul><li>a:开始–所有程序–附件–命令提示符</li><li>b:开始–搜索程序和文件–cmd–回车</li><li>c:win+r–cmd–回车</li></ul></li><li>C:win8下如何打开DOS控制台<ul><li>a:鼠标左击开始–下箭头–命令提示符</li><li>b:鼠标右击开始–搜索–cmd–回车</li><li>c:鼠标右击开始–运行–cmd–回车</li><li>d:win+r–cmd–回车</li></ul></li></ul><h3 id="01-06-计算机基础知识-常见的DOS命令讲解"><a href="#01-06-计算机基础知识-常见的DOS命令讲解" class="headerlink" title="01.06_计算机基础知识(常见的DOS命令讲解)"></a>01.06_计算机基础知识(常见的DOS命令讲解)</h3><ul><li>A:d: 回车    盘符切换</li><li>B:dir(directory):列出当前目录下的文件以及文件夹</li><li>C:cd (change directory)改变指定目录(进入指定目录)</li><li>D:cd.. : 退回到上一级目录</li><li>E:cd: 退回到根目录</li><li>F:cls : (clear screen)清屏</li><li>G:exit : 退出dos命令行(分割线上的需要掌握,下的了解)</li><li>/=========================================================</li><li>md (make directory) : 创建目录</li><li>rd (remove directory): 删除目录</li><li>del (delete): 删除文件,删除一堆后缀名一样的文件*.txt</li><li>notepad 创建文件–打开记事本</li><li>删除带内容的文件夹<ul><li>rd + /s    文件夹名称(询问是否删除)</li><li>rd + /q + /s 文件夹名称(直接删除)</li></ul></li></ul><h3 id="01-07-Java语言基础-Java语言概述-了解"><a href="#01-07-Java语言基础-Java语言概述-了解" class="headerlink" title="01.07_Java语言基础(Java语言概述)(了解)"></a>01.07_Java语言基础(Java语言概述)(了解)</h3><ul><li>A:Java语言发展史<ul><li>詹姆斯·高斯林（James Gosling）1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视。后来转至Sun公司，1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。</li><li>SUN(Stanford University Network，斯坦福大学网络公司) </li></ul></li><li>B:Java语言版本<ul><li>JDK 1.1.4        Sparkler    宝石                1997-09-12</li><li>JDK 1.1.5        Pumpkin        南瓜                1997-12-13</li><li>JDK 1.1.6        Abigail        阿比盖尔–女子名        1998-04-24</li><li>JDK 1.1.7        Brutus        布鲁图–古罗马政治家和将军    1998-09-28</li><li>JDK 1.1.8        Chelsea        切尔西–城市名            1999-04-08</li><li>J2SE 1.2        Playground    运动场                1998-12-04</li><li>J2SE 1.2.1        none        无                1999-03-30</li><li>J2SE 1.2.2        Cricket        蟋蟀                1999-07-08</li><li>J2SE 1.3        Kestrel        美洲红隼(sǔn)            2000-05-08</li><li>J2SE 1.3.1        Ladybird    瓢虫                2001-05-17</li><li>J2SE 1.4.0        Merlin        灰背隼                2002-02-13</li><li>J2SE 1.4.1        grasshopper    蚱蜢                2002-09-16</li><li>J2SE 1.4.2        Mantis        螳螂                2003-06-26</li><li>JAVASE 5.0 (1.5.0)    Tiger        老虎    </li><li>JAVASE 5.1 (1.5.1)    Dragonfly    蜻蜓    </li><li>JAVASE 6.0 (1.6.0)    Mustang        野马</li><li>JAVASE 7.0 (1.7.0)    Dolphin        海豚</li></ul></li><li>C:Java语言平台<ul><li>J2SE(Java 2 Platform Standard Edition)标准版<ul><li>是为开发普通桌面和商务应用程序提供的解决方案,该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发</li></ul></li><li>J2ME(Java 2 Platform Micro Edition)小型版<ul><li>是为开发电子消费产品和嵌入式设备提供的解决方案</li></ul></li><li>J2EE(Java 2 Platform Enterprise Edition)企业版<ul><li>是为开发企业环境下的应用程序提供的一套解决方案,该技术体系中包含的技术如 Servlet、Jsp等，主要针对于Web应用程序开发 </li></ul></li></ul></li><li>D:Java语言特点<ul><li>简单性        </li><li>解释性</li><li>面向对象        </li><li>高性能</li><li>分布式处理    </li><li>多线程</li><li>健壮性        </li><li>动态</li><li>结构中立        </li><li>安全性</li><li>开源</li><li>跨平台<h3 id="01-08-Java语言基础-Java语言跨平台原理-掌握"><a href="#01-08-Java语言基础-Java语言跨平台原理-掌握" class="headerlink" title="01.08_Java语言基础(Java语言跨平台原理)(掌握)"></a>01.08_Java语言基础(Java语言跨平台原理)(掌握)</h3></li></ul></li><li>A:什么是跨平台性</li><li>B:Java语言跨平台原理<ul><li>只要在需要运行java应用程序的操作系统上，先安装一个Java虚拟机(JVM Java Virtual Machine)即可。由JVM来负责Java程序在该系统中的运行。</li></ul></li><li>C:Java语言跨平台图解<ul><li>write once ,run anywhere!(一处编译,到处运行)<h3 id="01-09-Java语言基础-JRE和JDK的概述-掌握"><a href="#01-09-Java语言基础-JRE和JDK的概述-掌握" class="headerlink" title="01.09_Java语言基础(JRE和JDK的概述)(掌握)"></a>01.09_Java语言基础(JRE和JDK的概述)(掌握)</h3></li></ul></li><li>A:什么是JRE<ul><li>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</li><li>JRE:JVM+类库。 </li></ul></li><li>B:什么是JDK<ul><li>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。</li><li>其中的开发工具：编译工具(javac.exe)  打包工具(jar.exe)等<ul><li>JDK:JRE+JAVA的开发工具。</li></ul></li></ul></li><li>C:为什么JDK中包含一个JRE<ul><li>为什么JDK中包含一个JRE呢？<ul><li>开发完的程序，需要运行一下看看效果。</li></ul></li></ul></li><li>D:JDK,JRE,JVM的作用和关系<h3 id="01-10-Java语言基础-JDK的下载和安装过程图解-了解"><a href="#01-10-Java语言基础-JDK的下载和安装过程图解-了解" class="headerlink" title="01.10_Java语言基础(JDK的下载和安装过程图解)(了解)"></a>01.10_Java语言基础(JDK的下载和安装过程图解)(了解)</h3></li><li>A:JDK的下载<ul><li>a:官网 <a href="http://www.oracle.com/">http://www.oracle.com</a></li><li>b:演示下载流程</li></ul></li><li>B:JDK的安装<ul><li>a:傻瓜式安装<ul><li>双击安装程序，然后一路next即可(但是不建议)</li></ul></li><li>b:安装的推荐方式<ul><li>安装路径不要有中文或者特殊符号如空格等。</li><li>所有和开发相关的软件最好安装目录统一。<ul><li>举例：我的JDK安装路径<ul><li>D:\develop\Java\jdk1.7.0_72</li></ul></li></ul></li><li>当提示安装JRE时，可以选择不安装。建议还是安装上。</li></ul></li><li>c:演示安装流程<ul><li>可以先在d盘建立一个文件夹develop</li><li>然后演示安装过程</li></ul></li></ul></li><li>C:验证安装是否成功<ul><li>a:通过DOS命令，切换到JDK安装的bin目录下。<ul><li>D:\develop\Java\jdk1.7.0_72\bin</li></ul></li><li>b:然后分别输入javac和java，如果正常显示一些内容，说明安装成功</li></ul></li></ul><h3 id="01-11-Java语言基础-JDK安装路径下的目录解释-了解"><a href="#01-11-Java语言基础-JDK安装路径下的目录解释-了解" class="headerlink" title="01.11_Java语言基础(JDK安装路径下的目录解释)(了解)"></a>01.11_Java语言基础(JDK安装路径下的目录解释)(了解)</h3><ul><li>a:bin目录：该目录用于存放一些可执行程序。<ul><li>如javac.exe（java编译器）、java.exe(java运行工具)，jar.exe(打包工具)和* javadoc.exe(文档生成工具)等。</li></ul></li><li>b:db目录：db目录是一个小型的数据库。<ul><li>从JDK 6.0开始，Java中引用了一个新的成员JavaDB，这是一个纯Java实现、开源的数据库管理系统。这个数据库不仅轻便，而且支持JDBC 4.0所有的规范，在学习JDBC 时，不再需要额外地安装一个数据库软件，选择直接使用JavaDB即可。</li></ul></li><li>c:jre目录：”jre”是 Java Runtime Environment 的缩写，意为Java程序运行时环境。此目录是Java运行时环境的根目录，它包括Java虚拟机，运行时的类包，Java应用启动器以及一个bin目录，但不包含开发环境中的开发工具。</li><li>d:include目录：由于JDK是通过C和C++实现的，因此在启动时需要引入一些C语言的头文件，该目录就是用于存放这些头文件的。</li><li>e:lib目录：lib是library的缩写，意为 Java 类库或库文件，是开发工具使用的归档包文件。</li><li>f:src.zip文件：src.zip为src文件夹的压缩文件，src中放置的是JDK核心类的源代码，通过该文件可以查看Java基础类的源代码。</li></ul><h3 id="01-12-Java语言基础-Java开发工具介绍-了解"><a href="#01-12-Java语言基础-Java开发工具介绍-了解" class="headerlink" title="01.12_Java语言基础(Java开发工具介绍)(了解)"></a>01.12_Java语言基础(Java开发工具介绍)(了解)</h3><ul><li>A:notepad(微软操作系统自带)</li><li>B:Editplus/Notepad++</li><li>C:Eclipse</li><li>D:MyEclipse<ul><li>给大家简单的介绍一下这些工具，然后说说我们使用这些工具的顺序。</li><li>入门：先notepad，然后Editplus，再Eclipse。</li><li>熟悉后：MyEclipse和Eclipse都用。</li></ul></li></ul><h3 id="01-13-Java语言基础-HelloWorld案例的编写和运行-掌握"><a href="#01-13-Java语言基础-HelloWorld案例的编写和运行-掌握" class="headerlink" title="01.13_Java语言基础(HelloWorld案例的编写和运行)(掌握)"></a>01.13_Java语言基础(HelloWorld案例的编写和运行)(掌握)</h3><ul><li><p>A:定义类</p></li><li><p>B:写main方法</p></li><li><p>C:写输出语句</p></li><li><p>D:Java程序开发运行与工作原理</p></li><li><p>E:编译和运行程序</p><pre><code>  class HelloWorld &#123;      public static void main(String[] args) &#123;          System.out.println(&quot;HelloWorld&quot;);      &#125;  &#125;</code></pre></li></ul><h3 id="01-14-Java语言基础-HelloWorld案例常见问题-掌握"><a href="#01-14-Java语言基础-HelloWorld案例常见问题-掌握" class="headerlink" title="01.14_Java语言基础(HelloWorld案例常见问题)(掌握)"></a>01.14_Java语言基础(HelloWorld案例常见问题)(掌握)</h3><ul><li>A:找不到文件(都演示一下，让学生看看出现的都是什么问题)<ul><li>a:文件扩展名隐藏导致编译失败</li><li>b:文件名写错了</li></ul></li><li>B:单词拼写问题(都演示一下，让学生看看出现的都是什么问题)<ul><li>a:class写成Class</li><li>b:String写成string</li><li>c:System写成system</li><li>d:main写成mian</li></ul></li><li>C:括号匹配问题(都演示一下，让学生看看出现的都是什么问题)<ul><li>a:把类体的那对大括号弄掉一个</li><li>b:把方法体的那对大括号弄掉一个</li><li>c:把输出语句的那对小括号弄掉一个</li></ul></li><li>D:中英文问题(都演示一下，让学生看看出现的都是什么问题)<ul><li>a:提示信息：错误: 非法字符: ????的格式</li><li>注意：java编程中需要的基本上都是英文字符</li></ul></li></ul><h3 id="01-15-Java语言基础-Java语言的书写格式-约定俗成-掌握"><a href="#01-15-Java语言基础-Java语言的书写格式-约定俗成-掌握" class="headerlink" title="01.15_Java语言基础(Java语言的书写格式(约定俗成))    (掌握)"></a>01.15_Java语言基础(Java语言的书写格式(约定俗成))    (掌握)</h3><ul><li>1,大括号要对齐,并且成对写</li><li>2,左大括号前面有空格</li><li>3,遇到左大括号要缩进,Tab</li><li>4,方法和程序块之间加空行让程序看起来清晰</li><li>5,并排语句之间加空格,例如for语句</li><li>6,运算符两侧加空格</li></ul><h3 id="01-16-Java语言基础-path环境变量的作用及配置方式1-掌握"><a href="#01-16-Java语言基础-path环境变量的作用及配置方式1-掌握" class="headerlink" title="01.16_Java语言基础(path环境变量的作用及配置方式1)(掌握)"></a>01.16_Java语言基础(path环境变量的作用及配置方式1)(掌握)</h3><ul><li>A:在JDK的bin目录下开发程序容易产生的问题<ul><li>a:如果文件过多，不方便管理</li><li>b:删除自己写过的不需要的文件，可能不小心把JDK自带的工具给删除了</li></ul></li><li>B:如何解决问题呢<ul><li>notepad这样的命令为什么在任何路径下都能够执行,配置path环境变量</li></ul></li><li>C:配置方式<ul><li>a:xp系统<ul><li>右键点击桌面计算机→选择属性→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。</li></ul></li><li>b:win7/win8系统<ul><li>右键点击桌面计算机→选择属性→选择高级系统设置→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。</li></ul></li></ul></li><li>path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件</li></ul><h3 id="01-17-Java语言基础-Path环境变量的配置方式2-掌握"><a href="#01-17-Java语言基础-Path环境变量的配置方式2-掌握" class="headerlink" title="01.17_Java语言基础(Path环境变量的配置方式2)(掌握)"></a>01.17_Java语言基础(Path环境变量的配置方式2)(掌握)</h3><ul><li>A:先配置JAVA_HOME</li><li>B:再修改path</li><li>C:最后说一下path是有先后顺序关系的</li></ul><p>###01.18_Java语言基础(classpath环境变量的作用及其配置)(了解)</p><ul><li><p>A:为什么要配置classpath</p></li><li><p>B:classpath配置的原理</p></li><li><p>C:如何配置classpath</p></li><li><p>path和classpath的区别</p><ul><li>path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件</li><li>classpath配置的java的类文件,就是.class文件</li></ul></li></ul><h3 id="01-19-Java语言基础-Editplus开发程序并编译运行-了解"><a href="#01-19-Java语言基础-Editplus开发程序并编译运行-了解" class="headerlink" title="01.19_Java语言基础(Editplus开发程序并编译运行)(了解)"></a>01.19_Java语言基础(Editplus开发程序并编译运行)(了解)</h3><ul><li>A:配置快捷键编译运行</li><li>B:去除备份文件</li></ul><p>###01.20_Java语言基础(注释概述及其分类)(掌握)</p><ul><li><p>A:什么是注释</p></li><li><p>B:注释的分类及讲解</p><ul><li>文档注释目前不讲，说后面讲解</li></ul></li><li><p>注释的作用</p><ul><li>A:解释说明程序</li><li>B:帮助我们调试错误</li></ul></li></ul><h3 id="01-21-Java语言基础-关键字的概述和使用-掌握"><a href="#01-21-Java语言基础-关键字的概述和使用-掌握" class="headerlink" title="01.21_Java语言基础(关键字的概述和使用)(掌握)"></a>01.21_Java语言基础(关键字的概述和使用)(掌握)</h3><ul><li>A:什么是关键字<ul><li>被Java语言赋予特定含义的单词 </li></ul></li><li>B:关键字的特点<ul><li>组成关键字的字母全部小写 </li></ul></li><li>C:常见关键字<ul><li>public static void class等 </li></ul></li><li>D:关键字的注意事项<ul><li>goto和const作为保留字存在,目前并不使用,类似Editplus这样的高级记事本,针对关键字有特殊的颜色标记，非常直观 </li></ul></li></ul><h3 id="01-22-Java语言基础-标识符的概述和组成规则-掌握"><a href="#01-22-Java语言基础-标识符的概述和组成规则-掌握" class="headerlink" title="01.22_Java语言基础(标识符的概述和组成规则)(掌握)"></a>01.22_Java语言基础(标识符的概述和组成规则)(掌握)</h3><ul><li>A:什么是标识符<ul><li>就是给类,接口,方法,变量等起名字时使用的字符序列 </li></ul></li><li>B:标识符的组成规则<ul><li>英文大小写字母</li><li>数字字符</li><li>$和_ </li></ul></li><li>C:标识符注意事项<ul><li>1,不能使用关键字</li><li>2,不能数字开头 </li></ul></li></ul><h3 id="01-23-Java语言基础-标识符中常见的命名规则-了解"><a href="#01-23-Java语言基础-标识符中常见的命名规则-了解" class="headerlink" title="01.23_Java语言基础(标识符中常见的命名规则)(了解)"></a>01.23_Java语言基础(标识符中常见的命名规则)(了解)</h3><ul><li>见名知意</li><li>A:包<ul><li>最好是域名倒过来,要求所有的字母小写 </li></ul></li><li>B:类或者接口<ul><li>如果是一个单词首字母大写</li><li>如果是多个单词每个单词首字母大写(驼峰标识) </li></ul></li><li>C:方法或者变量<ul><li>如果是一个单词全部小写</li><li>如果是多个单词,从第二个单词首字母大写 </li></ul></li><li>D:常量<ul><li>如果是一个单词,所有字母大写</li><li>如果是多个单词,所有的单词大写,用下划线区分每个单词 </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础03-逻辑运算符</title>
      <link href="/2020/05/21/Java%E5%9F%BA%E7%A1%8003-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/05/21/Java%E5%9F%BA%E7%A1%8003-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="03-01-Java语言基础-逻辑运算符的基本用法-掌握"><a href="#03-01-Java语言基础-逻辑运算符的基本用法-掌握" class="headerlink" title="03.01_Java语言基础(逻辑运算符的基本用法)(掌握)"></a>03.01_Java语言基础(逻辑运算符的基本用法)(掌握)</h3><ul><li><p>A:逻辑运算符有哪些</p><ul><li>&amp;,|,^,!</li><li>&amp;&amp;,|| </li></ul></li><li><p>B:案例演示</p></li><li><p>逻辑运算符的基本用法</p></li><li><p>注意事项：</p><ul><li>a:逻辑运算符一般用于连接boolean类型的表达式或者值。</li><li>b:表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。<ul><li>算术表达式：a + b</li><li>比较表达式：a == b(条件表达式)</li></ul></li></ul></li><li><p>C:结论：</p></li><li><p>&amp;逻辑与:有false则false。</p></li><li><p>|逻辑或:有true则true。</p></li><li><p>^逻辑异或:相同为false，不同为true。</p></li><li><p>!逻辑非:非false则true，非true则false。</p><ul><li>特点：偶数个不改变本身</li></ul></li></ul><p>###03.02_Java语言基础(逻辑运算符&amp;&amp;和&amp;的区别)(掌握)</p><ul><li>A:案例演示<ul><li>&amp;&amp;和&amp;的区别?<ul><li>a:最终结果一样。</li><li>b:&amp;&amp;具有短路效果。左边是false，右边不执行。</li><li>&amp;是无论左边是false还是true,右边都会执行</li></ul></li></ul></li><li>B:同理||和|的区别?(学生自学)</li></ul><ol><li><p>区别一：</p><ul><li>定义不同：||和|都是表示“或”，区别是||只要满足第一个条件，后面的条件就不再判断，而|要百对所有的条件进行判断。</li></ul></li><li><p>区别二：</p><ul><li>与操作和或操作的区别<ul><li>（1）在Java程序中，使用与操作，要求所有表达式的判断结果都是TRUE，才为真，若有一度个为FALSE，那么最终判断结果则为FALSE</li><li>（2）使用或操作，只要其中有问一个表达式为TRUE，那么最终的结果就为TRUE，只有当所有的表达式为FALSE时最终结果才为FALSE</li></ul></li></ul></li><li><p>区别三：</p></li></ol><ul><li>实际含义不同：<ul><li>“||”:   如果左边计算后答的操作数为true,右边则不再执行，返回true；</li><li>“|”：前后两个操作数都会进行计算。也就是说：“|”不存在短路。</li></ul></li></ul><ul><li>C:开发中常用谁?<ul><li>&amp;&amp;,||,!</li></ul></li></ul><h3 id="03-03-Java语言基础-位运算符的基本用法1-了解"><a href="#03-03-Java语言基础-位运算符的基本用法1-了解" class="headerlink" title="03.03_Java语言基础(位运算符的基本用法1)(了解)"></a>03.03_Java语言基础(位运算符的基本用法1)(了解)</h3><ul><li><p>A:位运算符有哪些</p><ul><li>&amp;,|,^,~ ,&gt;&gt;,&gt;&gt;&gt;,&lt;&lt;</li></ul></li><li><p>B:案例演示</p><ul><li><p>位运算符的基本用法1</p></li><li><p>&amp;,|,^,~ 的用法</p></li><li><p>&amp;:有0则0</p></li><li><p>|:有1则1</p></li><li><p>^:相同则0，不同则1</p></li><li><p>~:按位取反</p></li></ul></li></ul><h3 id="03-04-Java语言基础-位异或运算符的特点及面试题-掌握"><a href="#03-04-Java语言基础-位异或运算符的特点及面试题-掌握" class="headerlink" title="03.04_Java语言基础(位异或运算符的特点及面试题)(掌握)"></a>03.04_Java语言基础(位异或运算符的特点及面试题)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li><p>位异或运算符的特点</p></li><li><p>^的特点：一个数据对另一个数据位异或两次，该数本身不变。</p></li></ul></li><li><p>B:面试题：</p><ul><li>请自己实现两个整数变量的交换</li></ul></li></ul><ol><li><p>方法一（加减法）：</p><ul><li>a = a + b;</li><li>b = a - b;</li><li>a = a - b;</li></ul></li><li><p>方法二（异或运算）：</p></li></ol><ul><li>a = a ^ b;</li><li>b = a ^ b;</li><li>a = a ^ b;<ul><li>注意：以后讲课的过程中，我没有明确指定数据的类型，默认int类型。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">          <span class="keyword">int</span> m=<span class="number">2</span>,n=<span class="number">3</span>;</span><br><span class="line">          <span class="comment">//method_1(m, n);</span></span><br><span class="line">          method_2(m, n);     </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用异或^</span></span><br><span class="line"><span class="comment">    *明白一个数，如果异或同一个数两次，那么就等于本身e799bee5baa6e79fa5e98193e4b893e5b19e31333363376439</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_3</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">          m=m^n;</span><br><span class="line">          n=m^n;</span><br><span class="line">          m=m^n;</span><br><span class="line">          System.out.println(<span class="string">&quot;m=&quot;</span>+m+<span class="string">&quot;\tn=&quot;</span>+n);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用自身的数组，加减运算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_2</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">           m=m+n;</span><br><span class="line">           n=m-n;</span><br><span class="line">           m=m-n;</span><br><span class="line">           System.out.println(<span class="string">&quot;m=&quot;</span>+m+<span class="string">&quot;\tn=&quot;</span>+n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="03-05-Java语言基础-位运算符的基本用法2及面试题-了解"><a href="#03-05-Java语言基础-位运算符的基本用法2及面试题-了解" class="headerlink" title="03.05_Java语言基础(位运算符的基本用法2及面试题)(了解)"></a>03.05_Java语言基础(位运算符的基本用法2及面试题)(了解)</h3><ul><li>A:案例演示 &gt;&gt;,&gt;&gt;&gt;,&lt;&lt;的用法:<ul><li>&lt;&lt;:左移    左边最高位丢弃，右边补齐0</li><li><blockquote><blockquote><p>:右移    最高位是0，左边补齐0;最高为是1，左边补齐1</p></blockquote></blockquote></li><li><blockquote><blockquote><blockquote><p>:无符号右移 无论最高位是0还是1，左边补齐0</p></blockquote></blockquote></blockquote></li><li>最有效率的算出2 * 8的结果</li></ul></li></ul><h3 id="03-06-Java语言基础-三元运算符的基本用法-掌握"><a href="#03-06-Java语言基础-三元运算符的基本用法-掌握" class="headerlink" title="03.06_Java语言基础(三元运算符的基本用法)(掌握)"></a>03.06_Java语言基础(三元运算符的基本用法)(掌握)</h3><ul><li>A:三元运算符的格式</li><li>(关系表达式) ? 表达式1 : 表达式2;</li><li>B:三元运算符的执行流程 </li><li>C:案例演示<ul><li>获取两个数中的最大值</li></ul></li></ul><h3 id="03-07-Java语言基础-三元运算符的练习-掌握"><a href="#03-07-Java语言基础-三元运算符的练习-掌握" class="headerlink" title="03.07_Java语言基础(三元运算符的练习)(掌握)"></a>03.07_Java语言基础(三元运算符的练习)(掌握)</h3><ul><li>A:案例演示<ul><li>比较两个整数是否相同</li></ul></li><li>B:案例演示<ul><li>获取三个整数中的最大值</li></ul></li></ul><h3 id="03-08-Java语言基础-键盘录入的基本格式讲解-掌握"><a href="#03-08-Java语言基础-键盘录入的基本格式讲解-掌握" class="headerlink" title="03.08_Java语言基础(键盘录入的基本格式讲解)(掌握)"></a>03.08_Java语言基础(键盘录入的基本格式讲解)(掌握)</h3><ul><li>A:为什么要使用键盘录入数据<ul><li>a:为了让程序的数据更符合开发的数据</li><li>b:让程序更灵活一下</li></ul></li><li>B:如何实现键盘录入呢?<ul><li>先照格式来。</li><li>a:导包<ul><li>格式：<ul><li>import java.util.Scanner; </li></ul></li><li>位置：<ul><li>在class上面。</li></ul></li></ul></li><li>b:创建键盘录入对象<ul><li>格式：<ul><li>Scanner sc = new Scanner(System.in);</li></ul></li></ul></li><li>c:通过对象获取数据    <ul><li>格式：<ul><li>int x = sc.nextInt();</li></ul></li></ul></li></ul></li><li>C:案例演示<ul><li>键盘录入1个整数，并输出到控制台。</li><li>键盘录入2个整数，并输出到控制台。</li></ul></li></ul><h3 id="03-09-Java语言基础-键盘录入的练习1-掌握"><a href="#03-09-Java语言基础-键盘录入的练习1-掌握" class="headerlink" title="03.09_Java语言基础(键盘录入的练习1)(掌握)"></a>03.09_Java语言基础(键盘录入的练习1)(掌握)</h3><ul><li>A:案例演示<ul><li>键盘录入练习：键盘录入两个数据，并对这两个数据求和，输出其结果</li></ul></li><li>B:案例演示<ul><li>键盘录入练习：键盘录入两个数据，获取这两个数据中的最大值</li></ul></li></ul><h3 id="03-10-Java语言基础-键盘录入的练习2-掌握"><a href="#03-10-Java语言基础-键盘录入的练习2-掌握" class="headerlink" title="03.10_Java语言基础(键盘录入的练习2)(掌握)"></a>03.10_Java语言基础(键盘录入的练习2)(掌握)</h3><ul><li>A:案例演示<ul><li>键盘录入练习：键盘录入两个数据，比较这两个数据是否相等</li></ul></li><li>B:案例演示<ul><li>键盘录入练习：键盘录入三个数据，获取这三个数据中的最大值</li></ul></li></ul><h3 id="03-11-Java语言基础-顺序结构语句-了解"><a href="#03-11-Java语言基础-顺序结构语句-了解" class="headerlink" title="03.11_Java语言基础(顺序结构语句)(了解)"></a>03.11_Java语言基础(顺序结构语句)(了解)</h3><ul><li>A:什么是流程控制语句<ul><li>流程控制语句：可以控制程序的执行流程。</li></ul></li><li>B:流程控制语句的分类<ul><li>顺序结构</li><li>选择结构</li><li>循环结构</li></ul></li><li>C:执行流程：<ul><li>从上往下，依次执行。</li></ul></li><li>D:案例演示<ul><li>输出几句话看效果即可</li></ul></li></ul><h3 id="03-12-Java语言基础-选择结构if语句格式1及其使用-掌握"><a href="#03-12-Java语言基础-选择结构if语句格式1及其使用-掌握" class="headerlink" title="03.12_Java语言基础(选择结构if语句格式1及其使用)(掌握)"></a>03.12_Java语言基础(选择结构if语句格式1及其使用)(掌握)</h3><ul><li>A:选择结构的分类<ul><li>if语句</li><li>switch语句</li></ul></li><li>B:if语句有几种格式<ul><li>格式1</li><li>格式2</li><li>格式3</li></ul></li><li>C:if语句的格式1</li><li><pre><code>  if(比较表达式) &#123;      语句体;  &#125;</code></pre></li><li>D:执行流程：<ul><li>先计算比较表达式的值，看其返回值是true还是false。</li><li>如果是true，就执行语句体；</li><li>如果是false，就不执行语句体；</li></ul></li></ul><h3 id="03-13-Java语言基础-选择结构if语句注意事项-掌握"><a href="#03-13-Java语言基础-选择结构if语句注意事项-掌握" class="headerlink" title="03.13_Java语言基础(选择结构if语句注意事项)(掌握)"></a>03.13_Java语言基础(选择结构if语句注意事项)(掌握)</h3><ul><li>A:案例演示<ul><li>a:比较表达式无论简单还是复杂，结果必须是boolean类型</li><li>b:if语句控制的语句体如果是一条语句，大括号可以省略；<ul><li>如果是多条语句，就不能省略。建议永远不要省略。</li></ul></li><li>c:一般来说：有左大括号就没有分号，有分号就没有左大括号</li></ul></li></ul><h3 id="03-14-Java语言基础-选择结构if语句格式2及其使用-掌握"><a href="#03-14-Java语言基础-选择结构if语句格式2及其使用-掌握" class="headerlink" title="03.14_Java语言基础(选择结构if语句格式2及其使用)(掌握)"></a>03.14_Java语言基础(选择结构if语句格式2及其使用)(掌握)</h3><ul><li><p>A:if语句的格式2</p></li><li><pre><code>  if(比较表达式) &#123;      语句体1;  &#125;else &#123;      语句体2;  &#125;</code></pre></li><li><p>B:执行流程：</p><ul><li>首先计算比较表达式的值，看其返回值是true还是false。</li><li>如果是true，就执行语句体1；</li><li>如果是false，就执行语句体2；</li></ul></li><li><p>C:案例演示</p><ul><li><p>a:获取两个数据中较大的值</p></li><li><p>b:判断一个数据是奇数还是偶数,并输出是奇数还是偶数</p></li><li><p>注意事项：else后面是没有比较表达式的，只有if后面有。</p></li></ul></li></ul><h3 id="03-15-Java语言基础-if语句的格式2和三元的相互转换问题-掌握"><a href="#03-15-Java语言基础-if语句的格式2和三元的相互转换问题-掌握" class="headerlink" title="03.15_Java语言基础(if语句的格式2和三元的相互转换问题)(掌握)"></a>03.15_Java语言基础(if语句的格式2和三元的相互转换问题)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li>if语句和三元运算符完成同一个效果</li></ul></li><li><p>B:案例演示</p><ul><li><p>if语句和三元运算符的区别</p></li><li><p>三元运算符实现的，都可以采用if语句实现。反之不成立。</p></li><li><p>什么时候if语句实现不能用三元改进呢?</p><ul><li>当if语句控制的操作是一个输出语句的时候就不能。</li><li>为什么呢?因为三元运算符是一个运算符，运算符操作完毕就应该有一个结果，而不是一个输出。</li></ul></li></ul></li></ul><h3 id="03-16-Java语言基础-选择结构if语句格式3及其使用-掌握"><a href="#03-16-Java语言基础-选择结构if语句格式3及其使用-掌握" class="headerlink" title="03.16_Java语言基础(选择结构if语句格式3及其使用)(掌握)"></a>03.16_Java语言基础(选择结构if语句格式3及其使用)(掌握)</h3><ul><li><p>A:if语句的格式3：</p></li><li><pre><code>  if(比较表达式1) &#123;      语句体1;  &#125;else if(比较表达式2) &#123;      语句体2;  &#125;else if(比较表达式3) &#123;      语句体3;  &#125;  ...  else &#123;      语句体n+1;  &#125;</code></pre></li><li><p>B:执行流程：</p><ul><li><p>首先计算比较表达式1看其返回值是true还是false，</p></li><li><p>如果是true，就执行语句体1，if语句结束。</p></li><li><p>如果是false，接着计算比较表达式2看其返回值是true还是false，</p></li><li><p>如果是true，就执行语句体2，if语句结束。</p></li><li><p>如果是false，接着计算比较表达式3看其返回值是true还是false，</p></li><li><p>如果都是false，就执行语句体n+1。</p></li></ul></li><li><p>C:注意事项:最后一个else可以省略,但是建议不要省略,可以对范围外的错误值提示 </p></li></ul><h3 id="03-17-Java语言基础-选择结构if语句格式3练习-掌握"><a href="#03-17-Java语言基础-选择结构if语句格式3练习-掌握" class="headerlink" title="03.17_Java语言基础(选择结构if语句格式3练习)(掌握)"></a>03.17_Java语言基础(选择结构if语句格式3练习)(掌握)</h3><ul><li><p>A:练习1</p></li><li><pre><code>  需求：键盘录入一个成绩，判断并输出成绩的等级。  90-100 优  80-89  良  70-79  中  60-69  及  0-59   差</code></pre></li><li><p>B:练习2</p><ul><li><p>需求：</p><ul><li><p>键盘录入x的值，计算出y的并输出。</p></li><li><p>x&gt;=3    y = 2 * x + 1;</p></li><li><p>-1&lt;x&lt;3    y = 2 * x;</p></li><li><p>x&lt;=-1    y = 2 * x - 1;</p></li></ul></li></ul></li></ul><h3 id="03-18-Java语言基础-选择结构if语句的嵌套使用-掌握"><a href="#03-18-Java语言基础-选择结构if语句的嵌套使用-掌握" class="headerlink" title="03.18_Java语言基础(选择结构if语句的嵌套使用)(掌握)"></a>03.18_Java语言基础(选择结构if语句的嵌套使用)(掌握)</h3><ul><li>A:案例演示<ul><li>需求：获取三个数据中的最大值</li><li>if语句的嵌套使用。</li></ul></li></ul><h3 id="03-19-Java语言基础-选择结构switch语句的格式及其解释-掌握"><a href="#03-19-Java语言基础-选择结构switch语句的格式及其解释-掌握" class="headerlink" title="03.19_Java语言基础(选择结构switch语句的格式及其解释)(掌握)"></a>03.19_Java语言基础(选择结构switch语句的格式及其解释)(掌握)</h3><ul><li><p>A:switch语句的格式</p></li><li><pre><code>  switch(表达式) &#123;        case 值1：          语句体1;          break;          case 值2：          语句体2;          break;          …          default：              语句体n+1;          break;  &#125;</code></pre></li><li><p>B:switch语句的格式解释</p></li><li><p>C:面试题</p><ul><li>byte可以作为switch的表达式吗?</li><li>long可以作为switch的表达式吗?</li><li>String可以作为switch的表达式吗?<br>答：   switch后面的表达式可以跟数据类型:int,short,char,byte<pre><code>  JDK1.5(包含)以后 表达式可以是枚举类型(enum)(第二阶段---&gt; jdk新特性 ) (引用类型)  JDK1.7(包含)以后 表达式可以是String类型  long不可以作为switch中的表达式</code></pre></li></ul></li><li><p>C:执行流程</p><ul><li>先计算表达式的值</li><li>然后和case后面的匹配，如果有就执行对应的语句，否则执行default控制的语句</li></ul></li></ul><h3 id="03-20-Java语言基础-选择结构switch语句的练习-掌握"><a href="#03-20-Java语言基础-选择结构switch语句的练习-掌握" class="headerlink" title="03.20_Java语言基础(选择结构switch语句的练习)(掌握)"></a>03.20_Java语言基础(选择结构switch语句的练习)(掌握)</h3><ul><li>A:整数(给定一个值,输出对应星期几)</li></ul><h3 id="03-21-Java语言基础-选择结构switch语句的注意事项-掌握"><a href="#03-21-Java语言基础-选择结构switch语句的注意事项-掌握" class="headerlink" title="03.21_Java语言基础(选择结构switch语句的注意事项)(掌握)"></a>03.21_Java语言基础(选择结构switch语句的注意事项)(掌握)</h3><ul><li>A:案例演示<ul><li>a:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的</li><li>b:default可以省略吗?<ul><li>可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。</li><li>特殊情况：<ul><li>case就可以把值固定。</li><li>A,B,C,D</li></ul></li></ul></li><li>c:break可以省略吗?<ul><li>最后一个可以省略,其他最好不要省略</li><li>会出现一个现象：case穿透。</li><li>最终我们建议不要省略</li></ul></li><li>d:default一定要在最后吗?<ul><li>不是，可以在任意位置。但是建议在最后。</li></ul></li><li>e:switch语句的结束条件<ul><li>a:遇到break就结束了</li><li>b:执行到switch的右大括号就结束了</li></ul></li></ul></li></ul><p>###03.22_Java语言基础(选择结构switch语句练习)(掌握)</p><ul><li><p>A:看程序写结果：</p></li><li><pre><code>  int x = 2;  int y = 3;  switch(x)&#123;      default:          y++;          break;      case 3:          y++;      case 4:          y++;  &#125;  System.out.println(&quot;y=&quot;+y);</code></pre></li><li><p>B:看程序写结果：</p></li><li><pre><code>  int x = 2;  int y = 3;  switch(x)&#123;      default:          y++;      case 3:          y++;      case 4:          y++;  &#125;  System.out.println(&quot;y=&quot;+y);</code></pre></li></ul><h3 id="03-23-Java语言基础-选择结构if语句和switch语句的区别-掌握"><a href="#03-23-Java语言基础-选择结构if语句和switch语句的区别-掌握" class="headerlink" title="03.23_Java语言基础(选择结构if语句和switch语句的区别)(掌握)"></a>03.23_Java语言基础(选择结构if语句和switch语句的区别)(掌握)</h3><ul><li>A:总结switch语句和if语句的各自使用场景</li><li>switch建议判断固定值的时候用</li><li>if建议判断区间或范围的时候用</li><li>B:案例演示<ul><li>分别用switch语句和if语句实现下列需求：<ul><li>键盘录入月份，输出对应的季节</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchIf</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 键盘录入月份，输出对应的季节</span></span><br><span class="line"><span class="comment">        一年有四季</span></span><br><span class="line"><span class="comment">        3,4,5春季</span></span><br><span class="line"><span class="comment">        6,7,8夏季</span></span><br><span class="line"><span class="comment">        9,10,11秋季</span></span><br><span class="line"><span class="comment">        12,1,2冬季</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);    <span class="comment">//创建键盘录入对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入月份&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> month = sc.nextInt();                <span class="comment">//将键盘录入的结果存储在month</span></span><br><span class="line">        <span class="comment">/*switch (month) &#123;</span></span><br><span class="line"><span class="comment">        case 3:</span></span><br><span class="line"><span class="comment">        case 4:</span></span><br><span class="line"><span class="comment">        case 5:</span></span><br><span class="line"><span class="comment">            System.out.println(month + &quot;月是春季&quot;);</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">        case 6:</span></span><br><span class="line"><span class="comment">        case 7:</span></span><br><span class="line"><span class="comment">        case 8:</span></span><br><span class="line"><span class="comment">            System.out.println(month + &quot;月是夏季&quot;);</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">        case 9:</span></span><br><span class="line"><span class="comment">        case 10:</span></span><br><span class="line"><span class="comment">        case 11:</span></span><br><span class="line"><span class="comment">            System.out.println(month + &quot;月是秋季&quot;);</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">        case 12:</span></span><br><span class="line"><span class="comment">        case 1:</span></span><br><span class="line"><span class="comment">        case 2:</span></span><br><span class="line"><span class="comment">            System.out.println(month + &quot;月是冬季&quot;);</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">        default:</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;对不起没有对应的季节&quot;);</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//用if语句来完成月份对应季节</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (month &gt; <span class="number">12</span> || month &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起没有对应的季节&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (month &gt;= <span class="number">3</span> &amp;&amp; month &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(month + <span class="string">&quot;月是春季&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (month &gt;= <span class="number">6</span> &amp;&amp; month &lt;= <span class="number">8</span>) &#123;</span><br><span class="line">            System.out.println(month + <span class="string">&quot;月是夏季&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (month &gt;= <span class="number">9</span> &amp;&amp; month &lt;= <span class="number">11</span>) &#123;</span><br><span class="line">            System.out.println(month + <span class="string">&quot;月是秋季&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(month + <span class="string">&quot;月是冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年踩过的坑</title>
      <link href="/2020/05/19/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
      <url>/2020/05/19/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础方面陷阱"><a href="#Java基础方面陷阱" class="headerlink" title="Java基础方面陷阱"></a>Java基础方面陷阱</h1><p><em>其实这些坑，很大程度在于一些细节，或者是对基本的语法不是很了解</em></p><h3 id="什么是陷阱"><a href="#什么是陷阱" class="headerlink" title="什么是陷阱"></a>什么是陷阱</h3><ul><li>简洁的定义:陷阱，是指那些能够正常编译，但是在执行时却产生事与愿违的，有时候甚至是灾难性后果的程序代码。</li><li>广义的定义:任何可能导致程序员把大量的时间浪费在开发工具的使用上而不是最终软件的进展上的语言特性、API或系统，都可以称呼为陷阱。</li></ul><h3 id="如何分析"><a href="#如何分析" class="headerlink" title="如何分析"></a>如何分析</h3><ul><li>首先找到是哪一个代码造成的问题，陷阱的类型是什么。</li><li>问题的根源<ul><li>这个是揭示陷阱最重要的一个部分，我们要深入底层，了解可能导致程序员绊脚的详细内部工作过程、无效的假设或者API的缺陷。</li></ul></li><li>解决方案<ul><li>这个是分析陷阱的最后一个步骤，最终给出一个程序实现和运行结果。</li></ul></li></ul><h3 id="例1：找奇数"><a href="#例1：找奇数" class="headerlink" title="例1：找奇数"></a>例1：找奇数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i % <span class="number">2</span> != <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(isOdd(<span class="number">1</span>));</span><br><span class="line">System.out.println(isOdd(<span class="number">2</span>));</span><br><span class="line">System.out.println(isOdd(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想一下这个条件：i % 2 != 1;当把1、2、3输入进去时，结果好像也对哦，但是就是少了一方面。<br>所以答案应该是：i % 2 != 0，正负数都是可以用的了</p><h3 id="例2：浮点数相减"><a href="#例2：浮点数相减" class="headerlink" title="例2：浮点数相减"></a>例2：浮点数相减</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="number">2.0</span> - <span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个2.0 - 1.1，一开始我以为结果是0.9的，结果一运行才发现0.8999999999999999<br>应该改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;2.0&quot;</span>).subtract(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.1&quot;</span>)));</span><br><span class="line">System.out.printf(<span class="string">&quot;%.1f&quot;</span>, <span class="number">2.0</span>-<span class="number">1.1</span>);</span><br></pre></td></tr></table></figure><h3 id="例3：长整除"><a href="#例3：长整除" class="headerlink" title="例3：长整除"></a>例3：长整除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> MICROS_PER_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> MILLIS_PER_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>; </span><br><span class="line">System.out.println(MICROS_PER_DAY/MILLIS_PER_DAY); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个我们看起来可以约分似的，以为结果肯定就是1000了，然而并非是这样。。<br>要换成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> MICROS_PER_DAY = <span class="number">24L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> MILLIS_PER_DAY = <span class="number">24L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>; </span><br></pre></td></tr></table></figure><h3 id="例4：互换内容"><a href="#例4：互换内容" class="headerlink" title="例4：互换内容"></a>例4：互换内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1984</span>; </span><br><span class="line"><span class="keyword">int</span> y = <span class="number">2001</span>; </span><br><span class="line">x^= y^= x^= y; </span><br><span class="line">System.out.println(<span class="string">&quot;x= &quot;</span> + x + <span class="string">&quot;; y= &quot;</span> + y); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>互相交换两位数，平时我们要加一个中间数，这里的话，不需要也可以，但是这道题。。<br>应该改为：y=(x^= (y^= x))^ y; </p><h3 id="例5：字符串和字符"><a href="#例5：字符串和字符" class="headerlink" title="例5：字符串和字符"></a>例5：字符串和字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;H&quot;</span> + <span class="string">&quot;a&quot;</span>);  <span class="comment">//Ha</span></span><br><span class="line">System.out.println(<span class="string">&#x27;H&#x27;</span> + <span class="string">&#x27;a&#x27;</span>);  <span class="comment">//169</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个字符与字符串两个之间..</p><h3 id="例6：字符数组"><a href="#例6：字符数组" class="headerlink" title="例6：字符数组"></a>例6：字符数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  String letters = <span class="string">&quot;ABC&quot;</span>; </span><br><span class="line">  <span class="keyword">char</span>[] numbers = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;; </span><br><span class="line">  System.out.println(letters + <span class="string">&quot; easy as &quot;</span> + numbers); </span><br><span class="line"> <span class="comment">//结果是：ABC easy as [C@7852e922</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">结果是：ABC easy as <span class="number">123</span> ？？？</span><br><span class="line">改为：</span><br><span class="line">```java</span><br><span class="line">System.out.print(letters + <span class="string">&quot; easy as &quot;</span> ); </span><br><span class="line">  System.out.print(numbers); </span><br></pre></td></tr></table></figure><h3 id="例7：转义字符"><a href="#例7：转义字符" class="headerlink" title="例7：转义字符"></a>例7：转义字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a\u0022.length() +\u0022b&quot;</span>.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.length() +<span class="string">&quot;b&quot;</span>.length()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>\u0022表示第34号的unicode字符 “ 双引号<br>运行结果：2 2</p><h3 id="例8：打印输出类名"><a href="#例8：打印输出类名" class="headerlink" title="例8：打印输出类名"></a>例8：打印输出类名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(</span><br><span class="line">  MyClass.class.getName(). </span><br><span class="line">          replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 例9：随机数的问题</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Random rnd = <span class="keyword">new</span> Random(); </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     StringBuffer word = <span class="keyword">null</span>; </span><br><span class="line">     <span class="keyword">switch</span>(rnd.nextInt(<span class="number">3</span>)) &#123; </span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:  word = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;P&quot;</span>);<span class="keyword">break</span>; </span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:  word = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;G&quot;</span>);<span class="keyword">break</span>; </span><br><span class="line">         <span class="keyword">default</span>: word = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;M&quot;</span>); </span><br><span class="line">     &#125; </span><br><span class="line">     word.append(<span class="string">&#x27;a&#x27;</span>); </span><br><span class="line">     word.append(<span class="string">&#x27;i&#x27;</span>); </span><br><span class="line">     word.append(<span class="string">&#x27;n&#x27;</span>); </span><br><span class="line">     System.out.println(word); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：Main</p><h3 id="例10-增量操作"><a href="#例10-增量操作" class="headerlink" title="例10:增量操作"></a>例10:增量操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123; </span><br><span class="line">          j = j++; </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(j); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果是：0</p><h3 id="例11：整数边界的问题"><a href="#例11：整数边界的问题" class="headerlink" title="例11：整数边界的问题"></a>例11：整数边界的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> END = Integer.MAX_VALUE; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START = END - <span class="number">100</span>; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = START; i &lt;= END; i++) </span><br><span class="line">      count++; </span><br><span class="line">  System.out.println(count); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例12：计数器的问题"><a href="#例12：计数器的问题" class="headerlink" title="例12：计数器的问题"></a>例12：计数器的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> minutes = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ms = <span class="number">0</span>; ms &lt; <span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>; ms++) </span><br><span class="line">      <span class="keyword">if</span> (ms % <span class="number">60</span>*<span class="number">1000</span> == <span class="number">0</span>) </span><br><span class="line">          minutes++; </span><br><span class="line">  System.out.println(minutes); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例13：优柔寡断的返回值"><a href="#例13：优柔寡断的返回值" class="headerlink" title="例13：优柔寡断的返回值"></a>例13：优柔寡断的返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(decision()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">decision</span><span class="params">()</span> </span>&#123; </span><br><span class="line">     <span class="keyword">try</span> &#123; </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;  </span><br></pre></td></tr></table></figure><h3 id="例14：你好，再见"><a href="#例14：你好，再见" class="headerlink" title="例14：你好，再见"></a>例14：你好，再见</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>); </span><br><span class="line">        System.exit(<span class="number">0</span>); </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;Goodbye world&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例15：到底关闭了吗"><a href="#例15：到底关闭了吗" class="headerlink" title="例15：到底关闭了吗"></a>例15：到底关闭了吗</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String src, String dest)</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">        InputStream in = <span class="keyword">null</span>; </span><br><span class="line">        OutputStream out = <span class="keyword">null</span>; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(src); </span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(dest); </span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; </span><br><span class="line">            <span class="keyword">int</span> n; </span><br><span class="line">            <span class="keyword">while</span> ((n = in.read(buf)) &gt; <span class="number">0</span>) </span><br><span class="line">                out.write(buf, <span class="number">0</span>, n); </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) in.close(); </span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) out.close(); </span><br><span class="line">        &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Vue前后端分离</title>
      <link href="/2020/05/16/SpringBoot-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
      <url>/2020/05/16/SpringBoot-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Vue-前后端分离开发"><a href="#SpringBoot-Vue-前后端分离开发" class="headerlink" title="SpringBoot-Vue 前后端分离开发"></a>SpringBoot-Vue 前后端分离开发</h1><h2 id="安装Vue-js"><a href="#安装Vue-js" class="headerlink" title="安装Vue.js"></a>安装Vue.js</h2><ul><li>vue安装最新版本 npm install -g @vue/cli 或 yarn global add @vue/cli</li><li>Win + R 输入vue -V 或者vue -version , 出现版本号即Vue可安装完成。</li><li>继续输入vue ui（vue要3.0以上版本才行） ,启动项目，会自动跳转<a href="http://localhost:8080/%E9%A1%B5%E9%9D%A2%E3%80%82">http://localhost:8080/页面。</a></li><li>然后可创建项目vue项目进行开发啦。</li></ul><h3 id="IEDA导入前端工程"><a href="#IEDA导入前端工程" class="headerlink" title="IEDA导入前端工程"></a>IEDA导入前端工程</h3><h3 id="IDEA启动项目"><a href="#IDEA启动项目" class="headerlink" title="IDEA启动项目"></a>IDEA启动项目</h3><ul><li>打开Terminal 输入npm run serve即可。</li></ul><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/vuetest%E7%9B%AE%E5%BD%95.png" alt="vuetest结构"></p><h3 id="新建Book-vue"><a href="#新建Book-vue" class="headerlink" title="新建Book.vue"></a>新建Book.vue</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;图书名称&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;作者&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr v-<span class="keyword">for</span>=<span class="string">&quot;item in books&quot;</span>&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;item.author&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">&quot;Book&quot;</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        msg:<span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">        books:[&#123;</span><br><span class="line">            id: <span class="number">1</span> ,</span><br><span class="line">            name: <span class="string">&#x27;千羽&#x27;</span>,</span><br><span class="line">            author: <span class="string">&#x27;千羽的编程之路&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: <span class="number">2</span> ,</span><br><span class="line">          name: <span class="string">&#x27;千寻&#x27;</span>,</span><br><span class="line">          author: <span class="string">&#x27;SpringBoot-Vue 前后端分离开发&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: <span class="number">3</span> ,</span><br><span class="line">          name: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">          author: <span class="string">&#x27;SpringBoot入门到精通&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">      axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll&#x27;</span>).then(function(resp)&#123;</span><br><span class="line">        _this.books = resp.data</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;&lt;style scoped=&quot;&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>配置路由<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1.png" alt="配置路由"></p><p>在terminal添加axios库：vue add axios</p><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">databases</span> <span class="keyword">library</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><p>导入数据</p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p><p>创建SpringBootTest工程<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/1.png"><br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/2.png"></p><p>添加lombok,Spring Web,SpringData Jpa,MySQL Driver</p><p>配置yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/library?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8181</span></span><br></pre></td></tr></table></figure><p>创建实体类Book.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.springboottest.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>  <span class="comment">//类名与表名绑定</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;   <span class="comment">//编写实体类</span></span><br><span class="line">        <span class="meta">@Id</span></span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建BookHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.springboottest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.springboottest.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.southwind.springboottest.reporesity.BookReposity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BookReposity bookReposity;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookReposity.findAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.png"></p><p>解决跨域问题CrosConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.springboottest.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrosConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">      .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">      .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">      .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">      .maxAge(<span class="number">3600</span>)</span><br><span class="line">      .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>创建BookReposity接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.springboottest.reporesity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.springboottest.entity.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookReposity</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>debug测试<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%8B%BF%E5%88%B0%E6%95%B0%E6%8D%AE.png"></p><p>启动SpringboottestApplication</p><p>实现前后端数据交互啦！</p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%9C.png"></p><p>实现技术<br>Spring Boot + Vue<br>使⽤ Spring Boot 进⾏后端应⽤开发，使⽤ Vue 进⾏前端应⽤开发。</p><h1 id="Vue-Element-UI"><a href="#Vue-Element-UI" class="headerlink" title="Vue + Element UI"></a>Vue + Element UI</h1><blockquote><p>先了解了一下Element(饿了么) UI，Element-Ul是饿了么前端团队推出的一款基于Vue.js 2.0 的桌面端UI框架。小编感觉它太强大了，主要你会查找和Ctrl + C，会前端开发基本上问题不大。</p></blockquote><h2 id="Vue-集成-Element-UI"><a href="#Vue-集成-Element-UI" class="headerlink" title="Vue 集成 Element UI"></a>Vue 集成 Element UI</h2><p>前提是要安装好Element插件，</p><h3 id="Element-UI-后台管理系统主要的标签："><a href="#Element-UI-后台管理系统主要的标签：" class="headerlink" title="Element UI 后台管理系统主要的标签："></a>Element UI 后台管理系统主要的标签：</h3><ul><li>el-container：构建整个⻚⾯框架。</li><li>el-aside：构建左侧菜单。</li><li>el-menu：左侧菜单内容，常⽤属性：<ul><li>:default-openeds：默认展开的菜单，通过菜单的 index 值来关联。</li><li>:default-active：默认选中的菜单，通过菜单的 index 值来关联。</li></ul></li><li>el-submenu：可展开的菜单，常⽤属性：</li><li>index：菜单的下标，⽂本类型，不能是数值类型。</li><li>template：对应 el-submenu 的菜单名。</li><li>i：设置菜单图标，通过 class 属性实则。<ul><li>el-icon-messae</li><li>el-icon-menu</li><li>el-icon-setting</li></ul></li><li>el-menu-item：菜单的⼦节点，不可再展开，常⽤属性：</li><li>index：菜单的下标，⽂本类型，不能是数值类型。</li></ul><h2 id="Vue-router-来动态构建左侧菜单"><a href="#Vue-router-来动态构建左侧菜单" class="headerlink" title="Vue router 来动态构建左侧菜单"></a>Vue router 来动态构建左侧菜单</h2><ul><li><p>导航1</p><ul><li>⻚⾯1</li><li>⻚⾯2</li></ul></li><li><p>导航2</p><ul><li>⻚⾯3</li><li>⻚⾯4</li></ul></li></ul><h2 id="menu-与-router-的绑定"><a href="#menu-与-router-的绑定" class="headerlink" title="menu 与 router 的绑定"></a>menu 与 router 的绑定</h2><ol><li>标签添加 router 属性。</li><li>在⻚⾯中添加 标签，它是⼀个容器，动态渲染你选择的 router。</li><li>标签的 index 值就是要跳转的 router。</li></ol><h2 id="Element-UI-表单数据校验"><a href="#Element-UI-表单数据校验" class="headerlink" title="Element UI 表单数据校验"></a>Element UI 表单数据校验</h2><blockquote><p>定义 rules 对象，在 rules 对象中设置表单各个选项的校验规则</p></blockquote><ul><li>required: true, 是否为必填项</li><li>message: ‘error’, 提示信息</li><li>trigger: ‘blur’，触发事件</li></ul><blockquote><p>vuetest结构层次</p></blockquote><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/vue%E7%BB%93%E6%9E%84.png"></p><h3 id="AddBook-vue"><a href="#AddBook-vue" class="headerlink" title="AddBook.vue"></a>AddBook.vue</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%B7%BB%E5%8A%A0%E5%9B%BE%E4%B9%A6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-form style&#x3D;&quot;width: 60%&quot; :model&#x3D;&quot;ruleForm&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;ruleForm&quot; label-width&#x3D;&quot;100px&quot; class&#x3D;&quot;demo-ruleForm&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item label&#x3D;&quot;图书名称&quot; prop&#x3D;&quot;name&quot;&gt;</span><br><span class="line">            &lt;el-input v-model&#x3D;&quot;ruleForm.name&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">        &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item label&#x3D;&quot;作者&quot; prop&#x3D;&quot;author&quot;&gt;</span><br><span class="line">            &lt;el-input v-model&#x3D;&quot;ruleForm.author&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">        &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">            &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm(&#39;ruleForm&#39;)&quot;&gt;提交&lt;&#x2F;el-button&gt;</span><br><span class="line">            &lt;el-button @click&#x3D;&quot;resetForm(&#39;ruleForm&#39;)&quot;&gt;重置&lt;&#x2F;el-button&gt;</span><br><span class="line">          &lt;el-button @click&#x3D;&quot;test()&quot;&gt;test&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                ruleForm: &#123;</span><br><span class="line">                    name: &#39;&#39;,</span><br><span class="line">                    author: &#39;&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                rules: &#123;</span><br><span class="line">                    name: [</span><br><span class="line">                        &#123; required: true, message: &#39;图书名称不能为空&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    author:[</span><br><span class="line">                        &#123; required: true, message: &#39;作者不能为空&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          test()&#123;</span><br><span class="line">            console.log(this.ruleForm)</span><br><span class="line">          &#125;,</span><br><span class="line">            submitForm(formName) &#123;</span><br><span class="line">                const _this &#x3D; this</span><br><span class="line">                this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">                    if (valid) &#123;</span><br><span class="line">                        axios.post(&#39;http:&#x2F;&#x2F;localhost:8181&#x2F;book&#x2F;save&#39;,this.ruleForm).then(function(resp)&#123;</span><br><span class="line">                            if(resp.data &#x3D;&#x3D; &#39;success&#39;)&#123;</span><br><span class="line">                                _this.$alert(&#39;《&#39;+_this.ruleForm.name+&#39;》添加成功！&#39;, &#39;消息&#39;, &#123;</span><br><span class="line">                                    confirmButtonText: &#39;确定&#39;,</span><br><span class="line">                                    callback: action &#x3D;&gt; &#123;</span><br><span class="line">                                        _this.$router.push(&#39;&#x2F;BookManage&#39;)</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            resetForm(formName) &#123;</span><br><span class="line">                this.$refs[formName].resetFields();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BookManage-vue"><a href="#BookManage-vue" class="headerlink" title="BookManage.vue"></a>BookManage.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-table</span><br><span class="line">                :data&#x3D;&quot;tableData&quot;</span><br><span class="line">                border</span><br><span class="line">                style&#x3D;&quot;width: 70%&quot;&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    fixed</span><br><span class="line">                    prop&#x3D;&quot;id&quot;</span><br><span class="line">                    label&#x3D;&quot;编号&quot;</span><br><span class="line">                    width&#x3D;&quot;150&quot;&gt;</span><br><span class="line">            &lt;&#x2F;el-table-column&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    prop&#x3D;&quot;name&quot;</span><br><span class="line">                    label&#x3D;&quot;图书名&quot;</span><br><span class="line">                    width&#x3D;&quot;120&quot;&gt;</span><br><span class="line">            &lt;&#x2F;el-table-column&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    prop&#x3D;&quot;author&quot;</span><br><span class="line">                    label&#x3D;&quot;作者&quot;</span><br><span class="line">                    width&#x3D;&quot;120&quot;&gt;</span><br><span class="line">            &lt;&#x2F;el-table-column&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    fixed&#x3D;&quot;right&quot;</span><br><span class="line">                    label&#x3D;&quot;操作&quot;</span><br><span class="line">                    width&#x3D;&quot;100&quot;&gt;</span><br><span class="line">                &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">                    &lt;el-button @click&#x3D;&quot;edit(scope.row)&quot; type&#x3D;&quot;text&quot; size&#x3D;&quot;small&quot;&gt;修改&lt;&#x2F;el-button&gt;</span><br><span class="line">                    &lt;el-button @click&#x3D;&quot;deleteBook(scope.row)&quot; type&#x3D;&quot;text&quot; size&#x3D;&quot;small&quot;&gt;删除&lt;&#x2F;el-button&gt;</span><br><span class="line">                &lt;&#x2F;template&gt;</span><br><span class="line">            &lt;&#x2F;el-table-column&gt;</span><br><span class="line">        &lt;&#x2F;el-table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-pagination</span><br><span class="line">                background</span><br><span class="line">                layout&#x3D;&quot;prev, pager, next&quot;</span><br><span class="line">                :page-size&#x3D;&quot;pageSize&quot;</span><br><span class="line">                :total&#x3D;&quot;total&quot;</span><br><span class="line">                @current-change&#x3D;&quot;page&quot;&gt;</span><br><span class="line">        &lt;&#x2F;el-pagination&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            deleteBook(row)&#123;</span><br><span class="line">                const _this &#x3D; this</span><br><span class="line">                axios.delete(&#39;http:&#x2F;&#x2F;localhost:8181&#x2F;book&#x2F;deleteById&#x2F;&#39;+row.id).then(function(resp)&#123;</span><br><span class="line">                    _this.$alert(&#39;《&#39;+row.name+&#39;》删除成功！&#39;, &#39;消息&#39;, &#123;</span><br><span class="line">                        confirmButtonText: &#39;确定&#39;,</span><br><span class="line">                        callback: action &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F;                          动态刷新</span><br><span class="line">                            window.location.reload()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            edit(row) &#123;</span><br><span class="line">                this.$router.push(&#123;</span><br><span class="line">                    path: &#39;&#x2F;update&#39;,</span><br><span class="line">                    query:&#123;</span><br><span class="line">                        id:row.id</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            page(currentPage)&#123;</span><br><span class="line">                const _this &#x3D; this</span><br><span class="line">                axios.get(&#39;http:&#x2F;&#x2F;localhost:8181&#x2F;book&#x2F;findAll&#x2F;&#39;+currentPage+&#39;&#x2F;6&#39;).then(function(resp)&#123;</span><br><span class="line">                    console.log(resp)</span><br><span class="line">                    _this.tableData &#x3D; resp.data.content</span><br><span class="line">                    _this.pageSize &#x3D; resp.data.size</span><br><span class="line">                    _this.total &#x3D; resp.data.totalElements</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                pageSize:&#39;1&#39;,</span><br><span class="line">                total:&#39;11&#39;,</span><br><span class="line">                tableData: null</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        created() &#123;</span><br><span class="line">            const _this &#x3D; this</span><br><span class="line">            axios.get(&#39;http:&#x2F;&#x2F;localhost:8181&#x2F;book&#x2F;findAll&#x2F;1&#x2F;6&#39;).then(function(resp)&#123;</span><br><span class="line">                console.log(resp)</span><br><span class="line">                _this.tableData &#x3D; resp.data.content</span><br><span class="line">                _this.pageSize &#x3D; resp.data.size</span><br><span class="line">                _this.total &#x3D; resp.data.totalElements</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BookUpdate"><a href="#BookUpdate" class="headerlink" title="BookUpdate"></a>BookUpdate</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E4%BF%AE%E6%94%B9.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-form style&#x3D;&quot;width: 60%&quot; :model&#x3D;&quot;ruleForm&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;ruleForm&quot; label-width&#x3D;&quot;100px&quot; class&#x3D;&quot;demo-ruleForm&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item label&#x3D;&quot;图书编号&quot;&gt;</span><br><span class="line">            &lt;el-input v-model&#x3D;&quot;ruleForm.id&quot; readOnly&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">        &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item label&#x3D;&quot;图书名称&quot; prop&#x3D;&quot;name&quot;&gt;</span><br><span class="line">            &lt;el-input v-model&#x3D;&quot;ruleForm.name&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">        &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item label&#x3D;&quot;作者&quot; prop&#x3D;&quot;author&quot;&gt;</span><br><span class="line">            &lt;el-input v-model&#x3D;&quot;ruleForm.author&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">        &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">            &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm(&#39;ruleForm&#39;)&quot;&gt;修改&lt;&#x2F;el-button&gt;</span><br><span class="line">            &lt;el-button @click&#x3D;&quot;resetForm(&#39;ruleForm&#39;)&quot;&gt;重置&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                ruleForm: &#123;</span><br><span class="line">                    id: &#39;&#39;,</span><br><span class="line">                    name: &#39;&#39;,</span><br><span class="line">                    author: &#39;&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                rules: &#123;</span><br><span class="line">                    name: [</span><br><span class="line">                        &#123; required: true, message: &#39;图书名称不能为空&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    author:[</span><br><span class="line">                        &#123; required: true, message: &#39;作者不能为空&#39;, trigger: &#39;blur&#39; &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            submitForm(formName) &#123;</span><br><span class="line">                const _this &#x3D; this</span><br><span class="line">                this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">                    if (valid) &#123;</span><br><span class="line">                        axios.put(&#39;http:&#x2F;&#x2F;localhost:8181&#x2F;book&#x2F;update&#39;,this.ruleForm).then(function(resp)&#123;</span><br><span class="line">                            if(resp.data &#x3D;&#x3D; &#39;success&#39;)&#123;</span><br><span class="line">                                _this.$alert(&#39;《&#39;+_this.ruleForm.name+&#39;》修改成功！&#39;, &#39;消息&#39;, &#123;</span><br><span class="line">                                    confirmButtonText: &#39;确定&#39;,</span><br><span class="line">                                    callback: action &#x3D;&gt; &#123;</span><br><span class="line">                                        _this.$router.push(&#39;&#x2F;BookManage&#39;)</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            resetForm(formName) &#123;</span><br><span class="line">                this.$refs[formName].resetFields();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"></span><br><span class="line">            const _this &#x3D; this</span><br><span class="line">            axios.get(&#39;http:&#x2F;&#x2F;localhost:8181&#x2F;book&#x2F;findById&#x2F;&#39;+this.$route.query.id).then(function(resp)&#123;</span><br><span class="line">                _this.ruleForm &#x3D; resp.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置路由/router/index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line">import BookManage from &#39;..&#x2F;views&#x2F;BookManage&#39;</span><br><span class="line">import AddBook from &#39;..&#x2F;views&#x2F;AddBook&#39;</span><br><span class="line">import Index from &#39;..&#x2F;views&#x2F;Index&#39;</span><br><span class="line">import BookUpdate from &#39;..&#x2F;views&#x2F;BookUpdate&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">const routes &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path:&quot;&#x2F;&quot;,</span><br><span class="line">    name:&quot;图书管理&quot;,</span><br><span class="line">    component:Index,</span><br><span class="line">    show:true,</span><br><span class="line">    redirect:&quot;&#x2F;BookManage&quot;,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path:&quot;&#x2F;BookManage&quot;,</span><br><span class="line">        name:&quot;查询图书&quot;,</span><br><span class="line">        component:BookManage</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path:&quot;&#x2F;AddBook&quot;,</span><br><span class="line">        name:&quot;添加图书&quot;,</span><br><span class="line">        component:AddBook</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:&#39;&#x2F;update&#39;,</span><br><span class="line">    component:BookUpdate,</span><br><span class="line">    show:false</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>后端springbootTest代码实现BookHandler.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.southwind.springboottest.controller;</span><br><span class="line"></span><br><span class="line">import com.southwind.springboottest.entity.Book;</span><br><span class="line">import com.southwind.springboottest.reporesity.BookReposity;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.domain.Page;</span><br><span class="line">import org.springframework.data.domain.PageRequest;</span><br><span class="line">import org.springframework.data.domain.Pageable;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">public class BookHandler &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private BookReposity bookReposity;</span><br><span class="line"></span><br><span class="line">  @GetMapping(&quot;&#x2F;findAll&#x2F;&#123;page&#125;&#x2F;&#123;size&#125;&quot;)</span><br><span class="line">  public Page&lt;Book&gt; findAll(@PathVariable(&quot;page&quot;) Integer page, @PathVariable(&quot;size&quot;) Integer size)&#123;</span><br><span class="line">    Pageable pageable &#x3D; PageRequest.of(page-1,size);</span><br><span class="line">    return bookReposity.findAll(pageable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @PostMapping(&quot;&#x2F;save&quot;)</span><br><span class="line">  public String  save(@RequestBody Book book )&#123;</span><br><span class="line"></span><br><span class="line">    Book result &#x3D; bookReposity.save(book);</span><br><span class="line">    if(result !&#x3D; null)&#123;</span><br><span class="line">      return &quot;success&quot;;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      return &quot;error&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  @GetMapping(&quot;&#x2F;findById&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">  public Book findById(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class="line">    return bookReposity.findById(id).get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @PutMapping(&quot;&#x2F;update&quot;)</span><br><span class="line">  public String update(@RequestBody Book book ) &#123;</span><br><span class="line">    Book result &#x3D; bookReposity.save(book);</span><br><span class="line">    if (result !&#x3D; null) &#123;</span><br><span class="line">      return &quot;success&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return &quot;error&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @DeleteMapping(&quot;&#x2F;deleteById&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">  public void deleteById(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class="line">    bookReposity.deleteById(id);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，在测试每一个功能时，建议在BookReposity接口上创建一个测试类BookReposityTest，测试看看是否成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.springboottest.reporesity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.springboottest.entity.Book;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookReposityTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> BookReposity bookReposity;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//测试查找所有数据</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(bookReposity.findAll());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加测试</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Book book = <span class="keyword">new</span> Book();</span><br><span class="line">    book.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    book.setAuthor(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    Book save = bookReposity.save(book);</span><br><span class="line">    System.out.println(save);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Book book = bookReposity.findById(<span class="number">1</span>).get();</span><br><span class="line">    System.out.println(book);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//测试修改</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Book book = <span class="keyword">new</span> Book();</span><br><span class="line">    book.setId(<span class="number">12</span>);</span><br><span class="line">    book.setName(<span class="string">&quot;测试测试&quot;</span>);</span><br><span class="line">    Book save = bookReposity.save(book);</span><br><span class="line">    System.out.println(save);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//测试删除</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    bookReposity.deleteById(<span class="number">12</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot-Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%9F%A5%E8%AF%A2%E5%9B%BE%E4%B9%A6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot快速入门2</title>
      <link href="/2020/05/11/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A82/"/>
      <url>/2020/05/11/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A82/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot快速入门2"><a href="#SpringBoot快速入门2" class="headerlink" title="SpringBoot快速入门2"></a>SpringBoot快速入门2</h1><h2 id="我们要掌握的目标："><a href="#我们要掌握的目标：" class="headerlink" title="我们要掌握的目标："></a>我们要掌握的目标：</h2><ol><li>能够完成application.properties配置文件的配置</li><li>能够完成application.yml配置文件的配置</li><li>能够使用SpringBoot集成Mybatis</li><li>能够使用SpringBoot集成Junit</li><li>能够使用SpringBoot集成Spring Data JPA</li><li>能够使用SpringBoot集成Redis</li></ol><p><em>文章可能有点长，会有一点枯燥，不过基本上知识点都全了</em></p><h1 id="SpringBoot的配置文件"><a href="#SpringBoot的配置文件" class="headerlink" title="SpringBoot的配置文件"></a>SpringBoot的配置文件</h1><h3 id="SpringBoot配置文件类型和作用"><a href="#SpringBoot配置文件类型和作用" class="headerlink" title="SpringBoot配置文件类型和作用"></a>SpringBoot配置文件类型和作用</h3><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</p><p>SpringBoot配置文件有两种，分别是properties属性文件和yml文件。其中properties属性文件我们很熟悉，所以接下来重点介绍的是yml文件的语法和使用方式。总体来说SpringBoot配置文件需要注意以下几点：</p><ul><li>文件保存位置是main/resources目录</li><li>文件名是application.properties或application.yml（application.yaml）properties文件和yml文件二选一。我们所做的配置可以分开放在这两个配置文件中也可以只使用其中一个。</li><li>如果同一个配置项在两个配置文件中有不同配置——比如，server.port在properties文件里设置了1000，在yml文件里设置了2000——那么以properties文件为准，但说实话，这么干挺无聊的。</li></ul><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A82/1.png"></p><p>另外我们还要知道一点：SpringBoot本身已经有自动配置了，配置文件是对自动配置的调整和修改。</p><blockquote><p>YAML简介</p></blockquote><p>application.yml使用的是YAML语法，YAML的意思是：YAML is not markup language。<br>它强调自己不是XML、HTML这样的标记语言，不使用标签。<br>它以数据为中心，比JSON、XML更适合做配置文件。</p><blockquote><p>YAML基本语法</p></blockquote><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A82/2.png"><br>注意：键和值大小写敏感。</p><blockquote><p>值的类型</p></blockquote><p>字面量、普通的字符串、数值、布尔类型。<br>注意：设置数据库密码的时候如果是0开头的一串数字会被SpringBoot按照8进制数据解析，从而导致连接数据库时密码错误。加上引号即可。</p><p>对象、Map<br>常规写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">stu-id:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">stu-name:</span> <span class="string">jerry</span></span><br></pre></td></tr></table></figure><p>行内写法:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span> &#123; <span class="attr">stu-id:</span> <span class="number">5</span><span class="string">，stu-name:</span> <span class="string">jerry，subject:</span> <span class="string">java</span> &#125;</span><br></pre></td></tr></table></figure><p>数组<br>使用“-”表示数组中的元素，“-”后面同样需要一个空格。</p><p>常规写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">stu-id:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">stu-name:</span> <span class="string">jerry</span></span><br><span class="line">  <span class="attr">graduated:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">php</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">stu-id:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">stu-name:</span> <span class="string">jerry</span></span><br><span class="line">  <span class="attr">graduated:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">subject:</span>  [ <span class="string">java</span>, <span class="string">php</span> , <span class="string">mysql</span>]</span><br></pre></td></tr></table></figure><blockquote><p> 配置文件中的值注入JavaBean</p></blockquote><p> Java类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前类存放读取yml配置文件的数据，要求当前类也在IOC容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// @ConfigurationProperties表示和yml配置文件对应，读取其中数据</span></span><br><span class="line"><span class="comment">// prefix属性表示和yml配置文件中以“student”开头的配置项对应</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer stuId;</span><br><span class="line"><span class="keyword">private</span> String stuName;</span><br><span class="line"><span class="keyword">private</span> Boolean graduated;</span><br><span class="line"><span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用@DateTimeFormat指定日期时间格式，那么必须使用默认格式“1990/10/12”</span></span><br><span class="line"><span class="comment">// 如果不使用默认格式就必须使用@DateTimeFormat注解的pattern指定日期时间格式</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; teachers;</span><br><span class="line"><span class="keyword">private</span> Address address;</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>使用@Component注解是为了将当前类加入IOC容器</li><li>@ConfigurationProperties表示将配置文件中的对应属性的值注入当前组件。</li><li>prefix属性限定了配置文件中属性的范围。当我们指定了prefix=”student”时，只有student属性中的数据会被注入。</li><li>加入spring-boot-configuration-processor依赖后编写配置文件会根据@ConfigurationProperties注解标记的类生成提示。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">stu-id:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">stu-name:</span> <span class="string">jerry</span></span><br><span class="line">  <span class="attr">graduated:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">php</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">birthday:</span> <span class="number">1998-10-12 20:15:06</span></span><br><span class="line">  <span class="attr">teachers:</span></span><br><span class="line">    <span class="attr">java:</span> <span class="string">千羽</span></span><br><span class="line">    <span class="attr">mysql:</span> <span class="string">千寻</span></span><br><span class="line">    <span class="attr">web:</span> <span class="string">bob</span></span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">    <span class="attr">province:</span> <span class="string">广东</span></span><br><span class="line">    <span class="attr">city:</span> <span class="string">深圳</span></span><br><span class="line">    <span class="attr">street:</span> <span class="string">XXX大道</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringBootTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Logger logger = LoggerFactory.getLogger(MySpringBootTest.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadYaml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.info(student.toString());</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>使用@Value注解读取配置文件</p></blockquote><p>@Value注解能够以更简单的方式读取配置文件中的值，但是仅限于简单类型。</p><p>yml配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nateshao.best.wishes:</span> <span class="string">&quot;快点开学我就快乐！&quot;</span></span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A82/4.png"></p><blockquote><p>Spring的注解</p></blockquote><p>@Configuration注解<br>使用@Configuration注解标记一个类后， 这个类成为配置类，加载这个类中的配置可以取代以前的XML配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAnnotationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>基于注解类而不是XML配置文件创建IOC容器对象的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext iocContainer = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringAnnotationConfig.class);</span><br></pre></td></tr></table></figure><p>@Bean注解<br>相当于XML配置文件中的bean标签。用于把一个类的对象加入IOC容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAnnotationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmployeeService <span class="title">getEmployeeService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EmployeeService();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Import注解<br>相对于@Bean注解，使用@Import注解可以更便捷的将一个类加入IOC容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(EmployeeHandler.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAnnotationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Conditional注解<br>一个类在满足特定条件时才加入IOC容器。</p><p>@ComponentScan注解<br>指定IOC容器扫描的包。相当于在XML中配置context:component-scan</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">value=&quot;com.nateshao.spring.annotation.component&quot;,</span></span><br><span class="line"><span class="meta">useDefaultFilters = false,</span></span><br><span class="line"><span class="meta">includeFilters = &#123;</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.ANNOTATION, classes = Controller.class)</span></span><br><span class="line"><span class="meta">&#125;,</span></span><br><span class="line"><span class="meta">excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.ANNOTATION, classes = Service.class)</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><blockquote><p>SpringBoot的注解</p></blockquote><p>@SpringBootConfiguration注解<br>@Configuration注解的SpringBoot版。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="string">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="string">@Documented</span></span><br><span class="line"><span class="string">@Configuration</span></span><br><span class="line"><span class="string">public</span> <span class="string">@interface</span> <span class="string">SpringBootConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@EnableAutoConfiguration注解<br>启用自动化配置功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="string">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="string">@Documented</span></span><br><span class="line"><span class="string">@Inherited</span></span><br><span class="line"><span class="string">@AutoConfigurationPackage</span></span><br><span class="line"><span class="string">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="string">public</span> <span class="string">@interface</span> <span class="string">EnableAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">String</span> <span class="string">ENABLED_OVERRIDE_PROPERTY</span> <span class="string">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"> <span class="string">*</span> <span class="string">Exclude</span> <span class="string">specific</span> <span class="string">auto-configuration</span> <span class="string">classes</span> <span class="string">such</span> <span class="string">that</span> <span class="string">they</span> <span class="string">will</span> <span class="string">never</span> <span class="string">be</span> <span class="string">applied.</span></span><br><span class="line"> <span class="string">*</span> <span class="string">@return</span> <span class="string">the</span> <span class="string">classes</span> <span class="string">to</span> <span class="string">exclude</span></span><br><span class="line"> <span class="string">*/</span></span><br><span class="line"><span class="string">Class&lt;?&gt;</span>[] <span class="string">exclude()</span> <span class="string">default</span> &#123;&#125;<span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"> <span class="string">*</span> <span class="string">Exclude</span> <span class="string">specific</span> <span class="string">auto-configuration</span> <span class="string">class</span> <span class="string">names</span> <span class="string">such</span> <span class="string">that</span> <span class="string">they</span> <span class="string">will</span> <span class="string">never</span> <span class="string">be</span></span><br><span class="line"> <span class="string">*</span> <span class="string">applied.</span></span><br><span class="line"> <span class="string">*</span> <span class="string">@return</span> <span class="string">the</span> <span class="string">class</span> <span class="string">names</span> <span class="string">to</span> <span class="string">exclude</span></span><br><span class="line"> <span class="string">*</span> <span class="string">@since</span> <span class="number">1.3</span><span class="number">.0</span></span><br><span class="line"> <span class="string">*/</span></span><br><span class="line"><span class="string">String</span>[] <span class="string">excludeName()</span> <span class="string">default</span> &#123;&#125;<span class="string">;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot在这里通过@Import注解中的AutoConfigurationImportSelector.class将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中，给容器中导入非常多的自动配置类（XxxxAutoConfiguration）。这样就给容器中导入了这个场景需要的所有组件，并配置好这些组件。而这些组件以前是需要我们手动在XML中配置才能加入IOC容器。</p><p>@AutoConfigurationPackage注解<br>指定自动化配置的包。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="string">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="string">@Documented</span></span><br><span class="line"><span class="string">@Inherited</span></span><br><span class="line"><span class="string">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"><span class="string">public</span> <span class="string">@interface</span> <span class="string">AutoConfigurationPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringBoot在这里通过@Import注解中的AutoConfigurationPackages.Registrar.class将主启动类所在包和它的子包中的所有组件扫描到IOC容器。</p><blockquote><p>@SpringBootApplication注解</p></blockquote><p>表示当前应用是一个SpringBoot应用。包含@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan注解。</p><blockquote><p>SpringBoot工作原理</p></blockquote><p>读取spring.factories文件<br>SpringBoot启动时会读取spring-boot-autoconfigure-2.1.6.RELEASE.jar包下的META-INF/spring.factories文件。读取org.springframework.boot.autoconfigure.EnableAutoConfiguration属性的值加载自动配置类。</p><p>加载XxxProperties类<br>根据自动配置类中指定的XxxProperties类设置自动配置的属性值，开发者也可以根据XxxProperties类中指定的属性在yml配置文件中修改自动配置。</p><p>根据@ConditionalXxx注解决定加载哪些组件<br>SpringBoot通过@ConditionalXxx注解指定特定组件加入IOC容器时所需要具备的特定条件。这个组件会在满足条件时加入IOC容器。</p><h1 id="SpringBoot与整合其他技术"><a href="#SpringBoot与整合其他技术" class="headerlink" title="SpringBoot与整合其他技术"></a>SpringBoot与整合其他技术</h1><p><em>个人总结：SpringBoot整合什么就在pom.xml文件加入什么依赖</em></p><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><h3 id="添加Mybatis的起步依赖"><a href="#添加Mybatis的起步依赖" class="headerlink" title="添加Mybatis的起步依赖"></a>添加Mybatis的起步依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL连接驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建user表"><a href="#创建user表" class="headerlink" title="创建user表"></a>创建user表</h3><p>在test数据库中创建table_emp表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `table_emp`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`table_emp`</span> (</span><br><span class="line"><span class="string">`emp_id`</span>  <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT ,</span><br><span class="line"><span class="string">`emp_name`</span>  <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="literal">NULL</span> ,</span><br><span class="line"><span class="string">`emp_age`</span>  <span class="built_in">int</span> <span class="literal">NULL</span> ,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_id`</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of table_emp</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`table_emp`</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;19&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`table_emp`</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;18&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建实体Bean"><a href="#创建实体Bean" class="headerlink" title="创建实体Bean"></a>创建实体Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer empId;</span><br><span class="line"><span class="keyword">private</span> String empName;</span><br><span class="line"><span class="keyword">private</span> Integer empAge;</span><br><span class="line">    <span class="comment">//此处省略getter和setter方法 .. ..</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写Mapper接口"><a href="#编写Mapper接口" class="headerlink" title="编写Mapper接口"></a>编写Mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Emp&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：@Mapper标记该类是一个mybatis的mapper接口，可以被spring boot自动扫描到spring上下文中</p><h3 id="配置Mapper映射文件"><a href="#配置Mapper映射文件" class="headerlink" title="配置Mapper映射文件"></a>配置Mapper映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.spring.boot.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.spring.boot.entity.Emp&quot;</span>&gt;</span></span><br><span class="line">select emp_id empId, emp_name empName, emp_age empAge</span><br><span class="line">from</span><br><span class="line">table_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在yml配置文件中添加mybatis的信息"><a href="#在yml配置文件中添加mybatis的信息" class="headerlink" title="在yml配置文件中添加mybatis的信息"></a>在yml配置文件中添加mybatis的信息</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mydb</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/sb_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mybatis/mapper/*Mapper.xml</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.atguigu.spring.boot.mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>在logging.level下指定包名然后设置日志级别就能够针对某个包下的功能打印日志。现在对Mapper接口所在包打印日志就能够看到MyBatis打印的SQL语句。</p><h3 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.nateshao.spring.boot.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pro17SpringBootMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Pro17SpringBootMybatisApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了@MapperScan(“com.nateshao.spring.boot.mapper”)注解扫描Mapper接口所在的包。配置了这个扫描我们才能对Mapper接口进行自动装配。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pro17SpringBootMybatisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Emp&gt; selectAll = empMapper.selectAll();</span><br><span class="line"><span class="keyword">for</span> (Emp emp : selectAll) &#123;</span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合Junit"><a href="#SpringBoot整合Junit" class="headerlink" title="SpringBoot整合Junit"></a>SpringBoot整合Junit</h2><h3 id="添加Junit的起步依赖"><a href="#添加Junit的起步依赖" class="headerlink" title="添加Junit的起步依赖"></a>添加Junit的起步依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.MySpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MySpringBootApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，</p><p>SpringRunner继承自SpringJUnit4ClassRunner，使用哪一个Spring提供的测试测试引擎都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRunner</span> <span class="keyword">extends</span> <span class="title">SpringJUnit4ClassRunner</span> </span></span><br></pre></td></tr></table></figure><p>@SpringBootTest的属性指定的是引导类的字节码对象</p><h3 id="控制台打印信息"><a href="#控制台打印信息" class="headerlink" title="控制台打印信息"></a>控制台打印信息</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/15.png"></p><h2 id="SpringBoot整合Spring-Data-JPA"><a href="#SpringBoot整合Spring-Data-JPA" class="headerlink" title="SpringBoot整合Spring Data JPA"></a>SpringBoot整合Spring Data JPA</h2><h3 id="添加Spring-Data-JPA的起步依赖"><a href="#添加Spring-Data-JPA的起步依赖" class="headerlink" title="添加Spring Data JPA的起步依赖"></a>添加Spring Data JPA的起步依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springBoot JPA的起步依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加数据库驱动依赖"><a href="#添加数据库驱动依赖" class="headerlink" title="添加数据库驱动依赖"></a>添加数据库驱动依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL连接驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在application-properties中配置数据库和jpa的相关属性"><a href="#在application-properties中配置数据库和jpa的相关属性" class="headerlink" title="在application.properties中配置数据库和jpa的相关属性"></a>在application.properties中配置数据库和jpa的相关属性</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JPA Configuration:</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.generate-ddl</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.naming_strategy</span>=<span class="string">org.hibernate.cfg.ImprovedNamingStrategy</span></span><br></pre></td></tr></table></figure><h3 id="创建实体配置实体"><a href="#创建实体配置实体" class="headerlink" title="创建实体配置实体"></a>创建实体配置实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//此处省略setter和getter方法... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写UserRepository"><a href="#编写UserRepository" class="headerlink" title="编写UserRepository"></a>编写UserRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类-1"><a href="#编写测试类-1" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes=MySpringBootApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userRepository.findAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制台打印信息-1"><a href="#控制台打印信息-1" class="headerlink" title="控制台打印信息"></a>控制台打印信息</h3><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/16.png"></p><p>注意：如果是jdk9，执行报错如下：</p><p><img src="https://mateshao.oss-cn-shenzhen.aliyuncs.com/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/17.png"></p><p>原因：jdk缺少相应的jar</p><p>解决方案：手动导入对应的maven坐标，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdk9需要导入如下坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h2><h3 id="添加redis的起步依赖"><a href="#添加redis的起步依赖" class="headerlink" title="添加redis的起步依赖"></a>添加redis的起步依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置使用redis启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置redis的连接信息"><a href="#配置redis的连接信息" class="headerlink" title="配置redis的连接信息"></a>配置redis的连接信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><h3 id="注入RedisTemplate测试redis操作"><a href="#注入RedisTemplate测试redis操作" class="headerlink" title="注入RedisTemplate测试redis操作"></a>注入RedisTemplate测试redis操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = SpringbootJpaApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//从redis缓存中获得指定的数据</span></span><br><span class="line">        String userListData = redisTemplate.boundValueOps(<span class="string">&quot;user.findAll&quot;</span>).get();</span><br><span class="line">        <span class="comment">//如果redis中没有数据的话</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==userListData)&#123;</span><br><span class="line">            <span class="comment">//查询数据库获得数据</span></span><br><span class="line">            List&lt;User&gt; all = userRepository.findAll();</span><br><span class="line">            <span class="comment">//转换成json格式字符串</span></span><br><span class="line">            ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            userListData = om.writeValueAsString(all);</span><br><span class="line">            <span class="comment">//将数据存储到redis中，下次在查询直接从redis中获得数据，不用在查询数据库</span></span><br><span class="line">            redisTemplate.boundValueOps(<span class="string">&quot;user.findAll&quot;</span>).set(userListData);</span><br><span class="line">            System.out.println(<span class="string">&quot;===============从数据库获得数据===============&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;===============从redis缓存中获得数据===============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(userListData);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然，还有很多Spring Boot整合其他东西，这里就不一一列举了，附上在码云上的一刀SpringBoot项目图谱，有时间在慢慢肝吧</p></blockquote><p><img src="https://xnstatic-1253397658.file.myqcloud.com/SpringBootBucket.png"></p><p><em>总结，SpringBoot要做什么工作，集成什么环境，就添加什么依赖，然后继续肝就完事了</em></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot快速入门1</title>
      <link href="/2020/04/12/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A81/"/>
      <url>/2020/04/12/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A81/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SpringBoot-简介"><a href="#1-SpringBoot-简介" class="headerlink" title="1 SpringBoot 简介"></a>1 SpringBoot 简介</h1><blockquote><p>SpringBoot(春季靴)是对Spring的进一步封装。</p></blockquote><h1 id="2-SpringBoot有哪些优势？"><a href="#2-SpringBoot有哪些优势？" class="headerlink" title="2 SpringBoot有哪些优势？"></a>2 SpringBoot有哪些优势？</h1><blockquote><ul><li>SpringBoot是对Spring的进一步封装，基于注解开发，舍弃笨重的XML，确实需要配置的使用yml或properties进行简要配置即可。</li><li>每一个工程都可以打成一个jar包，其中内置了Tomcat或其他Servlet容器，可以独立运行，这是和微服务理念最为契合的一点</li><li>每一个特定场景下的需求都封装成了一个starter，只要导入这个starter就有了这个场景所需要的一切。其中包括针对这个场景的自动化配置、依赖信息。</li></ul></blockquote><h1 id="3-一个SpringBoot工程主要组成部分"><a href="#3-一个SpringBoot工程主要组成部分" class="headerlink" title="3 一个SpringBoot工程主要组成部分"></a>3 一个SpringBoot工程主要组成部分</h1><h2 id="3-1-使用版本"><a href="#3-1-使用版本" class="headerlink" title="3.1 使用版本"></a>3.1 使用版本</h2><p><img src="https://i.loli.net/2020/04/12/OmvuQWzMnkigKcl.png"></p><h1 id="4-创建工程"><a href="#4-创建工程" class="headerlink" title="4 创建工程"></a>4 创建工程</h1><h2 id="4-1-方式一-Maven工程"><a href="#4-1-方式一-Maven工程" class="headerlink" title="4.1 方式一 : Maven工程"></a>4.1 方式一 : Maven工程</h2><p><em>先创建Maven工程，然后引入SpringBoot环境。</em></p><h3 id="4-1-1-填写坐标"><a href="#4-1-1-填写坐标" class="headerlink" title="4.1.1 填写坐标"></a>4.1.1 填写坐标</h3><p><img src="https://i.loli.net/2020/04/12/i846Kpj3AVUPg1R.png"></p><p><em>Eclipse创建好了maven工程之后，可能会报错，这时，我们update一下maven工程就好。<br>但是还有一个小问题，由于是eclipse版本低的原因，出现Unknown报错，这个对工程不影响。（听说换了版本的话会卡哦)</em></p><p><img src="https://i.loli.net/2020/04/12/gJx6YEAOkKQHnd9.png" alt="小问题.jpg"></p><p><img src="https://i.loli.net/2020/04/12/MDI2C8ZuURLPpjT.jpg"></p><h2 id="4-2-方式二-Spring-Starter-project"><a href="#4-2-方式二-Spring-Starter-project" class="headerlink" title="4.2 方式二 : Spring Starter project"></a>4.2 方式二 : Spring Starter project</h2><blockquote><p>使用Spring插件创建工程，主启动类、测试类、pom.xml都会自动给我们创建好，但是创建过程必须要联网。</p></blockquote><h2 id="4-3-配置pom-xml文件"><a href="#4-3-配置pom-xml文件" class="headerlink" title="4.3 配置pom.xml文件"></a>4.3 配置pom.xml文件</h2> <!-- 继承SpringBoot官方指定的父工程 --> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> &lt;parent&gt; </span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"> &lt;parent&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!-- 加入Web开发所需要的场景启动器 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;!-- 指定groupId和artifactId即可，版本已在父工程中定义 --&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"> &lt;!-- Maven构建过程相关配置 --&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;!-- 构建过程中所需要用到的插件 --&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;!-- 这个插件将SpringBoot应用打包成一个可执行的jar包 --&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">  &lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><h2 id="4-4-创建主启动类"><a href="#4-4-创建主启动类" class="headerlink" title="4.4 创建主启动类"></a>4.4 创建主启动类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.spring.boot;</span><br><span class="line">​</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">​</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">​</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    SpringApplication.run(HelloWorld.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-创建hander类"><a href="#4-5-创建hander类" class="headerlink" title="4.5 创建hander类"></a>4.5 创建hander类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.spring.boot.hander;</span><br><span class="line">​</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">​</span><br><span class="line">@RestController</span><br><span class="line">public class HelloWorldHandler &#123;</span><br><span class="line">​</span><br><span class="line">  @RequestMapping(&quot;&#x2F;spring&#x2F;boot&#x2F;hello&quot;)</span><br><span class="line">  public String hello() &#123;</span><br><span class="line">    return &quot;This is SpringBootDemo !!!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-运行-建议以这种方式运行，如果出现要修改的话，直接右键运行Application的话，出现8080端口被占用"><a href="#4-6-运行-建议以这种方式运行，如果出现要修改的话，直接右键运行Application的话，出现8080端口被占用" class="headerlink" title="4.6 运行(建议以这种方式运行，如果出现要修改的话，直接右键运行Application的话，出现8080端口被占用)"></a>4.6 运行(建议以这种方式运行，如果出现要修改的话，直接右键运行Application的话，出现8080端口被占用)</h2><p><img src="https://i.loli.net/2020/04/12/lvIs6OcWBtCnFq9.png"></p><h2 id="4-7-执行结果"><a href="#4-7-执行结果" class="headerlink" title="4.7 执行结果"></a>4.7 执行结果</h2><p><img src="https://i.loli.net/2020/04/12/L5KjfE1JYONye27.png" alt="result.jpg"></p><p>当然，这个SpringLogo也是可以换掉的哦 在src/main/resources添加一张照片，后缀名改为banner.jpg就可以了</p><p><img src="https://i.loli.net/2020/04/12/zcaOkHq4ZNGt2hm.png"></p><p>再次运行，结果。 </p><p><img src="https://i.loli.net/2020/04/12/iysQH3xRE548AzN.png"></p><h1 id="5-HelloWorld-讲解"><a href="#5-HelloWorld-讲解" class="headerlink" title="5 HelloWorld 讲解"></a>5 HelloWorld 讲解</h1><blockquote><p>@SpringBootApplication</p></blockquote><p>标记在主启动类上，表明这是一个SpringBoot应用。在主启动类上，main()方法就是整个SpringBoot应用的入口，从main开始执行SpringBoot应用。</p><blockquote><p>SpringApplication.run(…)</p></blockquote><p>启动SpringBoot应用，之后加载很多内置文件，然后自动化配置加载很多组件到IOC容器。<br>在Spring环境下，采用的是包自动扫描的方式</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
